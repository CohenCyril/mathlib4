/-
Copyright (c) 2024 Amelia Livingston. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robert A. Spencer, Markus Himmel, Amelia Livingston
-/
import Mathlib.Algebra.Category.BialgebraCat.Basic
import Mathlib.RingTheory.HopfAlgebra

/-!
# The category of Hopf `R`-algebras

`HopfAlgebraCat.{v} R` is the category of bundled Hopf `R`-algebras with carrier in the universe v.

This file simply mimics `Mathlib.Algebra.Category.ModuleCat.Basic`.

-/

universe v u

variable (R : Type u) [CommRing R]

/-- Objects in the category of Hopf `R`-algebras. -/
structure HopfAlgebraCat where
  /-- the underlying type of an object in `HopfAlgebraCat R` -/
  carrier : Type v
  [isRing : Ring carrier]
  [isHopfAlgebra : HopfAlgebra R carrier]

attribute [instance] HopfAlgebraCat.isRing HopfAlgebraCat.isHopfAlgebra

/-- An alias for `HopfAlgebraCat.{max u‚ÇÅ u‚ÇÇ}`, to deal around unification issues.
Since the universe the ring lives in can be inferred, we put that last. -/
@[nolint checkUnivs]
abbrev HopfAlgebraCatMax.{v‚ÇÅ, v‚ÇÇ, u‚ÇÅ} (R : Type u‚ÇÅ) [CommRing R] := HopfAlgebraCat.{max v‚ÇÅ v‚ÇÇ, u‚ÇÅ} R

namespace HopfAlgebraCat
open CategoryTheory CategoryTheory.Limits

instance : CoeSort (HopfAlgebraCat.{v} R) (Type v) :=
  ‚ü®HopfAlgebraCat.carrier‚ü©

attribute [coe] HopfAlgebraCat.carrier

instance HopfAlgebraCategory : Category.{v, max (v+1) u} (HopfAlgebraCat.{v} R) where
  Hom M N := M ‚Üí‚Çêc[R] N
  id _ := BialgHom.id R _
  comp f g := g.comp f

instance {M N : HopfAlgebraCat.{v} R} : FunLike (M ‚ü∂ N) M N :=
  inferInstanceAs (FunLike (M ‚Üí‚Çêc[R] N) M N)

instance {M N : HopfAlgebraCat.{v} R} : BialgHomClass (M ‚ü∂ N) R M N :=
  BialgHom.bialgHomClass

instance hopfAlgebraConcreteCategory : ConcreteCategory.{v} (HopfAlgebraCat.{v} R) where
  forget :=
    { obj := fun R => R
      map := fun f => f }
  forget_faithful := ‚ü®fun h => BialgHom.ext (fun x => by
    dsimp at h
    rw [h])‚ü©

-- how necessary are all these?
instance {M : HopfAlgebraCat.{v} R} : Ring ((forget (HopfAlgebraCat R)).obj M) :=
  (inferInstance : Ring M)
instance {M : HopfAlgebraCat.{v} R} : Module R ((forget (HopfAlgebraCat R)).obj M) :=
  (inferInstance : Module R M)
instance {M : HopfAlgebraCat.{v} R} : Algebra R ((forget (HopfAlgebraCat R)).obj M) :=
  (inferInstance : Algebra R M)
instance {M : HopfAlgebraCat.{v} R} : Coalgebra R ((forget (HopfAlgebraCat R)).obj M) :=
  (inferInstance : Coalgebra R M)
instance {M : HopfAlgebraCat.{v} R} : Bialgebra R ((forget (HopfAlgebraCat R)).obj M) :=
  (inferInstance : Bialgebra R M)
instance {M : HopfAlgebraCat.{v} R} : HopfAlgebra R ((forget (HopfAlgebraCat R)).obj M) :=
  (inferInstance : HopfAlgebra R M)

@[ext]
lemma ext {M N : HopfAlgebraCat.{v} R} {f‚ÇÅ f‚ÇÇ : M ‚ü∂ N} (h : ‚àÄ (x : M), f‚ÇÅ x = f‚ÇÇ x) : f‚ÇÅ = f‚ÇÇ :=
  DFunLike.ext _ _ h

instance hasForgetToBialgebra : HasForget‚ÇÇ (HopfAlgebraCat R) (BialgebraCat R) where
  forget‚ÇÇ :=
    { obj := fun M => BialgebraCat.of R M
      map := fun f => BialgebraCat.ofHom f }

instance hasForgetToCoalgebra : HasForget‚ÇÇ (HopfAlgebraCat R) (CoalgebraCat R) where
  forget‚ÇÇ :=
    { obj := fun M => CoalgebraCat.of R M
      map := fun f => CoalgebraCat.ofHom f }

instance hasForgetToAlgebra : HasForget‚ÇÇ (HopfAlgebraCat R) (AlgebraCat R) where
  forget‚ÇÇ :=
    { obj := fun M => AlgebraCat.of R M
      map := fun f => AlgebraCat.ofHom f }

instance hasForgetToModule : HasForget‚ÇÇ (HopfAlgebraCat R) (ModuleCat R) where
  forget‚ÇÇ :=
    { obj := fun M => ModuleCat.of R M
      map := fun f => ModuleCat.ofHom f }

instance hasForgetToRing : HasForget‚ÇÇ (HopfAlgebraCat R) RingCat where
  forget‚ÇÇ :=
    { obj := fun M => RingCat.of M
      map := fun f => RingCat.ofHom f }

/-- The object in the category of Hopf R-algebras associated to an Hopf R-algebra. -/
def of (X : Type v) [Ring X] [HopfAlgebra R X] : HopfAlgebraCat R :=
  ‚ü®X‚ü©

@[simp]
theorem forget‚ÇÇ_bialgebraCat_obj (X : HopfAlgebraCat R) :
    (forget‚ÇÇ (HopfAlgebraCat R) (BialgebraCat R)).obj X = BialgebraCat.of R X :=
  rfl

@[simp]
theorem forget‚ÇÇ_algebraCat_obj (X : HopfAlgebraCat R) :
    (forget‚ÇÇ (HopfAlgebraCat R) (AlgebraCat R)).obj X = AlgebraCat.of R X :=
  rfl

@[simp]
theorem forget‚ÇÇ_coalgebraCat_obj (X : HopfAlgebraCat R) :
    (forget‚ÇÇ (HopfAlgebraCat R) (CoalgebraCat R)).obj X = CoalgebraCat.of R X :=
  rfl

@[simp]
theorem bialgebraCat_of_of (X : Type v) [Ring X]
    [HopfAlgebra R X] :
    BialgebraCat.of R (of R X) = BialgebraCat.of R X :=
  rfl

@[simp]
theorem algebraCat_of_of (X : Type v) [Ring X]
    [HopfAlgebra R X] :
    AlgebraCat.of R (of R X) = AlgebraCat.of R X :=
  rfl

@[simp]
theorem CoalgebraCat_of_of (X : Type v) [Ring X]
    [HopfAlgebra R X] :
    CoalgebraCat.of R (of R X) = CoalgebraCat.of R X :=
  rfl

@[simp]
theorem forget‚ÇÇ_bialgebraCat_map (X Y : HopfAlgebraCat R) (f : X ‚ü∂ Y) :
    (forget‚ÇÇ (HopfAlgebraCat R) (BialgebraCat R)).map f = f :=
  rfl

@[simp]
theorem forget‚ÇÇ_algebraCat_map (X Y : HopfAlgebraCat R) (f : X ‚ü∂ Y) :
    (forget‚ÇÇ (HopfAlgebraCat R) (AlgebraCat R)).map f = (f : X ‚Üí‚Çê[R] Y) :=
  rfl

@[simp]
theorem forget‚ÇÇ_coalgebraCat_map (X Y : HopfAlgebraCat R) (f : X ‚ü∂ Y) :
    (forget‚ÇÇ (HopfAlgebraCat R) (CoalgebraCat R)).map f = (f : X ‚Üí‚Çóc[R] Y) :=
  rfl

/-- Typecheck a `BialgHom` as a morphism in `HopfAlgebraCat R`. -/
def ofHom {R : Type u} [CommRing R] {X Y : Type v} [Ring X] [HopfAlgebra R X]
    [Ring Y] [HopfAlgebra R Y] (f : X ‚Üí‚Çêc[R] Y) : of R X ‚ü∂ of R Y :=
  f

@[simp 1100]
theorem ofHom_apply {R : Type u} [CommRing R] {X Y : Type v} [Ring X] [HopfAlgebra R X]
    [Ring Y] [HopfAlgebra R Y] (f : X ‚Üí‚Çêc[R] Y) (x : X) : ofHom f x = f x :=
  rfl

instance ofUnique {X : Type v} [Ring X] [HopfAlgebra R X] [i : Unique X] : Unique (of R X) :=
  i

variable {R}

/-- Forgetting to the underlying type and then building the bundled object returns the original
Hopf algebra. -/
@[simps]
def ofSelfIso (M : HopfAlgebraCat R) : HopfAlgebraCat.of R M ‚âÖ M where
  hom := ùüô M
  inv := ùüô M

variable {M N U : HopfAlgebraCat.{v} R}

@[simp]
theorem id_apply (m : M) : (ùüô M : M ‚Üí M) m = m :=
  rfl

@[simp]
theorem coe_comp (f : M ‚ü∂ N) (g : N ‚ü∂ U) : (f ‚â´ g : M ‚Üí U) = g ‚àò f :=
  rfl

theorem comp_def (f : M ‚ü∂ N) (g : N ‚ü∂ U) : f ‚â´ g = g.comp f :=
  rfl

@[simp] lemma forget_map (f : M ‚ü∂ N) : (forget (HopfAlgebraCat R)).map f = (f : M ‚Üí N) := rfl

end HopfAlgebraCat

variable {R}

variable {X‚ÇÅ X‚ÇÇ : Type v}

section

/-- Build an isomorphism in the category `HopfAlgebraCat R` from a `BialgEquiv`
between Hopf algebras. -/
@[simps]
def BialgEquiv.toHopfAlgebraIso {g‚ÇÅ : Ring X‚ÇÅ} {g‚ÇÇ : Ring X‚ÇÇ}
    {c‚ÇÅ : HopfAlgebra R X‚ÇÅ} {c‚ÇÇ : HopfAlgebra R X‚ÇÇ} (e : X‚ÇÅ ‚âÉ‚Çêc[R] X‚ÇÇ) :
    HopfAlgebraCat.of R X‚ÇÅ ‚âÖ HopfAlgebraCat.of R X‚ÇÇ where
  hom := (e : X‚ÇÅ ‚Üí‚Çêc[R] X‚ÇÇ)
  inv := (e.symm : X‚ÇÇ ‚Üí‚Çêc[R] X‚ÇÅ)
  hom_inv_id := by ext; apply e.left_inv
  inv_hom_id := by ext; apply e.right_inv

/-- Build an isomorphism in the category `HopfAlgebraCat R` from a `BialgEquiv`
between Hopf algebras. -/
abbrev BialgEquiv.toHopfAlgebraIso' {M N : HopfAlgebraCat.{v} R} (i : M ‚âÉ‚Çêc[R] N) : M ‚âÖ N :=
  i.toHopfAlgebraIso

/-- Build an isomorphism in the category `HopfAlgebraCat R` from a `BialgEquiv`
between Hopf algebras. -/
abbrev BialgEquiv.toHopfAlgebraIso'Left
    {X‚ÇÅ : HopfAlgebraCat.{v} R} [Ring X‚ÇÇ] [HopfAlgebra R X‚ÇÇ]
    (e : X‚ÇÅ ‚âÉ‚Çêc[R] X‚ÇÇ) : X‚ÇÅ ‚âÖ HopfAlgebraCat.of R X‚ÇÇ :=
  e.toHopfAlgebraIso

/-- Build an isomorphism in the category `HopfAlgebraCat R` from a `BialgEquiv`
between Hopf algebras. -/
abbrev BialgEquiv.toHopfAlgebraIso'Right
    [Ring X‚ÇÅ] [HopfAlgebra R X‚ÇÅ] {X‚ÇÇ : HopfAlgebraCat.{v} R}
    (e : X‚ÇÅ ‚âÉ‚Çêc[R] X‚ÇÇ) : HopfAlgebraCat.of R X‚ÇÅ ‚âÖ X‚ÇÇ :=
  e.toHopfAlgebraIso

namespace CategoryTheory.Iso

/-- Build a `BialgEquiv` from an isomorphism in the category `HopfAlgebraCat R`. -/
def toBialgEquiv' {X Y : HopfAlgebraCat R} (i : X ‚âÖ Y) : X ‚âÉ‚Çêc[R] Y :=
  { i.hom with
    invFun := i.inv
    left_inv := fun x => BialgHom.congr_fun i.3 x
    right_inv := fun x => BialgHom.congr_fun i.4 x }

@[simp]
theorem toBialgEquiv'_apply {X Y : HopfAlgebraCat R} (i : X ‚âÖ Y) (x : X) :
    i.toBialgEquiv' x = i.hom x :=
  rfl

@[simp]
theorem toBialgEquiv'_toBialgHom {X Y : HopfAlgebraCat R} (i : X ‚âÖ Y) :
    (i.toBialgEquiv' : X ‚Üí‚Çêc[R] Y) = i.hom :=
  rfl

@[simp]
theorem toBialgEquiv'_symm_toBialgHom {X Y : HopfAlgebraCat R} (i : X ‚âÖ Y) :
    (i.toBialgEquiv'.symm : Y ‚Üí‚Çêc[R] X) = i.inv :=
  rfl

end CategoryTheory.Iso

/-- Bialgebra equivalences of Hopf algebras are the same as (isomorphic to) isomorphisms
in `HopfAlgebraCat R` -/
@[simps]
def bialgEquivIsoHopfAlgebraIso {X Y : Type u} [Ring X] [Ring Y]
    [HopfAlgebra R X] [HopfAlgebra R Y] :
    (X ‚âÉ‚Çêc[R] Y) ‚âÖ HopfAlgebraCat.of R X ‚âÖ HopfAlgebraCat.of R Y where
  hom e := e.toHopfAlgebraIso
  inv i := i.toBialgEquiv'

end
