/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.SpecialFunctions.Complex.Circle
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.NumberTheory.LegendreSymbol.GaussSum

/-!
# Fourier theory on `ZMod N`

This file just records a few minimalistic definitions about discrete Fourier transforms for
functions on `ZMod N`.
-/


open scoped Real

namespace ZMod

/-- The `AddMonoidHom` from `ZMod N` to `‚Ñù / ‚Ñ§` sending `j mod N` to `j / N mod 1`. -/
noncomputable def toAddCircle {N : ‚Ñï+} : ZMod N ‚Üí+ UnitAddCircle :=
  lift N ‚ü®AddMonoidHom.mk' (fun j ‚Ü¶ ‚Üë(j / N : ‚Ñù)) (by simp [add_div]), by simp‚ü©

lemma toAddCircle_coe {N : ‚Ñï+} (j : ‚Ñ§) :
    toAddCircle (j : ZMod N) = ‚Üë(j / N : ‚Ñù) := by
  simp [toAddCircle]

lemma toAddCircle_apply {N : ‚Ñï+} (j : ZMod N) :
    toAddCircle j = ‚Üë(j.val / N : ‚Ñù) := by
  conv_lhs => rw [show j = (val j : ‚Ñ§) by simp, toAddCircle_coe]
  rfl

lemma toAddCircle_injective (N : ‚Ñï+) : Function.Injective <| toAddCircle (N := N) := by
  intro x y hxy
  have : (0 : ‚Ñù) < N := Nat.cast_pos.mpr N.pos
  rw [toAddCircle_apply, toAddCircle_apply, AddCircle.coe_eq_coe_iff_of_mem_Ico
      (hp := Real.fact_zero_lt_one) (a := 0), div_left_inj' this.ne', Nat.cast_inj] at hxy
  ¬∑ exact val_injective N hxy
  all_goals
  ¬∑ refine ‚ü®by positivity, ?_‚ü©
    rw [zero_add, div_lt_one this, Nat.cast_lt]
    exact val_lt _

/-- The additive character from `ZMod N` to the unit circle in `‚ÑÇ`, sending `j mod N` to
`exp (2 * œÄ * I * j / N)`. -/
noncomputable def toCircle {N : ‚Ñï+} : AddChar (ZMod N) circle where
  toFun := fun j ‚Ü¶ (toAddCircle j).toCircle
  map_add_mul' a b := by simp_rw [map_add, AddCircle.toCircle_add]
  map_zero_one' := by simp_rw [map_zero, AddCircle.toCircle, ‚Üê QuotientAddGroup.mk_zero,
    Function.Periodic.lift_coe, mul_zero, expMapCircle_zero]

lemma toCircle_coe {N : ‚Ñï+} (j : ‚Ñ§) :
    toCircle (j : ZMod N) = Complex.exp (2 * œÄ * Complex.I * j / N) := by
  rw [toCircle, AddChar.coe_mk, AddCircle.toCircle, toAddCircle_coe,
    Function.Periodic.lift_coe, expMapCircle_apply]
  push_cast
  ring_nf

lemma toCircle_apply {N : ‚Ñï+} (j : ZMod N) :
    toCircle j = Complex.exp (2 * œÄ * Complex.I * j.val / N) := by
  rw [‚Üê Int.cast_natCast, ‚Üê toCircle_coe, natCast_val, intCast_zmod_cast]

/-- The additive character from `ZMod N` to the underlying multiplicative monoid of `‚ÑÇ`, sending
`j mod N` to `exp (2 * œÄ * I * j / N)`. -/
noncomputable def stdAddChar {N : ‚Ñï+} : AddChar (ZMod N) ‚ÑÇ :=
  (Submonoid.subtype circle).compAddChar toCircle

lemma stdAddChar_coe {N : ‚Ñï+} (j : ‚Ñ§) :
    stdAddChar (j : ZMod N) = Complex.exp (2 * œÄ * Complex.I * j / N) := by
  simp only [stdAddChar, MonoidHom.coe_compAddChar, Function.comp_apply,
    Submonoid.coe_subtype, toCircle_coe]

lemma stdAddChar_apply {N : ‚Ñï+} (j : ZMod N) :
    stdAddChar j = ‚Üë(toCircle j) :=
  rfl

section fourier

open BigOperators MeasureTheory


/-- Auxiliary lemma to translate integrability statements into summability -/
lemma integrable_count_iff {ùìö G : Type*} [NormedAddCommGroup G]
    [SecondCountableTopology G] {f : ùìö ‚Üí G} :
    Integrable f (@Measure.count _ ‚ä§) ‚Üî Summable (fun k ‚Ü¶ ‚Äñf k‚Äñ) := by
  letI : MeasurableSpace G := borel G
  haveI : BorelSpace G := ‚ü®rfl‚ü©
  letI : MeasurableSpace ùìö := ‚ä§
  simp_rw [Integrable, (by measurability : AEStronglyMeasurable f Measure.count),
    true_and, HasFiniteIntegral, lintegral_count, lt_top_iff_ne_top,
    ENNReal.tsum_coe_ne_top_iff_summable, ‚Üê NNReal.summable_coe, coe_nnnorm]

lemma Finite.summable {Œ± M : Type*} [Finite Œ±] [AddCommMonoid M] [TopologicalSpace M]
    (f : Œ± ‚Üí M) : Summable f :=
  summable_of_finite_support <| Set.finite_univ.subset (Set.subset_univ _)

/-- The discrete measurable space structure (every set is measurable). -/
local instance instMeasurableSpaceZMod (N : ‚Ñï+) : MeasurableSpace (ZMod N) := ‚ä§

/-- The discrete Fourier transform on `‚Ñ§ / N‚Ñ§`. -/
noncomputable def discreteFourierTransform {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (k : ZMod N) : ‚ÑÇ :=
  Fourier.fourierIntegral toCircle Measure.count Œ¶ k

@[inherit_doc]
scoped notation "ùìï" => discreteFourierTransform

lemma discreteFourierTransform_def {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (k : ZMod N) :
    ùìï Œ¶ k = ‚àë j : ZMod N, toCircle (-(j * k)) ‚Ä¢ Œ¶ j := by
  simp only [discreteFourierTransform, Fourier.fourierIntegral_def,
    integral_countable' (integrable_count_iff.mpr <| Finite.summable _), Measure.count_singleton,
    ENNReal.one_toReal, one_smul, tsum_fintype]

section GaussSum

variable {N : ‚Ñï+} (œá : MulChar (ZMod N) ‚ÑÇ)

lemma fourierTransform_eq_gaussSum_mulShift (k : ZMod N) :
    (ùìï œá) k = gaussSum œá (stdAddChar.mulShift (-k)) := by
  simp_rw [gaussSum, discreteFourierTransform_def, Submonoid.smul_def, smul_eq_mul,
    mul_comm (œá _)]
  refine congr_arg Finset.univ.sum (funext fun j ‚Ü¶ ?_)
  simp_rw [AddChar.mulShift_apply, stdAddChar_apply, mul_comm j, neg_mul]

end GaussSum


end fourier

end ZMod
