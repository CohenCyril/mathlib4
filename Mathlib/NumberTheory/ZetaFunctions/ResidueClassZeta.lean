/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/

import Mathlib.NumberTheory.ZetaFunctions.RiemannZeta
import Mathlib.NumberTheory.LSeries.Basic
import Mathlib.NumberTheory.ZetaFunctions.ZModFourier
import Mathlib.Analysis.NormedSpace.Connected

/-!
# L-series attached to periodic functions

We show that if `Œ¶` is a function `ZMod N ‚Üí ‚ÑÇ`, for a positive integer `N`, then `LSeries Œ¶` has
analytic continuation.

## Main definitions and results:

- Results about the un-completed L-series:

    * `congruenceLFunction`: the analytic continuation of the function `‚àë n : ‚Ñï, Œ¶ n / n ^ s`,
      where `Œ¶` is a function `ZMod N ‚Üí ‚ÑÇ` for some `N : ‚Ñï+`.
    * `congruenceLFunction_eq_LSeries`: the `congruenceLFunction` agrees with its Dirichlet series
      in the convergence range.
    * `differentiableAt_congruenceLFunction`: the function `congruenceLFunction Œ¶` is differentiable
      away from `s = 1`.
    * `differentiable_congruenceLFunction_of_sum_zero`: if `‚àë j : ZMod N, Œ¶ j = 0` then the
      L-function of `Œ¶` is entire.
    * `congruenceLFunction_one_sub`: the functional equation relating
      `L (1 - s, Œ¶)` and `L (s, ùìï Œ¶)` where `ùìï Œ¶` is the discrete Fourier transform of `Œ¶`.

- Completed L-series (even part)

    * `completedCongruenceLFunctionEven`
    * `differentiableAt_completedCongruenceLFunctionEven`

- Completed L-series (odd part)

    * `completedCongruenceLFunctionOdd`
    * `differentiable_completedCongruenceLFunctionOdd`
-/

open BigOperators Filter Topology Asymptotics
open scoped Nat Real
open Complex ZMod Finset

section LemmasToBeRehomed

/-- If `0 < re s`, then the `if .. then .. else` construction in `LSeries.term` isn't needed, since
`0 ^ s = 0` in this range. -/
lemma LSeries.term_of_re_pos (n : ‚Ñï) (f : ‚Ñï ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : 0 < re s) :
    LSeries.term f s n = f n / n ^ s := by
  rcases eq_or_ne n 0 with rfl | hn
  ¬∑ rw [term_zero, Nat.cast_zero, Complex.zero_cpow (lt_irrefl 0 <| zero_re ‚ñ∏ ¬∑ ‚ñ∏ hs), div_zero]
  ¬∑ rw [term_of_ne_zero hn]

/-- Equivalence between `‚Ñï` and `ZMod N √ó ‚Ñï`, sending `n` to `(n mod N, n / N)`. -/
def Nat.residueClassesEquiv (N : ‚Ñï+) : ‚Ñï ‚âÉ ZMod N √ó ‚Ñï where
  toFun n := (‚Üën, n / N)
  invFun p := p.1.val + N * p.2
  left_inv n := by simpa only [val_nat_cast] using Nat.mod_add_div n N
  right_inv p := by
    ext1
    ¬∑ simp only [add_comm p.1.val, Nat.cast_add, Nat.cast_mul, CharP.cast_eq_zero, zero_mul,
        nat_cast_val, cast_id', id_eq, zero_add]
    ¬∑ simp only [add_comm p.1.val, Nat.mul_add_div N.pos, (Nat.div_eq_zero_iff N.pos).2 p.1.val_lt,
        add_zero]

/-- If `f` is a summable function on `‚Ñï`, and `0 < N`, then we may compute `‚àë' n : ‚Ñï, f n` by
summing each residue class mod `N` separately. -/
lemma Nat.sumByResidueClasses {f : ‚Ñï ‚Üí ‚ÑÇ} (hf : Summable f) (N : ‚Ñï+) :
    ‚àë' n, f n = ‚àë j : ZMod N, ‚àë' m, f (j.val + N * m) := by
  rw [‚Üê (residueClassesEquiv N).symm.tsum_eq f, tsum_prod, tsum_fintype, residueClassesEquiv,
    Equiv.coe_fn_symm_mk]
  exact hf.comp_injective (residueClassesEquiv N).symm.injective

-- /-- Equivalence between `‚Ñï` and `ZMod N √ó ‚Ñï`, sending `n` to `(n mod N, n / N)`. -/
-- def Int.residueClassesEquiv (N : ‚Ñï+) : ‚Ñ§ ‚âÉ ZMod N √ó ‚Ñ§ where
--   toFun n := (‚Üën, n / N)
--   invFun p := p.1.val + N * p.2
--   left_inv n := by
--     simp only [ZMod.val_int_cast]
--     exact Int.emod_add_ediv n N
--   right_inv p := by
--     ext1
--     ¬∑ simp only [nat_cast_val, cast_add, int_cast_cast, cast_id', id_eq, cast_mul, cast_ofNat,
--         CharP.cast_eq_zero, zero_mul, add_zero]
--     ¬∑ simp_rw [add_mul_ediv_left _ _ (Nat.cast_ne_zero.mpr N.ne_zero), add_left_eq_self]
--       exact Int.ediv_eq_zero_of_lt (Nat.cast_nonneg _) <| Nat.cast_lt.mpr (ZMod.val_lt _)

-- /-- If `f` is a summable function on `‚Ñ§`, and `0 < N`, then we may compute `‚àë' n : ‚Ñ§, f n` by
-- summing each residue class mod `N` separately. -/
-- lemma Int.sumByResidueClasses {f : ‚Ñ§ ‚Üí ‚ÑÇ} (hf : Summable f) (N : ‚Ñï+) :
--     ‚àë' n, f n = ‚àë j : ZMod N, ‚àë' m, f (j.val + N * m) := by
--   rw [‚Üê (residueClassesEquiv N).symm.tsum_eq f, tsum_prod, tsum_fintype, residueClassesEquiv,
--     Equiv.coe_fn_symm_mk]
--   exact hf.comp_injective (residueClassesEquiv N).symm.injective

/-- The complement of a point is preconnected in `‚ÑÇ`.-/
lemma isPreconnected_compl_singleton (a : ‚ÑÇ) : IsPreconnected ({a}·∂ú : Set ‚ÑÇ) := by
  simp only [rank_real_complex, gt_iff_lt, Nat.one_lt_ofNat,
    isConnected_compl_singleton_of_one_lt_rank, IsConnected.isPreconnected]

end LemmasToBeRehomed

/-- If `Œ¶` is a periodic function, then the L-series of `f` converges for `1 < re s`. -/
lemma LSeriesSummable_coe_ZMod {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : 1 < re s) :
    LSeriesSummable (Œ¶ ¬∑) s := by
  let c := max' _ <| univ_nonempty.image (Complex.abs ‚àò Œ¶)
  refine LSeriesSummable_of_bounded_of_one_lt_re (fun n _ ‚Ü¶ le_max' _ _ ?_) (m := c) hs
  exact mem_image_of_mem _ (mem_univ _)

/-!
## The L-function attached to a periodic function
-/

/-- The analytic continuation of `‚àë' n : ‚Ñï, Œ¶ n / n ^ s` where `Œ¶` is periodic. -/
noncomputable def congruenceLFunction {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) : ‚ÑÇ :=
  N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * hurwitzZeta (ZMod.toAddCircle j) s

lemma congruenceLFunction_add {N : ‚Ñï+} (Œ¶ Œ® : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) :
    congruenceLFunction (fun j ‚Ü¶ Œ¶ j + Œ® j) s =
    congruenceLFunction Œ¶ s + congruenceLFunction Œ® s := by
  simp only [congruenceLFunction, add_mul, sum_add_distrib, mul_add]

lemma congruenceLFunction_mul {N : ‚Ñï+} (a : ‚ÑÇ) (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) :
    congruenceLFunction (fun j ‚Ü¶ a * Œ¶ j) s = a * congruenceLFunction Œ¶ s := by
  simp_rw [congruenceLFunction, mul_sum]
  congr 1 with j
  ring

lemma congruenceLFunction_sum {N : ‚Ñï+} {Œπ : Type*} [Fintype Œπ]
    (Œ¶ : Œπ ‚Üí ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) :
    congruenceLFunction (fun j ‚Ü¶ ‚àë i, Œ¶ i j) s = ‚àë i, congruenceLFunction (Œ¶ i) s := by
  simp only [congruenceLFunction, mul_sum, sum_mul, sum_comm (Œ± := ZMod N)]

/-- For `1 < re s` the congruence L-function agrees with the sum of the Dirichlet series. -/
lemma congruenceLFunction_eq_LSeries {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : 1 < re s) :
    congruenceLFunction Œ¶ s = LSeries (Œ¶ ¬∑) s := by
  rw [congruenceLFunction, LSeries, mul_sum,
    Nat.sumByResidueClasses (LSeriesSummable_coe_ZMod _ hs) N]
  refine sum_congr (by rfl) (fun j _ ‚Ü¶ ?_) -- choose some `j ‚àà ZMod N`
  have ha : (j.val / N : ‚Ñù) ‚àà Set.Icc 0 1 := ‚ü®by positivity, by
    rw [div_le_one (Nat.cast_pos.mpr N.pos), Nat.cast_le]
    exact (ZMod.val_lt _).le‚ü©
  rw [toAddCircle_apply, ‚Üê (hasSum_nat_hurwitzZeta_of_mem_Icc ha hs).tsum_eq, ‚Üê mul_assoc,
    ‚Üê tsum_mul_left]
  congr 1 with m
  have aux0 : (m : ‚ÑÇ) + ‚Üë(j.val / N : ‚Ñù) = ‚Üë((j.val + N * m) / N : ‚Ñù) := by
    push_cast
    field_simp
    ring
  have aux1 : (0 : ‚Ñù) ‚â§ j.val + N * m := by positivity
  have aux2 : (0 : ‚Ñù) ‚â§ (‚ÜëN)‚Åª¬π := by positivity
  have aux3 : arg (N : ‚ÑÇ) ‚â† œÄ := by simpa only [natCast_arg] using Real.pi_pos.ne
  have aux4 : ((N : ‚ÑÇ) ^ s)‚Åª¬π ‚â† 0 := by simp
  rw [aux0, div_eq_mul_inv _ (N : ‚Ñù), ofReal_mul, mul_cpow_ofReal_nonneg aux1 aux2, ‚Üê div_div,
    ofReal_inv, ofReal_nat_cast, cpow_neg, inv_cpow _ _ aux3, ‚Üê mul_div_assoc, mul_assoc,
    mul_div_cancel_left‚ÇÄ _ aux4, mul_one_div, ‚Üê Nat.cast_mul, ‚Üê Nat.cast_add, ofReal_nat_cast,
    LSeries.term_of_re_pos _ _ (one_pos.trans hs), Nat.cast_add (R := ZMod _), Nat.cast_mul,
    CharP.cast_eq_zero (R := ZMod N) (p := N), zero_mul, add_zero]
  simp only [Nat.cast_add, nat_cast_val, Nat.cast_mul, cast_id', id_eq]

/-- The `L`-function of `Œ¶` is differentiable away from `s = 1`. -/
lemma differentiableAt_congruenceLFunction {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ} (hs : s ‚â† 1) :
    DifferentiableAt ‚ÑÇ (congruenceLFunction Œ¶) s := by
  refine (differentiable_neg.differentiableAt.const_cpow (by simp)).mul ?_
  exact DifferentiableAt.sum fun _ _ ‚Ü¶ (differentiableAt_hurwitzZeta _ hs).const_mul _

/-- If `‚àë Œ¶ = 0`, then the `L`-function of `Œ¶` is entire. -/
lemma differentiable_congruenceLFunction_of_sum_zero {N : ‚Ñï+} {Œ¶ : ZMod N ‚Üí ‚ÑÇ}
    (hŒ¶ : univ.sum Œ¶ = 0) : Differentiable ‚ÑÇ (congruenceLFunction Œ¶) := by
  -- strip off `N ^ (-s)` factor
  refine (differentiable_neg.const_cpow (by simp)).mul ?_
  -- rewrite as a sum of *differences* of Hurwitz zeta values
  have (s) : ‚àë j : ZMod N, Œ¶ j * hurwitzZeta (ZMod.toAddCircle j) s =
      ‚àë j : ZMod N, Œ¶ j * (hurwitzZeta (ZMod.toAddCircle j) s - hurwitzZeta 0 s) := by
    simp_rw [mul_sub, sum_sub_distrib, ‚Üê sum_mul, hŒ¶, zero_mul, sub_zero]
  -- now apply `differentiable_hurwitzZeta_sub_hurwitzZeta`
  rw [funext this]
  exact Differentiable.sum fun i _ ‚Ü¶ (differentiable_hurwitzZeta_sub_hurwitzZeta _ 0).const_mul _

lemma expZeta_eq_congruenceLFunction {N : ‚Ñï+} (j : ZMod N) (s : ‚ÑÇ) (hs : s ‚â† 1) :
    congruenceLFunction (fun k ‚Ü¶ ZMod.toCircle (j * k)) s = expZeta (ZMod.toAddCircle j) s := by
  -- first reduce to equality in convergence range
  let U := {z : ‚ÑÇ | z ‚â† 1}
  let V := {z : ‚ÑÇ | 1 < re z}
  have hUo : IsOpen U := isOpen_compl_singleton
  let f := congruenceLFunction (fun k ‚Ü¶ ZMod.toCircle (j * k))
  let g := expZeta (ZMod.toAddCircle j)
  suffices Set.EqOn f g U from this hs
  have hf : AnalyticOn ‚ÑÇ f U := by
    refine DifferentiableOn.analyticOn ?_ hUo
    exact fun u hu ‚Ü¶ (differentiableAt_congruenceLFunction _ hu).differentiableWithinAt
  have hg : AnalyticOn ‚ÑÇ g U := by
    refine DifferentiableOn.analyticOn ?_ hUo
    exact fun u hu ‚Ü¶ (differentiableAt_expZeta _ _ (Or.inl hu)).differentiableWithinAt
  have hUc : IsPreconnected U := isPreconnected_compl_singleton 1
  have hUmem : 2 ‚àà U := by simp [U]
  have hV : V ‚àà ùìù 2 := (continuous_re.isOpen_preimage _ isOpen_Ioi).mem_nhds (by simp)
  refine AnalyticOn.eqOn_of_preconnected_of_eventuallyEq hf hg hUc hUmem ?_
  filter_upwards [hV] with z hz
  -- now prove equality for `1 < re z`
  dsimp only [f, g]
  rw [toAddCircle_apply, ‚Üê (hasSum_expZeta_of_one_lt_re (j.val / N) hz).tsum_eq,
    congruenceLFunction_eq_LSeries _ hz, LSeries]
  congr 1 with n
  rw [LSeries.term_of_re_pos _ _ (zero_lt_one.trans hz), ofReal_div, ofReal_nat_cast,
    ofReal_nat_cast, mul_assoc, div_mul_eq_mul_div]
  have := ZMod.toCircle_coe (N := N) (j.val * n)
  conv_rhs at this => rw [Int.cast_mul, Int.cast_natCast, Int.cast_natCast, mul_div_assoc]
  rw [‚Üê this, Int.cast_mul, Int.cast_natCast, Int.cast_natCast, nat_cast_zmod_val]

lemma congruenceLFunction_fourier {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) (hs : s ‚â† 1) :
    congruenceLFunction (ùìï Œ¶) s =
    ‚àë j : ZMod N, Œ¶ j * expZeta (ZMod.toAddCircle (-j)) s := by
  simp_rw [‚Üê expZeta_eq_congruenceLFunction _ _ hs, ‚Üê congruenceLFunction_mul,
    ‚Üê congruenceLFunction_sum]
  congr 1 with j
  simp_rw [discreteFourierTransform_def, mul_comm (Œ¶ _), Submonoid.smul_def, smul_eq_mul, neg_mul]

lemma congruenceLFunction_one_sub {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) {s : ‚ÑÇ}
    (hs : ‚àÄ (n : ‚Ñï), s ‚â† -‚Üën) (hs' : s ‚â† 1) :
    congruenceLFunction Œ¶ (1 - s) = N ^ (s - 1) * (2 * œÄ) ^ (-s) * Gamma s *
      (cexp (œÄ * I * s / 2) * congruenceLFunction (ùìï Œ¶) s
       + cexp (-œÄ * I * s / 2) * congruenceLFunction (ùìï fun x ‚Ü¶ Œ¶ (-x)) s) := by
  rw [congruenceLFunction]
  simp_rw [hurwitzZeta_one_sub _ hs (Or.inr hs'), mul_assoc _ _ (Gamma s)]
  -- get rid of Gamma terms and power of N
  generalize (2 * œÄ) ^ (-s) * Gamma s = C
  simp_rw [‚Üê mul_assoc, mul_comm _ C, mul_assoc, ‚Üê mul_sum, ‚Üê mul_assoc, mul_comm _ C, mul_assoc,
    neg_sub]
  congr 2
  -- now gather sum terms
  rw [congruenceLFunction_fourier _ _ hs', congruenceLFunction_fourier _ _ hs']
  conv_rhs => enter [2, 2]; rw [‚Üê (Equiv.neg _).sum_comp _ _ (by simp), Equiv.neg_apply]
  simp_rw [neg_neg, mul_sum, ‚Üê sum_add_distrib, ‚Üê mul_assoc, mul_comm _ (Œ¶ _), mul_assoc,
    ‚Üê mul_add, map_neg, add_comm]

section parity

/-!
## Completed L-series

Note that the definition of the completed L-series is different for the "even" and "odd" parts.
-/

/-- The even part of the completed congruence zeta function. This is 0 if `Œ¶` is odd. -/
noncomputable def completedCongruenceLFunctionEven {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) : ‚ÑÇ :=
  N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * completedHurwitzZetaEven (ZMod.toAddCircle j) s

lemma completedCongruenceLFunctionEven_comp_neg {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) :
    completedCongruenceLFunctionEven (fun j ‚Ü¶ Œ¶ (-j)) s =
    completedCongruenceLFunctionEven Œ¶ s := by
  unfold completedCongruenceLFunctionEven
  rw [‚Üê (Equiv.neg _).sum_comp _ _ (by simp)]
  congr 2 with j
  simp [completedHurwitzZetaEven_neg]

/-- If `Œ¶` is odd, then `completedCongruenceLFunctionEven Œ¶` is identically 0. -/
lemma completedCongruenceLFunctionEven_eq_zero {N : ‚Ñï+} {Œ¶ : ZMod N ‚Üí ‚ÑÇ}
    (hŒ¶ : ‚àÄ j : ZMod N, Œ¶ (-j) = -Œ¶ j) (s : ‚ÑÇ) :
    completedCongruenceLFunctionEven Œ¶ s = 0 := by
  rw [‚Üê eq_neg_self_iff]
  conv_lhs => rw [‚Üê completedCongruenceLFunctionEven_comp_neg]
  simp_rw [hŒ¶, completedCongruenceLFunctionEven, neg_mul, sum_neg_distrib, mul_neg]

/-- The even completed congruence zeta function is analytic except for poles at `s = 0` if
`Œ¶ 0 ‚â† 0`, and at `s = 1` if `‚àë j, Œ¶ j ‚â† 0`. (This result is optimal.) -/
lemma differentiableAt_completedCongruenceLFunctionEven {N : ‚Ñï+} {Œ¶ : ZMod N ‚Üí ‚ÑÇ} {s : ‚ÑÇ}
    (hs‚ÇÄ : s ‚â† 0 ‚à® Œ¶ 0 = 0) (hs‚ÇÅ : s ‚â† 1 ‚à® ‚àë j, Œ¶ j = 0) :
    DifferentiableAt ‚ÑÇ (completedCongruenceLFunctionEven Œ¶) s := by
  refine (differentiable_neg.const_cpow (by simp)).differentiableAt.mul ?_
  rcases eq_or_ne s 1 with rfl | hs
  ¬∑ -- s = 1 : need to rearrange sum
    have (s) : ‚àë j : ZMod ‚ÜëN, Œ¶ j * completedHurwitzZetaEven (ZMod.toAddCircle j) s =
        ‚àë j : ZMod ‚ÜëN, Œ¶ j * (completedHurwitzZetaEven (ZMod.toAddCircle j) s
        - completedHurwitzZetaEven 0 s) := by
      simp_rw [mul_sub, sum_sub_distrib, ‚Üê sum_mul, (by tauto : ‚àë j : ZMod ‚ÜëN, Œ¶ j = 0),
        zero_mul, sub_zero]
    rw [funext this]
    refine .sum fun j _ ‚Ü¶ (differentiableAt_const _).mul ?_
    apply differentiableAt_one_completedHurwitzZetaEven_sub_completedHurwitzZetaEven
  ¬∑ -- s ‚â† 1 : show each summand is differentiable
    refine .sum fun j _ ‚Ü¶ ?_
    rcases eq_or_ne s 0 with rfl | hs'
    ¬∑ -- s = 0 case : need to handle j = 0 separately
      rcases eq_or_ne j 0 with rfl | hj
      ¬∑ simpa only [show Œ¶ 0 = 0 by tauto, zero_mul] using differentiableAt_const _
      ¬∑ apply (differentiableAt_const _).mul
        refine differentiableAt_completedHurwitzZetaEven _ (Or.inr fun h ‚Ü¶ ?_) zero_ne_one
        exact ((map_zero (ZMod.toAddCircle (N := N))) ‚ñ∏ (ZMod.toAddCircle_injective N).ne hj) h
    ¬∑ exact (differentiableAt_completedHurwitzZetaEven _ (Or.inl hs') hs).const_mul _

/-- The odd part of the completed congruence zeta function. This is 0 if `Œ¶` is even. -/
noncomputable def completedCongruenceLFunctionOdd {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) : ‚ÑÇ :=
  N ^ (-s) * ‚àë j : ZMod N, Œ¶ j * completedHurwitzZetaOdd (ZMod.toAddCircle j) s

lemma completedCongruenceLFunctionOdd_comp_neg {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) :
    completedCongruenceLFunctionOdd (fun j ‚Ü¶ Œ¶ (-j)) s =
    -completedCongruenceLFunctionOdd Œ¶ s := by
  unfold completedCongruenceLFunctionOdd
  congr 1
  rw [‚Üê (Equiv.neg (ZMod N)).sum_comp _ _ (by simp), ‚Üê mul_neg, ‚Üê sum_neg_distrib]
  congr 2 with j
  simp [completedHurwitzZetaOdd_neg]

lemma differentiable_completedCongruenceLFunctionOdd {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) :
    Differentiable ‚ÑÇ (completedCongruenceLFunctionOdd Œ¶) := by
  refine (differentiable_neg.const_cpow (by simp)).mul ?_
  exact Differentiable.sum fun j _ ‚Ü¶ (differentiable_completedHurwitzZetaOdd _).const_mul _

/-- If `Œ¶` is even, then `completedCongruenceLFunctionOdd Œ¶` is identically 0. -/
lemma completedCongruenceLFunctionOdd_eq_zero {N : ‚Ñï+} {Œ¶ : ZMod N ‚Üí ‚ÑÇ}
    (hŒ¶ : ‚àÄ j : ZMod N, Œ¶ (-j) = Œ¶ j) (s : ‚ÑÇ) :
    completedCongruenceLFunctionOdd Œ¶ s = 0 := by
  simp_rw [‚Üê eq_neg_self_iff, ‚Üê completedCongruenceLFunctionOdd_comp_neg, hŒ¶]

/-- The un-completed L-function can be recovered from the completed ones, up to a minor grain
of salt at `s = 0`. -/
lemma congruenceLFunction_eq_completed {N : ‚Ñï+} (Œ¶ : ZMod N ‚Üí ‚ÑÇ) (s : ‚ÑÇ) (hs : s ‚â† 0 ‚à® Œ¶ 0 = 0) :
    congruenceLFunction Œ¶ s = completedCongruenceLFunctionEven Œ¶ s / Gamma‚Ñù s +
    completedCongruenceLFunctionOdd Œ¶ s / Gamma‚Ñù (s + 1) := by
  rw [completedCongruenceLFunctionOdd, completedCongruenceLFunctionEven,
    mul_div_assoc, mul_div_assoc, ‚Üê mul_add, sum_div, sum_div,
    ‚Üê sum_add_distrib, congruenceLFunction]
  congr 2 with j
  by_cases h : j ‚â† 0 ‚à® s ‚â† 0
  ¬∑ rw [hurwitzZeta, hurwitzZetaOdd, mul_add, mul_div_assoc, mul_div_assoc,
      hurwitzZetaEven_def_of_ne_or_ne]
    rw [‚Üê map_zero (ZMod.toAddCircle (N := N))]
    refine h.imp (ZMod.toAddCircle_injective N).ne id
  ¬∑ simp_rw [(by tauto : j = 0), (by tauto : Œ¶ 0 = 0), zero_mul, zero_div, zero_add]

end parity
