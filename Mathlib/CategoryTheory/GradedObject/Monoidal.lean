/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Scott Morrison
-/
import Mathlib.CategoryTheory.GradedObject.Associator
import Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts
import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Mathlib.Tactic.Linarith
import Mathlib.Data.Fintype.Prod

universe u v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

namespace Limits

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D] (F : C ‚•§ D)

noncomputable instance (J : Type*) [hJ : Finite J] [PreservesFiniteCoproducts F] :
    PreservesColimitsOfShape (Discrete J) F := by
  apply Nonempty.some
  obtain ‚ü®n, ‚ü®e‚ü©‚ü© := Finite.exists_equiv_fin J
  have : PreservesColimitsOfShape (Discrete (Fin n)) F := PreservesFiniteCoproducts.preserves _
  exact ‚ü®preservesColimitsOfShapeOfEquiv (Discrete.equivalence e.symm) F‚ü©

end Limits

open Limits MonoidalCategory Category

variable {I : Type u} [AddMonoid I] {C : Type*} [Category C] [MonoidalCategory C]

namespace MonoidalCategory

variable (C)

@[simps!]
def curriedAssociatorNatIso :
    bifunctorComp‚ÇÅ‚ÇÇ (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) ‚âÖ
      bifunctorComp‚ÇÇ‚ÇÉ (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) :=
  NatIso.ofComponents
    (fun X‚ÇÅ => NatIso.ofComponents
      (fun X‚ÇÇ => NatIso.ofComponents
        (fun X‚ÇÉ => associator X‚ÇÅ X‚ÇÇ X‚ÇÉ)
          (fun {X‚ÇÉ Y‚ÇÉ} œÜ => by simpa using associator_naturality (ùüô X‚ÇÅ) (ùüô X‚ÇÇ) œÜ))
      (by aesop_cat)) (by aesop_cat)

end MonoidalCategory

namespace GradedObject

abbrev HasTensor (X‚ÇÅ X‚ÇÇ : GradedObject I C) : Prop :=
  HasMap (((mapBifunctor (curryObj (MonoidalCategory.tensor C)) I I).obj X‚ÇÅ).obj X‚ÇÇ)
    (fun ‚ü®i, j‚ü©  => i + j)

namespace Monoidal

abbrev TensorCofan (X‚ÇÅ X‚ÇÇ : GradedObject I C) (j : I) :=
  (((mapBifunctor (curryObj (MonoidalCategory.tensor C)) I I).obj X‚ÇÅ).obj X‚ÇÇ).CofanMapObjFun (fun ‚ü®i, j‚ü© => i + j) j

@[simps! pt]
def TensorCofan.mk (X‚ÇÅ X‚ÇÇ : GradedObject I C) (j : I) (pt : C)
    (Œπ : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ pt) : TensorCofan X‚ÇÅ X‚ÇÇ j :=
  CofanMapObjFun.mk _ _ _ pt (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© h => Œπ i‚ÇÅ i‚ÇÇ h)

@[simp]
lemma TensorCofan.mk_inj (X‚ÇÅ X‚ÇÇ : GradedObject I C) (j : I) (pt : C)
    (Œπ : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ pt) (i‚ÇÅ i‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = j) :
    (TensorCofan.mk X‚ÇÅ X‚ÇÇ j pt Œπ).inj ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, h‚ü© = Œπ i‚ÇÅ i‚ÇÇ h := rfl

lemma TensorCofan.hasTensor (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    (c : ‚àÄ i, TensorCofan X‚ÇÅ X‚ÇÇ i) (hc : ‚àÄ i, IsColimit (c i)) :
    HasTensor X‚ÇÅ X‚ÇÇ :=
  CofanMapObjFun.hasMap _ _ c hc

noncomputable abbrev tensorObj (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] :
    GradedObject I C :=
  mapBifunctorMapObj (curryObj (MonoidalCategory.tensor C)) (fun ‚ü®i, j‚ü© => i + j) X‚ÇÅ X‚ÇÇ


section

variable (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ]

noncomputable def ŒπTensorObj (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
  X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ tensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ‚ÇÇ :=
    ŒπMapBifunctorMapObj (curryObj (MonoidalCategory.tensor C)) _ _ _ _ _ _ h

variable {X‚ÇÅ X‚ÇÇ}

@[ext]
lemma tensorObj_ext {A : C} {j : I} (f g : tensorObj X‚ÇÅ X‚ÇÇ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j),
      ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ f = ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ g) : f = g := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© hi
  exact h i‚ÇÅ i‚ÇÇ hi

end

noncomputable def tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] :
    tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ :=
  mapBifunctorMapMap _ _ f g

@[reassoc (attr := simp)]
lemma Œπ_tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj X‚ÇÅ Y‚ÇÅ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h ‚â´ tensorHom f g i‚ÇÅ‚ÇÇ =
      (f i‚ÇÅ ‚äó g i‚ÇÇ) ‚â´ ŒπTensorObj X‚ÇÇ Y‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h := by
  refine' (Œπ_mapBifunctorMapMap (curryObj (MonoidalCategory.tensor C)) (fun ‚ü®i, j‚ü© => i + j : I √ó I ‚Üí I) f g
    i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h).trans _
  rw [‚Üê assoc]
  congr 1
  simp [curryObj, MonoidalCategory.tensorHom_def]

@[simp]
noncomputable def whiskerLeft (X : GradedObject I C) {Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X Y‚ÇÅ] [HasTensor X Y‚ÇÇ] : tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ :=
      tensorHom (ùüô X) œÜ

@[simp]
noncomputable def whiskerRight {X‚ÇÅ X‚ÇÇ : GradedObject I C} (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : GradedObject I C)
    [HasTensor X‚ÇÅ Y] [HasTensor X‚ÇÇ Y] : tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y :=
      tensorHom œÜ (ùüô Y)

@[simp]
lemma tensor_id (X Y : GradedObject I C) [HasTensor X Y] :
    tensorHom (ùüô X) (ùüô Y) = ùüô _ := by
  dsimp [tensorHom, mapBifunctorMapMap]
  simp only [Functor.map_id, NatTrans.id_app, comp_id, mapMap_id]
  rfl

lemma tensorHom_def {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÇ Y‚ÇÅ]:
    tensorHom f g = whiskerRight f Y‚ÇÅ ‚â´ whiskerLeft X‚ÇÇ g := by
  dsimp only [tensorHom, mapBifunctorMapMap, whiskerLeft, whiskerRight]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

@[reassoc]
lemma tensor_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÉ Y‚ÇÉ] :
    tensorHom (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ g‚ÇÅ ‚â´ tensorHom f‚ÇÇ g‚ÇÇ := by
  dsimp only [tensorHom, mapBifunctorMapMap]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

def r‚ÇÅ‚ÇÇ‚ÇÉ : I √ó I √ó I ‚Üí I := fun ‚ü®i, j, k‚ü© => i + j + k

@[reducible] def œÅ‚ÇÅ‚ÇÇ : BifunctorComp‚ÇÅ‚ÇÇIndexData (r‚ÇÅ‚ÇÇ‚ÇÉ : _ ‚Üí I) where
  I‚ÇÅ‚ÇÇ := I
  p := fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => i‚ÇÅ + i‚ÇÇ
  q := fun ‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÅ‚ÇÇ + i‚ÇÉ
  hpq := fun _ => rfl

@[reducible] def œÅ‚ÇÇ‚ÇÉ : BifunctorComp‚ÇÇ‚ÇÉIndexData (r‚ÇÅ‚ÇÇ‚ÇÉ : _ ‚Üí I) where
  I‚ÇÇ‚ÇÉ := I
  p := fun ‚ü®i‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÇ + i‚ÇÉ
  q := fun ‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü© => i‚ÇÅ‚ÇÇ + i‚ÇÉ
  hpq _ := (add_assoc _ _ _).symm

abbrev _root_.CategoryTheory.GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) :=
  HasGoodTrifunctor‚ÇÅ‚ÇÇObj (curryObj (MonoidalCategory.tensor C))
    (curryObj (MonoidalCategory.tensor C)) œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ

abbrev _root_.CategoryTheory.GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) :=
  HasGoodTrifunctor‚ÇÇ‚ÇÉObj (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

section

variable (Z : C) (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ]
  [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)]
  {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} [HasTensor Y‚ÇÅ Y‚ÇÇ] [HasTensor Y‚ÇÇ Y‚ÇÉ]
  [HasTensor (tensorObj Y‚ÇÅ Y‚ÇÇ) Y‚ÇÉ] [HasTensor Y‚ÇÅ (tensorObj Y‚ÇÇ Y‚ÇÉ)]

noncomputable def associator [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ] :
  tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ ‚âÖ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) :=
    mapBifunctorBifunctorAssociator (MonoidalCategory.curriedAssociatorNatIso C) œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

noncomputable def ŒπTensorObj‚ÇÉ (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j :=
  (ùüô _ ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ _ rfl) ‚â´
    ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) i‚ÇÅ (i‚ÇÇ + i‚ÇÉ) j (by rw [‚Üê add_assoc, h])

@[reassoc]
lemma ŒπTensorObj‚ÇÉ_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÇ‚ÇÉ : I) (h' : i‚ÇÇ + i‚ÇÉ = i‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ùüô _ ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ i‚ÇÇ‚ÇÉ h') ‚â´
        ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) i‚ÇÅ i‚ÇÇ‚ÇÉ j (by rw [‚Üê h', ‚Üê add_assoc, h]) := by
  subst h'
  rfl

noncomputable def ŒπTensorObj‚ÇÉ' (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    (X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ) ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j :=
  (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ (i‚ÇÅ + i‚ÇÇ) rfl ‚äó ùüô _) ‚â´
    ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ (i‚ÇÅ + i‚ÇÇ) i‚ÇÉ j h

@[reassoc]
lemma ŒπTensorObj‚ÇÉ'_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÅ‚ÇÇ : I)
    (h' : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h' ‚äó ùüô _) ‚â´
        ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ i‚ÇÅ‚ÇÇ i‚ÇÉ j (by rw [‚Üê h', h]) := by
  subst h'
  rfl

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_tensorHom (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) j =
      (f‚ÇÅ i‚ÇÅ ‚äó f‚ÇÇ i‚ÇÇ ‚äó f‚ÇÉ i‚ÇÉ) ‚â´ ŒπTensorObj‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  rw [ŒπTensorObj‚ÇÉ_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl,
    ŒπTensorObj‚ÇÉ_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl, assoc, Œπ_tensorHom,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Œπ_tensorHom,
    ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id]

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_tensorHom (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ j =
      ((f‚ÇÅ i‚ÇÅ ‚äó f‚ÇÇ i‚ÇÇ) ‚äó f‚ÇÉ i‚ÇÉ) ‚â´ ŒπTensorObj‚ÇÉ' Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  rw [ŒπTensorObj‚ÇÉ'_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl,
    ŒπTensorObj‚ÇÉ'_eq _ _ _ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h _  rfl, assoc, Œπ_tensorHom,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Œπ_tensorHom,
    ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id]

section

@[ext]
lemma tensorObj‚ÇÉ_ext {j : I} {A : C} (f g : tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j ‚ü∂ A)
    [H : HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (hi : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ f = ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ g) : f = g := by
  apply mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj_ext (H := H)
  intro i‚ÇÅ i‚ÇÇ i‚ÇÉ hi
  exact h i‚ÇÅ i‚ÇÇ i‚ÇÉ hi

@[ext]
lemma tensorObj‚ÇÉ'_ext {j : I} {A : C} (f g : tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j ‚ü∂ A)
    [H : HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f = ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  apply mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj_ext (H := H)
  intro i‚ÇÅ i‚ÇÇ i‚ÇÉ hi
  exact h i‚ÇÅ i‚ÇÇ i‚ÇÉ hi

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ)

abbrev HasLeftTensor‚ÇÉObjExt (j : I) := PreservesColimit
  (Discrete.functor fun (i : { i : (I √ó I √ó I) | i.1 + i.2.1 + i.2.2 = j }) ‚Ü¶ (((mapTrifunctor (bifunctorComp‚ÇÇ‚ÇÉ (curryObj (tensor C)) (curryObj (tensor C))) I I I).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ i)
   ((curryObj (tensor C)).obj Z)

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[ext]
lemma left_tensor_tensorObj‚ÇÉ_ext {j : I} {A : C} (Z : C) (f g : Z ‚äó tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j ‚ü∂ A)
    [H : HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    [hZ : HasLeftTensor‚ÇÉObjExt Z X‚ÇÅ X‚ÇÇ X‚ÇÉ j]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      (ùüô Z ‚äó ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h) ‚â´ f =
        (ùüô Z ‚äó ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h) ‚â´ g) : f = g := by
    refine' (@isColimitOfPreserves C _ C _ _ _ _ ((curryObj (MonoidalCategory.tensor C)).obj Z) _
      (isColimitCofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (H := H) j) hZ).hom_ext _
    intro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü©
    exact h _ _ _ hi

end

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ)

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_associator_hom
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      (Œ±_ _ _ _).hom ‚â´ ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h :=
  Œπ_mapBifunctorBifunctorAssociator_hom (MonoidalCategory.curriedAssociatorNatIso C) œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_associator_inv
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
      (Œ±_ _ _ _).inv ‚â´ ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h :=
  Œπ_mapBifunctorBifunctorAssociator_inv (MonoidalCategory.curriedAssociatorNatIso C) œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

lemma associator_naturality (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
    [HasGoodTensor‚ÇÅ‚ÇÇTensor Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ] [HasGoodTensorTensor‚ÇÇ‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ] :
    tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
      (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) := by aesop_cat

end

section

variable [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]

noncomputable def tensorUnit : GradedObject I C :=
  fun i => if (i = 0) then (ùüô_ C) else initial C

variable (C)

noncomputable def tensorUnit‚ÇÄ' (i : I) (hi : i = 0) : (tensorUnit : GradedObject I C) i ‚âÖ ùüô_ C :=
  eqToIso (by subst hi; simp [tensorUnit])

variable (I)

noncomputable def tensorUnit‚ÇÄ : (tensorUnit : GradedObject I C) 0 ‚âÖ ùüô_ C :=
  tensorUnit‚ÇÄ' _ _ rfl

@[simp]
lemma tensorUnit‚ÇÄ'_eq : tensorUnit‚ÇÄ' C 0 rfl = tensorUnit‚ÇÄ I C := rfl

variable {I}

noncomputable def isInitialTensorUnitApply (i : I) (hi : i ‚â† 0) :
    IsInitial ((tensorUnit : GradedObject I C) i) := by
  dsimp [tensorUnit]
  rw [if_neg hi]
  exact initialIsInitial

variable {C}

def isInitialTensor (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : IsInitial X‚ÇÅ) : IsInitial (X‚ÇÅ ‚äó X‚ÇÇ) :=
  IsInitial.isInitialObj ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ) _ hX‚ÇÅ

def tensorIsInitial (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÇ : IsInitial X‚ÇÇ) : IsInitial (X‚ÇÅ ‚äó X‚ÇÇ) :=
  IsInitial.isInitialObj ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ) _ hX‚ÇÇ

variable (X : GradedObject I C)

@[simps! pt]
noncomputable def unitTensorCofan (i : I) : TensorCofan tensorUnit X i :=
  TensorCofan.mk _ _ _ (X i) (fun a b h =>
    if ha : a = 0
      then
        ((tensorUnit‚ÇÄ' C a ha).hom ‚äó ùüô (X b) : tensorUnit a ‚äó X b ‚ü∂ ùüô_ C ‚äó X b) ‚â´
          (leftUnitor (X b)).hom ‚â´ eqToHom (by
            obtain rfl : b = i := by rw [‚Üê h, ha, zero_add]
            rfl)
      else IsInitial.to (isInitialTensor _ _ (isInitialTensorUnitApply _ _ ha)) _)

@[simp]
lemma unitTensorCofan_Œπ‚ÇÄ (i : I) :
    (unitTensorCofan X i).inj ‚ü®‚ü®0, i‚ü©, zero_add i‚ü© =
      ((tensorUnit‚ÇÄ I C).hom ‚äó (ùüô (X i))) ‚â´ (Œª_ (X i)).hom := by
  dsimp [unitTensorCofan]
  rw [dif_pos rfl]
  simp

noncomputable def isColimitUnitTensorCofan (i : I) : IsColimit (unitTensorCofan X i) :=
  mkCofanColimit _
    (fun s => (leftUnitor (X i)).inv ‚â´
      ((tensorUnit‚ÇÄ I C).inv ‚äó ùüô (X i)) ‚â´ s.inj ‚ü®‚ü®0, i‚ü©, zero_add i‚ü©)
    (fun s ‚ü®‚ü®a, b‚ü©, (hi : a + b = i)‚ü© => by
      by_cases h : a = 0
      ¬∑ subst h
        obtain rfl : b = i := by rw [‚Üê hi, zero_add]
        simp
      ¬∑ apply IsInitial.hom_ext
        apply isInitialTensor
        exact isInitialTensorUnitApply  _ _ h)
    (fun s m hm => by
      dsimp
      rw [‚Üê hm ‚ü®‚ü®0, i‚ü©, zero_add i‚ü© ]
      simp)

instance : HasTensor tensorUnit X :=
  TensorCofan.hasTensor _ _ _ (fun i => isColimitUnitTensorCofan X i)

noncomputable def leftUnitor :
    tensorObj tensorUnit X ‚âÖ X := isoMk _ _
      (fun i => ((unitTensorCofan X i).iso (isColimitUnitTensorCofan X i)).symm)

lemma leftUnitor_inv_apply (i : I) :
    (leftUnitor X).inv i =
      (Œª_ _).inv ‚â´ ((tensorUnit‚ÇÄ I C).inv ‚äó ùüô (X i)) ‚â´ ŒπTensorObj tensorUnit X 0 i i (zero_add i) := by
  rfl

lemma leftUnitor_inv_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    f ‚â´ (leftUnitor X‚ÇÇ).inv = (leftUnitor X‚ÇÅ).inv ‚â´ tensorHom (ùüô tensorUnit) f := by
  ext i
  dsimp
  rw [leftUnitor_inv_apply, leftUnitor_inv_apply, assoc, assoc, Œπ_tensorHom,
    leftUnitor_inv_naturality_assoc, id_tensor_comp_tensor_id_assoc]
  dsimp
  rw [tensor_id_comp_id_tensor_assoc]

lemma leftUnitor_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    tensorHom (ùüô tensorUnit) f ‚â´ (leftUnitor X‚ÇÇ).hom = (leftUnitor X‚ÇÅ).hom ‚â´ f := by
  rw [‚Üê cancel_mono (leftUnitor X‚ÇÇ).inv, assoc, assoc, Iso.hom_inv_id, comp_id,
    leftUnitor_inv_naturality, Iso.hom_inv_id_assoc]

@[reassoc (attr := simp)]
lemma ŒπTensorObj_leftUnitor_hom (X : GradedObject I C) (i : I) :
    ŒπTensorObj tensorUnit X 0 i i (zero_add i) ‚â´ (leftUnitor X).hom i =
      ((tensorUnit‚ÇÄ I C).hom ‚äó ùüô (X i)) ‚â´ (Œª_ (X i)).hom := by
  rw [‚Üê cancel_mono ((leftUnitor X).inv i), assoc, assoc,
    iso_hom_inv_id_apply, comp_id, leftUnitor_inv_apply,
    Iso.hom_inv_id_assoc, hom_inv_id_tensor_assoc, MonoidalCategory.tensor_id,
    id_comp, id_comp]

@[simps! pt]
noncomputable def tensorUnitCofan (i : I) : TensorCofan X tensorUnit i :=
  TensorCofan.mk _ _ _ (X i) (fun a b h =>
    if hb : b = 0
      then
        (ùüô (X a) ‚äó (tensorUnit‚ÇÄ' C b hb).hom) ‚â´ (rightUnitor (X a)).hom ‚â´ eqToHom (by
          obtain rfl : a = i := by rw [‚Üê h, hb, add_zero]
          rfl)
      else IsInitial.to (tensorIsInitial _ _ (isInitialTensorUnitApply _ _ hb)) _)

@[simp]
lemma tensorUnitCofan_Œπ‚ÇÄ (i : I) :
    (tensorUnitCofan X i).inj ‚ü®‚ü®i, 0‚ü©, add_zero i‚ü© =
      (ùüô (X i) ‚äó (tensorUnit‚ÇÄ I C).hom) ‚â´ (rightUnitor (X i)).hom := by
  dsimp [tensorUnitCofan]
  rw [dif_pos rfl]
  simp

noncomputable def isColimitTensorUnitCofan (i : I) : IsColimit (tensorUnitCofan X i) :=
  mkCofanColimit _
    (fun s => (rightUnitor (X i)).inv ‚â´
      (ùüô (X i) ‚äó (tensorUnit‚ÇÄ I C).inv) ‚â´ s.inj ‚ü®‚ü®i, 0‚ü©, add_zero i‚ü©)
    (fun s ‚ü®‚ü®a, b‚ü©, (hi : a + b = i)‚ü© => by
      by_cases h : b = 0
      ¬∑ subst h
        obtain rfl : a = i := by rw [‚Üê hi, add_zero]
        simp
      ¬∑ apply IsInitial.hom_ext
        apply tensorIsInitial
        exact isInitialTensorUnitApply  _ _ h)
    (fun s m hm => by
      dsimp
      rw [‚Üê hm ‚ü®‚ü®i, 0‚ü©, add_zero i‚ü© ]
      simp)

instance : HasTensor X tensorUnit :=
  TensorCofan.hasTensor _ _ _ (fun i => isColimitTensorUnitCofan X i)

noncomputable def rightUnitor :
    tensorObj X tensorUnit ‚âÖ X := isoMk _ _
      (fun i => ((tensorUnitCofan X i).iso (isColimitTensorUnitCofan X i)).symm)

lemma rightUnitor_inv_apply (i : I) :
    (rightUnitor X).inv i =
      (œÅ_ _).inv ‚â´ (ùüô (X i) ‚äó (tensorUnit‚ÇÄ I C).inv) ‚â´ ŒπTensorObj X tensorUnit i 0 i (add_zero i) := by
  rfl

lemma rightUnitor_inv_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    f ‚â´ (rightUnitor X‚ÇÇ).inv = (rightUnitor X‚ÇÅ).inv ‚â´ tensorHom f (ùüô tensorUnit) := by
  ext i
  dsimp
  rw [rightUnitor_inv_apply, rightUnitor_inv_apply, assoc, assoc, Œπ_tensorHom,
    rightUnitor_inv_naturality_assoc, tensor_id_comp_id_tensor_assoc]
  dsimp
  rw [id_tensor_comp_tensor_id_assoc]

lemma rightUnitor_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    tensorHom f (ùüô tensorUnit) ‚â´ (rightUnitor X‚ÇÇ).hom = (rightUnitor X‚ÇÅ).hom ‚â´ f := by
  rw [‚Üê cancel_mono (rightUnitor X‚ÇÇ).inv, assoc, assoc, Iso.hom_inv_id, comp_id,
    rightUnitor_inv_naturality, Iso.hom_inv_id_assoc]

@[reassoc (attr := simp)]
lemma ŒπTensorObj_rightUnitor_hom (X : GradedObject I C) (i : I) :
    ŒπTensorObj X tensorUnit i 0 i (add_zero i) ‚â´ (rightUnitor X).hom i =
      (ùüô (X i ) ‚äó (tensorUnit‚ÇÄ I C).hom) ‚â´ (œÅ_ (X i)).hom := by
  rw [‚Üê cancel_mono ((rightUnitor X).inv i), assoc, assoc,
    iso_hom_inv_id_apply, comp_id, rightUnitor_inv_apply,
    Iso.hom_inv_id_assoc, ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp,
    Iso.hom_inv_id, MonoidalCategory.tensor_id, id_comp]

lemma triangle (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ]
    [HasTensor (tensorObj X‚ÇÅ tensorUnit) X‚ÇÇ]
    [HasTensor X‚ÇÅ (tensorObj tensorUnit X‚ÇÇ)] [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ tensorUnit X‚ÇÇ]
    [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ tensorUnit X‚ÇÇ] :
  (associator X‚ÇÅ tensorUnit X‚ÇÇ).hom ‚â´ tensorHom (ùüô X‚ÇÅ) (leftUnitor X‚ÇÇ).hom =
    tensorHom (rightUnitor X‚ÇÅ).hom (ùüô X‚ÇÇ) := by
  ext j i‚ÇÅ k i‚ÇÇ h
  simp only [categoryOfGradedObjects_comp, ŒπTensorObj‚ÇÉ'_associator_hom_assoc]
  by_cases h' : k = 0
  ¬∑ subst h'
    rw [ŒπTensorObj‚ÇÉ_eq X‚ÇÅ tensorUnit X‚ÇÇ i‚ÇÅ 0 i‚ÇÇ j h i‚ÇÇ (zero_add i‚ÇÇ),
      ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ tensorUnit X‚ÇÇ i‚ÇÅ 0 i‚ÇÇ j h i‚ÇÅ (add_zero i‚ÇÅ), assoc, assoc,
      Œπ_tensorHom, Œπ_tensorHom, categoryOfGradedObjects_id, categoryOfGradedObjects_id,
      ‚Üê cancel_epi ((ùüô (X‚ÇÅ i‚ÇÅ) ‚äó (tensorUnit‚ÇÄ I C).inv) ‚äó ùüô (X‚ÇÇ i‚ÇÇ)),
      associator_naturality_assoc (ùüô (X‚ÇÅ i‚ÇÅ)) (tensorUnit‚ÇÄ I C).inv (ùüô (X‚ÇÇ i‚ÇÇ)),
      ‚Üê MonoidalCategory.tensor_comp_assoc, ‚Üê MonoidalCategory.tensor_comp_assoc,
      assoc, assoc, id_comp, id_comp, ŒπTensorObj_leftUnitor_hom,
      ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Iso.inv_hom_id, MonoidalCategory.tensor_id,
      id_comp, triangle_assoc, ‚Üê MonoidalCategory.tensor_comp_assoc,
      ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id, comp_id, assoc, ŒπTensorObj_rightUnitor_hom,
      ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Iso.inv_hom_id, MonoidalCategory.tensor_id,
      id_comp]
  ¬∑ apply IsInitial.hom_ext
    apply isInitialTensor
    apply tensorIsInitial
    exact isInitialTensorUnitApply C k h'

end

section

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C)
  [HasTensor X‚ÇÉ X‚ÇÑ]
  [HasTensor X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)]
  [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ))]

noncomputable def ŒπTensorObj‚ÇÑ (i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ + i‚ÇÑ = j) :
    X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ ‚äó X‚ÇÑ i‚ÇÑ ‚ü∂ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)) j :=
  (ùüô _ ‚äó ŒπTensorObj‚ÇÉ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÇ i‚ÇÉ i‚ÇÑ _ rfl) ‚â´
    ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)) i‚ÇÅ (i‚ÇÇ + i‚ÇÉ + i‚ÇÑ) j (by rw [‚Üê h, ‚Üê add_assoc, ‚Üê add_assoc])

lemma ŒπTensorObj‚ÇÑ_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ + i‚ÇÑ = j) (i‚ÇÇ‚ÇÉ‚ÇÑ : I) (hi : i‚ÇÇ + i‚ÇÉ + i‚ÇÑ = i‚ÇÇ‚ÇÉ‚ÇÑ) :
    ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j h =
      (ùüô _ ‚äó ŒπTensorObj‚ÇÉ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÇ i‚ÇÉ i‚ÇÑ _ hi) ‚â´
        ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)) i‚ÇÅ i‚ÇÇ‚ÇÉ‚ÇÑ j (by rw [‚Üê hi, ‚Üê add_assoc, ‚Üê add_assoc, h]) := by
  subst hi
  rfl

abbrev _root_.CategoryTheory.GradedObject.HasTensor‚ÇÑObjExt := ‚àÄ (i‚ÇÅ i‚ÇÇ‚ÇÉ‚ÇÑ : I), HasLeftTensor‚ÇÉObjExt (X‚ÇÅ i‚ÇÅ) X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÇ‚ÇÉ‚ÇÑ

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ}

@[ext]
lemma tensorObj‚ÇÑ_ext {j : I} {A : C} (f g : tensorObj X‚ÇÅ (tensorObj X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)) j ‚ü∂ A)
    [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÇ X‚ÇÉ X‚ÇÑ]
    [H : HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ + i‚ÇÑ = j),
      ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j h ‚â´ f =
        ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j h ‚â´ g) : f = g := by
  apply tensorObj_ext
  intro i‚ÇÅ i‚ÇÇ‚ÇÉ‚ÇÑ h'
  apply left_tensor_tensorObj‚ÇÉ_ext
  intro i‚ÇÇ i‚ÇÉ i‚ÇÑ h''
  have hj : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ + i‚ÇÑ = j := by simp only [‚Üê h', ‚Üê h'', add_assoc]
  simpa only [assoc, ŒπTensorObj‚ÇÑ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j hj i‚ÇÇ‚ÇÉ‚ÇÑ h''] using h i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ hj

end

section pentagon

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C)
  [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ] [HasTensor X‚ÇÉ X‚ÇÑ]
  [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)]
  [HasTensor (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ] [HasTensor X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)]
  [HasTensor (tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ) X‚ÇÑ]
  [HasTensor (tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)) X‚ÇÑ]
  [HasTensor X‚ÇÅ (tensorObj (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ)]
  [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ))]
  [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) (tensorObj X‚ÇÉ X‚ÇÑ)]
  [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ]
  [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ]
  [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÇ X‚ÇÉ X‚ÇÑ]
  [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÇ X‚ÇÉ X‚ÇÑ]
  [HasGoodTensor‚ÇÅ‚ÇÇTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ]
  [HasGoodTensorTensor‚ÇÇ‚ÇÉ (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ]
  [HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)]
  [HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)]
  [HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]

@[reassoc]
lemma pentagon_inv :
    tensorHom (ùüô X‚ÇÅ) (associator X‚ÇÇ X‚ÇÉ X‚ÇÑ).inv ‚â´ (associator X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ).inv ‚â´
        tensorHom (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv (ùüô X‚ÇÑ) =
    (associator X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)).inv ‚â´ (associator (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ).inv := by
  ext j i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ h
  dsimp
  -- working on the LHS
  rw [ŒπTensorObj‚ÇÑ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ i‚ÇÑ j h _ rfl, assoc, assoc, Œπ_tensorHom_assoc,
    categoryOfGradedObjects_id, ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp,
    ŒπTensorObj‚ÇÉ_associator_inv, ŒπTensorObj‚ÇÉ'_eq X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÇ i‚ÇÉ i‚ÇÑ _ rfl _ rfl,
    id_tensor_comp, id_tensor_comp, assoc, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ i‚ÇÅ (i‚ÇÇ + i‚ÇÉ) i‚ÇÑ j
      (by simp only [‚Üê add_assoc, h]) _ rfl, ŒπTensorObj‚ÇÉ_associator_inv_assoc,
    ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ i‚ÇÅ (i‚ÇÇ + i‚ÇÉ) i‚ÇÑ j
      (by simp only [‚Üê add_assoc, h]) (i‚ÇÅ + i‚ÇÇ + i‚ÇÉ) (by rw [add_assoc]),
    assoc, Œπ_tensorHom, categoryOfGradedObjects_id, associator_inv_naturality_assoc,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ _ rfl _ rfl,
    ŒπTensorObj‚ÇÉ_associator_inv, comp_tensor_id, assoc, pentagon_inv_assoc]
  -- working on the RHS
  have H := (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ _ rfl ‚äó ùüô _) ‚â´=
    ŒπTensorObj‚ÇÉ_associator_inv (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ (i‚ÇÅ + i‚ÇÇ) i‚ÇÉ i‚ÇÑ j h
  rw [ŒπTensorObj‚ÇÉ_eq (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ (i‚ÇÅ + i‚ÇÇ) i‚ÇÉ i‚ÇÑ j h _ rfl, assoc,
    ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id, id_comp] at H
  rw [ŒπTensorObj‚ÇÉ_eq X‚ÇÇ X‚ÇÉ X‚ÇÑ i‚ÇÇ i‚ÇÉ i‚ÇÑ _ rfl _ rfl, id_tensor_comp, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) i‚ÇÅ i‚ÇÇ (i‚ÇÉ + i‚ÇÑ) j
      (by rw [‚Üê add_assoc, h]) (i‚ÇÇ + i‚ÇÉ + i‚ÇÑ) (by rw [add_assoc]),
    ŒπTensorObj‚ÇÉ_associator_inv_assoc, associator_inv_naturality_assoc,
    ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) i‚ÇÅ i‚ÇÇ (i‚ÇÉ + i‚ÇÑ) j (by rw [‚Üê add_assoc, h]) _ rfl,
    assoc, ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id, MonoidalCategory.tensor_id,
    id_comp, H, ‚Üê MonoidalCategory.tensor_id, MonoidalCategory.associator_inv_naturality_assoc,
    ŒπTensorObj‚ÇÉ'_eq (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ (i‚ÇÅ + i‚ÇÇ) i‚ÇÉ i‚ÇÑ j h _ rfl,
    ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ _ rfl _ rfl]

lemma pentagon : tensorHom (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom (ùüô X‚ÇÑ) ‚â´
    (associator X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ).hom ‚â´ tensorHom (ùüô X‚ÇÅ) (associator X‚ÇÇ X‚ÇÉ X‚ÇÑ).hom =
    (associator (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ).hom ‚â´ (associator X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)).hom := by
  rw [‚Üê cancel_epi (associator (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ).inv,
    ‚Üê cancel_epi (associator X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ)).inv, Iso.inv_hom_id_assoc,
    Iso.inv_hom_id, ‚Üê pentagon_inv_assoc, ‚Üê tensor_comp_assoc, id_comp, Iso.inv_hom_id,
    tensor_id, id_comp, Iso.inv_hom_id_assoc, ‚Üê tensor_comp, id_comp, Iso.inv_hom_id,
    tensor_id]

end pentagon

end Monoidal

section

variable
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]

noncomputable instance monoidalCategory : MonoidalCategory (GradedObject I C) where
  tensorObj X Y := Monoidal.tensorObj X Y
  tensorHom f g := Monoidal.tensorHom f g
  tensorHom_def f g := Monoidal.tensorHom_def f g
  whiskerLeft X _ _ œÜ := Monoidal.whiskerLeft X œÜ
  whiskerRight {_ _ œÜ Y} := Monoidal.whiskerRight œÜ Y
  tensorUnit := Monoidal.tensorUnit
  associator X‚ÇÅ X‚ÇÇ X‚ÇÉ := Monoidal.associator X‚ÇÅ X‚ÇÇ X‚ÇÉ
  associator_naturality f‚ÇÅ f‚ÇÇ f‚ÇÉ := Monoidal.associator_naturality f‚ÇÅ f‚ÇÇ f‚ÇÉ
  leftUnitor X := Monoidal.leftUnitor X
  leftUnitor_naturality := Monoidal.leftUnitor_naturality
  rightUnitor X := Monoidal.rightUnitor X
  rightUnitor_naturality := Monoidal.rightUnitor_naturality
  tensor_comp f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ := Monoidal.tensor_comp f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ
  pentagon X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ := Monoidal.pentagon X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ
  triangle X‚ÇÅ X‚ÇÇ := Monoidal.triangle X‚ÇÅ X‚ÇÇ

variable {A : C} (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ Y‚ÇÅ Y‚ÇÇ : GradedObject I C)

noncomputable def tensorObjIso :
    X‚ÇÅ ‚äó X‚ÇÇ ‚âÖ mapBifunctorMapObj
      (curryObj (MonoidalCategory.tensor C)) (fun ‚ü®i, j‚ü© => i + j) X‚ÇÅ X‚ÇÇ := Iso.refl _

noncomputable def ŒπTensorObj (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
  X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ (X‚ÇÅ ‚äó X‚ÇÇ) i‚ÇÅ‚ÇÇ :=
    Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h

variable {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ}

@[reassoc (attr := simp)]
lemma Œπ_tensorHom (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj X‚ÇÅ Y‚ÇÅ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h ‚â´ tensorHom f g i‚ÇÅ‚ÇÇ =
      (f i‚ÇÅ ‚äó g i‚ÇÇ) ‚â´ ŒπTensorObj X‚ÇÇ Y‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h := by
  apply Monoidal.Œπ_tensorHom

variable (X‚ÇÅ X‚ÇÇ)

@[simp]
abbrev cofanTensorFun (j : I) : { i : I √ó I | i.1 + i.2 = j } ‚Üí C :=
  fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, _‚ü© => X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ

@[simp]
noncomputable def cofanTensor (j : I) : Cofan (cofanTensorFun X‚ÇÅ X‚ÇÇ j) :=
  Cofan.mk ((X‚ÇÅ ‚äó X‚ÇÇ) j) (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, hi‚ü© => ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi)

noncomputable def isColimitCofanTensor (j : I) : IsColimit (cofanTensor X‚ÇÅ X‚ÇÇ j) := by
  apply isColimitCofanMapObj

variable {X‚ÇÅ X‚ÇÇ}

noncomputable def descTensor {j : I} (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ A) :
    (X‚ÇÅ ‚äó X‚ÇÇ) j ‚ü∂ A :=
  Cofan.IsColimit.desc (isColimitCofanTensor X‚ÇÅ X‚ÇÇ j) (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, hi‚ü© => f i‚ÇÅ i‚ÇÇ hi)

@[reassoc (attr := simp)]
lemma Œπ_descTensor (j : I) (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ A)
    (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j) :
    ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ descTensor f = f i‚ÇÅ i‚ÇÇ hi := by
  apply Cofan.IsColimit.fac

@[ext]
lemma tensorObj_ext {j : I} (f g : (X‚ÇÅ ‚äó X‚ÇÇ) j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j),
      ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ f = ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ g) : f = g :=
  Monoidal.tensorObj_ext f g h

end

section

instance (n : ‚Ñï) : Finite ((fun (i : ‚Ñï √ó ‚Ñï) => i.1 + i.2) ‚Åª¬π' {n}) := by
  refine' Finite.of_injective (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, (hi : i‚ÇÅ + i‚ÇÇ = n)‚ü© =>
    ((‚ü®i‚ÇÅ, by linarith‚ü©, ‚ü®i‚ÇÇ, by linarith‚ü©) : Fin (n + 1) √ó Fin (n + 1) )) _
  rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, (hi : i‚ÇÅ + i‚ÇÇ = n)‚ü© ‚ü®‚ü®j‚ÇÅ, j‚ÇÇ‚ü©, (hj : j‚ÇÅ + j‚ÇÇ = n)‚ü© h
  simpa using h

instance (n : ‚Ñï) : Finite ({ i : (‚Ñï √ó ‚Ñï √ó ‚Ñï) | i.1 + i.2.1 + i.2.2 = n }) := by
  refine' Finite.of_injective (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, (hi : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = n)‚ü© =>
    (‚ü®‚ü®i‚ÇÅ, by linarith‚ü©, ‚ü®i‚ÇÇ, by linarith‚ü©, ‚ü®i‚ÇÉ, by linarith‚ü©‚ü© :
      Fin (n+1) √ó Fin (n+1) √ó Fin (n+1))) _
  rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, hi : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = n‚ü© ‚ü®‚ü®j‚ÇÅ, j‚ÇÇ, j‚ÇÉ‚ü©, hj : j‚ÇÅ + j‚ÇÇ + j‚ÇÉ = n‚ü© h
  simpa using h

noncomputable example [HasFiniteCoproducts C]
    [‚àÄ (X : C), PreservesFiniteCoproducts ((curryObj (tensor C)).obj X)]
    [‚àÄ (X : C), PreservesFiniteCoproducts ((curryObj (tensor C)).flip.obj X)] :
    MonoidalCategory (GradedObject ‚Ñï C) := inferInstance

end

end GradedObject

end CategoryTheory
