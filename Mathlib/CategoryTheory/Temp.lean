import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.CategoryTheory.ChosenFiniteProducts
import Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes
import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.CategoryTheory.Limits.Presheaf

namespace CategoryTheory

universe w v v' u u'

open MonoidalCategory

class ChosenCartesianClosed (C : Type u) [Category.{v} C] where
  [chosenFiniteProducts: ChosenFiniteProducts C]
  rightAdj (X : C) : C ‚•§ C
  adj (X : C) : @tensorLeft _ _ (monoidalOfHasFiniteProducts _) X ‚ä£ rightAdj X

namespace ChosenCartesianClosed

instance (C : Type u) [Category.{v} C] [i : ChosenCartesianClosed C] : ChosenFiniteProducts C :=
  i.chosenFiniteProducts

noncomputable section

def ofCartesianClosed (C : Type u) [Category.{v} C] [Limits.HasFiniteProducts C]
    [CartesianClosed C] : ChosenCartesianClosed C :=
  letI _ := ChosenFiniteProducts.ofFiniteProducts C
  letI _ : MonoidalCategory C := monoidalOfHasFiniteProducts C
{ rightAdj := fun X ‚Ü¶ ihom X
  adj := fun X ‚Ü¶ ihom.adjunction X
}

instance (C : Type u) [Category.{v} C] [ChosenCartesianClosed C] : CartesianClosed C :=
  letI _ : MonoidalCategory C := monoidalOfHasFiniteProducts C
  {
    closed := fun X ‚Ü¶ {
      rightAdj := rightAdj X
      adj := adj X }
  }

--variable (C : Type u) [Category.{v} C] [ChosenFiniteProducts C] [ChosenCartesianClosed C]

--instance (c : C) : Closed c := sorry

end

end ChosenCartesianClosed

noncomputable section

open Simplicial SimplexCategory SSet

def SSetIHom (X Y : SSet) : SSet where
  obj := fun ‚ü®n‚ü© ‚Ü¶ Œî[len n] ‚äó X ‚ü∂ Y
  map := fun f g ‚Ü¶ standardSimplex.map f.unop ‚ñ∑ X ‚â´ g

def SSetRightAdj (X : SSet) : SSet ‚•§ SSet where
  obj Y := SSetIHom X Y
  map f := { app := fun _ h ‚Ü¶ h ‚â´ f }

def aux1 {X Y Z : SSet} (f : X ‚äó Y ‚ü∂ Z) (n : SimplexCategory·µí·µñ) (Yn: Y.obj n) :
    (SSetIHom X Z).obj n where
  app := fun m ‚ü®g, Xm‚ü© ‚Ü¶ f.app m (Xm, Y.map g.down.op Yn)
  naturality l m h := by
    ext ‚ü®g, Xl‚ü©
    change f.app m (X.map h Xl, Y.map ((standardSimplex.obj n.unop).map h g).down.op Yn) = _
    have H := f.naturality h
    apply_fun (fun f ‚Ü¶ f (Xl, Y.map g.down.op Yn)) at H
    dsimp [standardSimplex, yoneda, SSet.uliftFunctor]
    aesop

def aux2 {X Y Z : SSet} (f : X ‚äó Y ‚ü∂ Z) : Y ‚ü∂ SSetIHom X Z where
  app n Yn := aux1 f n Yn
  naturality n m g := by
    ext Yn
    dsimp [SSetRightAdj, SSetIHom]
    ext l ‚ü®h, Xl‚ü©
    change _ = (aux1 f n Yn).app l ((standardSimplex.map g.unop ‚ñ∑ X).app l (h, Xl))
    dsimp [aux1, standardSimplex, yoneda, SSet.uliftFunctor]
    aesop

def aux3 {X Y Z : SSet} (f : Y ‚ü∂ SSetIHom X Z) : X ‚äó Y ‚ü∂ Z where
  app n x := (f.app n x.2).app n (standardSimplex.objMk OrderHom.id, x.1)
  naturality n m g := by
    dsimp
    ext ‚ü®Xn, Yn‚ü©
    change (f.app m ((Y.map g Yn))).app m (_, X.map g Xn) = Z.map g ((f.app n Yn).app n (_, Xn))
    have b := f.naturality g
    apply_fun (fun f ‚Ü¶ (f Yn).app m (standardSimplex.objMk OrderHom.id, X.map g Xn)) at b
    have a := (f.app n Yn).naturality g
    apply_fun (fun f ‚Ü¶ f (standardSimplex.objMk OrderHom.id, Xn)) at a
    simp only [mk_len, types_comp_apply] at a b
    rw [b, ‚Üê a]
    rfl

@[ext]
lemma ext {X Y : SSet} {n : SimplexCategory·µí·µñ} {f g : (SSetIHom X Y).obj n} :
    f.app = g.app ‚Üí f = g := NatTrans.ext _ _

def SSetAdj (X : SSet) : tensorLeft X ‚ä£ SSetRightAdj X where
  homEquiv Y Z := {
    toFun := fun f ‚Ü¶ aux2 f
    invFun := fun f ‚Ü¶ aux3 f
    left_inv := fun f ‚Ü¶ by
      ext n ‚ü®Xn, Yn‚ü©
      change f.app n (Xn, Y.map (ùüô _) Yn) = _
      aesop
    right_inv := fun f ‚Ü¶ by
      dsimp [aux1, aux2, aux3]
      ext n Yn m ‚ü®g, Xm‚ü©
      have b := f.naturality g.down.op
      apply_fun (fun f ‚Ü¶ (f Yn).app m (standardSimplex.objMk OrderHom.id, Xm)) at b
      dsimp at b
      rw [b]
      change (f.app n Yn).app m ({ down := ùüô _ ‚â´ g.down }, Xm) = _
      aesop
  }
  unit := {
    app := fun Y ‚Ü¶ aux2 (ùüô _)
    naturality := fun Y Z f ‚Ü¶ by
      ext n Yn
      change (aux1 (ùüô (X ‚äó Z)) n (f.app n Yn)) = ((SSetRightAdj X).map (X ‚óÅ f)).app n (aux1 (ùüô (X ‚äó Y)) n Yn)
      ext m ‚ü®g, Xm‚ü©
      change (Xm, Z.map g.down.op (f.app n Yn)) = (X ‚óÅ f).app m (Xm, Y.map g.down.op Yn)
      simp only [Opposite.op_unop, mk_len, yoneda_obj_obj, whiskerLeft_app_apply, Prod.mk.injEq,
        true_and]
      exact Eq.symm (FunctorToTypes.naturality Y Z f g.down.op Yn)
  }
  counit := { app := fun Y ‚Ü¶ aux3 (ùüô _) }

instance : MonoidalClosed SSet where
  closed X := {
    rightAdj := SSetRightAdj X
    adj := SSetAdj X
  }

variable {C : Type u} [Category.{v} C]

def UliftFunctor : (C·µí·µñ ‚•§ Type v) ‚•§ C·µí·µñ ‚•§ Type max u v :=
  (whiskeringRight _ _ _).obj uliftFunctor.{u, v}

def yonedaLift {C : Type u} [Category.{v} C] : C ‚•§ C·µí·µñ ‚•§ Type (max u v) :=
    yoneda ‚ãô UliftFunctor.{v, u}

def IHom (F G : C·µí·µñ ‚•§ Type max u v) : C·µí·µñ ‚•§ Type max u v where
  obj c := (yonedaLift.obj c.unop) ‚äó F ‚ü∂ G
  map := fun f g ‚Ü¶ yonedaLift.map f.unop ‚ñ∑ F ‚â´ g

def RightAdj (F : C·µí·µñ ‚•§ Type max u v) : (C·µí·µñ ‚•§ Type max u v) ‚•§ C·µí·µñ ‚•§ Type max u v where
  obj G := IHom F G
  map f := { app := fun _ h ‚Ü¶ h ‚â´ f }

def Aux1 {F G H : C·µí·µñ ‚•§ Type max u v} (f : F ‚äó G ‚ü∂ H) (c : C·µí·µñ) (Gc: G.obj c) :
    (IHom F H).obj c where
  app := fun d ‚ü®g, Fd‚ü© ‚Ü¶ f.app d (Fd, G.map g.down.op Gc)
  naturality a b h := by
    ext ‚ü®g, Fa‚ü©
    change f.app b (F.map h Fa, G.map ((yonedaLift.obj c.unop).map h g).down.op Gc) = _
    have := f.naturality h
    apply_fun (fun f ‚Ü¶ f (Fa, G.map g.down.op Gc)) at this
    dsimp [yonedaLift, UliftFunctor]
    aesop
