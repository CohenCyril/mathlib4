import Mathlib.NumberTheory.NumberField.Units
import Mathlib.Covolume
import Mathlib.Analysis.InnerProductSpace.OfNorm
import Mathlib.Analysis.InnerProductSpace.ProdL2

noncomputable section Ideal

def Ideal.equivIsPrincipal (R : Type*) [CommRing R] [IsDomain R] :
    Quotient (MulAction.orbitRel RÀ£ R) ‚âÉ {I : Ideal R | Submodule.IsPrincipal I} := by
  have h_main : ‚àÄ ‚¶Éx : R‚¶Ñ, ‚àÄ ‚¶Éy:R‚¶Ñ,
      y ‚àà MulAction.orbit RÀ£ x ‚Üî Ideal.span {x} = Ideal.span {y} := fun x y ‚Ü¶ by
    simp_rw [Ideal.span_singleton_eq_span_singleton, MulAction.orbit, Set.mem_range, Associated,
    mul_comm x _]
    rfl
  refine Equiv.ofBijective ?_ ‚ü®?_, fun ‚ü®I, hI‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ exact _root_.Quotient.lift (fun x ‚Ü¶ ‚ü®Ideal.span {x}, ‚ü®x, rfl‚ü©‚ü©)
      fun _ _ h ‚Ü¶ Subtype.mk_eq_mk.mpr (h_main.mp h).symm
  ¬∑ rintro ‚ü®_‚ü© ‚ü®_‚ü© h
    exact Quotient.sound <| h_main.mpr ((Subtype.mk_eq_mk.mp h).symm)
  ¬∑ obtain ‚ü®x, hx‚ü© := hI
    exact ‚ü®‚ü¶x‚üß, Subtype.mk_eq_mk.mpr hx.symm‚ü©

theorem Ideal.equivIsPrincipal_apply (R : Type*) [CommRing R] [IsDomain R] (x : R) :
    Ideal.equivIsPrincipal R ‚ü¶x‚üß = Ideal.span {x} := rfl

theorem Ideal.equivIsPrincipal_symm_apply (R : Type*) [CommRing R] [IsDomain R] {I : Ideal R}
    (hI : Submodule.IsPrincipal I) :
    (Ideal.equivIsPrincipal R).symm ‚ü®I, hI‚ü© = ‚ü¶hI.generator‚üß := by
  rw [Equiv.symm_apply_eq, Subtype.ext_iff, Ideal.equivIsPrincipal_apply, span_singleton_generator]

end Ideal

variable {K : Type*} [Field K] [NumberField K]

open NumberField NumberField.InfinitePlace NumberField.Units.dirichletUnitTheorem FiniteDimensional

open scoped BigOperators Classical

local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

section Embedding  -- Move this to `Embeddings`

theorem NumberField.InfinitePlace.norm_embedding_eq_of_isReal {K : Type*} [Field K]
    {w : NumberField.InfinitePlace K} (hw : NumberField.InfinitePlace.IsReal w) (x : K) :
    ‚Äñembedding_of_isReal hw x‚Äñ = w x := by
  rw [‚Üê norm_embedding_eq, ‚Üê embedding_of_isReal_apply hw, Complex.norm_real]

end Embedding

noncomputable section Basic -- Move this to `CanonicalEmbedding.Basic`

namespace NumberField

def mixedEmbedding.norm : (E K) ‚Üí*‚ÇÄ ‚Ñù where
  toFun := fun x ‚Ü¶ (‚àè w, ‚Äñx.1 w‚Äñ) * ‚àè w, ‚Äñx.2 w‚Äñ ^ 2
  map_one' := by simp only [Prod.fst_one, Pi.one_apply, norm_one, Finset.prod_const_one,
    Prod.snd_one, one_pow, mul_one]
  map_zero' := by
    simp_rw [Prod.fst_zero, Prod.snd_zero, Pi.zero_apply, norm_zero, zero_pow (two_ne_zero),
      mul_eq_zero, Finset.prod_const, pow_eq_zero_iff', true_and, Finset.card_univ]
    by_contra!
    have : finrank ‚Ñö K = 0 := by
      rw [‚Üê card_add_two_mul_card_eq_rank, NrRealPlaces, NrComplexPlaces, this.1, this.2]
    exact ne_of_gt finrank_pos this
  map_mul' _ _ := by simp only [Prod.fst_mul, Pi.mul_apply, norm_mul, Real.norm_eq_abs,
      Finset.prod_mul_distrib, Prod.snd_mul, Complex.norm_eq_abs, mul_pow]; ring

theorem mixedEmbedding.norm_ne_zero_iff {x : E K} :
    norm x ‚â† 0 ‚Üî (‚àÄ w, x.1 w ‚â† 0) ‚àß (‚àÄ w, x.2 w ‚â† 0) := by
  simp_rw [norm, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, mul_ne_zero_iff, Finset.prod_ne_zero_iff,
    Finset.mem_univ, forall_true_left, pow_ne_zero_iff two_ne_zero, _root_.norm_ne_zero_iff]

theorem mixedEmbedding.norm_const (c : ‚Ñù) :
    norm ((fun _ ‚Ü¶ c, fun _ ‚Ü¶ c) : (E K)) = |c| ^ finrank ‚Ñö K := by
  simp_rw [norm, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, Real.norm_eq_abs, Complex.norm_eq_abs,
    Complex.abs_ofReal, Finset.prod_const, ‚Üê pow_mul, ‚Üê card_add_two_mul_card_eq_rank,
    Finset.card_univ, pow_add]

theorem mixedEmbedding.norm_smul (c : ‚Ñù) (x : E K) :
    norm (c ‚Ä¢ x) = |c| ^ finrank ‚Ñö K * (norm x) := by
  rw [show c ‚Ä¢ x = ((fun _ ‚Ü¶ c, fun _ ‚Ü¶ c) : (E K)) * x by rfl, map_mul, norm_const]

@[simp]
theorem mixedEmbedding.norm_eq_norm (x : K) :
    norm (mixedEmbedding K x) = |Algebra.norm ‚Ñö x| := by
  simp_rw [‚Üê prod_eq_abs_norm, mixedEmbedding.norm, mixedEmbedding, RingHom.prod_apply,
    MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, Pi.ringHom_apply, norm_embedding_eq,
    norm_embedding_eq_of_isReal]
  rw [‚Üê Fintype.prod_subtype_mul_prod_subtype (fun w : InfinitePlace K ‚Ü¶ IsReal w)]
  congr 1
  ¬∑ exact Finset.prod_congr rfl (fun w _ ‚Ü¶ by rw [mult, if_pos w.prop, pow_one])
  ¬∑ refine (Fintype.prod_equiv (Equiv.subtypeEquivRight ?_) _ _ (fun w ‚Ü¶ ?_)).symm
    ¬∑ exact fun _ ‚Ü¶ not_isReal_iff_isComplex
    ¬∑ rw [Equiv.subtypeEquivRight_apply_coe, mult, if_neg w.prop]

theorem mixedEmbedding.norm_ne_zero {x : E K}
    (hx : x ‚àà Set.range (mixedEmbedding K)) (hx' : x ‚â† 0) : norm x ‚â† 0 := by
  obtain ‚ü®a, rfl‚ü© := hx
  rw [norm_eq_norm, Rat.cast_abs, ne_eq, abs_eq_zero, Rat.cast_eq_zero, Algebra.norm_eq_zero_iff]
  contrapose! hx'
  rw [hx', map_zero]

theorem mixedEmbedding.norm_unit (u : (ùìû K)À£) :
    norm (mixedEmbedding K u) = 1 := by
  rw [norm_eq_norm, show |(Algebra.norm ‚Ñö) (u : K)| = 1
      by exact NumberField.isUnit_iff_norm.mp (Units.isUnit u), Rat.cast_one]

end NumberField

end Basic

noncomputable section UnitSMul

@[simps]
instance NumberField.mixedEmbedding.unitSMul : SMul (ùìû K)À£ (E K) where
  smul := fun u x ‚Ü¶ (mixedEmbedding K u) * x

instance : MulAction (ùìû K)À£ (E K) where
  one_smul := fun _ ‚Ü¶ by simp_rw [HSMul.hSMul, SMul.smul, Units.coe_one, map_one, one_mul]
  mul_smul := fun _ _ _ ‚Ü¶ by simp_rw [HSMul.hSMul, SMul.smul, Units.coe_mul, map_mul, mul_assoc]

instance : SMulZeroClass (ùìû K)À£ (E K) where
  smul_zero := fun _ ‚Ü¶ by simp_rw [HSMul.hSMul, SMul.smul, mul_zero]

instance : SMul (ùìû K) (ùìû K) := Algebra.toSMul

theorem NumberField.mixedEmbedding.unitSMul_iff_smul {x y : (ùìû K)} {u : (ùìû K)À£} :
    u ‚Ä¢ mixedEmbedding K x = mixedEmbedding K y ‚Üî u ‚Ä¢ x = y := by
  rw [unitSMul_smul, ‚Üê map_mul, Units.smul_def, smul_eq_mul, Function.Injective.eq_iff,
    ‚Üê  Submonoid.coe_mul, Subtype.mk_eq_mk]
  exact mixedEmbedding_injective K

@[simp]
theorem  NumberField.mixedEmbedding.norm_unitSMul (u : (ùìû K)À£) (x : E K) :
    norm (u ‚Ä¢ x) = norm x := by
  rw [unitSMul_smul, map_mul, norm_eq_norm, show |(Algebra.norm ‚Ñö) (u : K)| = 1
      by exact NumberField.isUnit_iff_norm.mp (Units.isUnit u), Rat.cast_one, one_mul]

end UnitSMul

namespace NumberField.mixedEmbedding

noncomputable section logMap

open NumberField.Units

def logMap (x : E K) : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù :=
  fun w ‚Ü¶
    if hw : IsReal w.val then
      Real.log ‚Äñx.1 ‚ü®w.val, hw‚ü©‚Äñ - Real.log (norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π
    else
      2 * (Real.log ‚Äñx.2 ‚ü®w.val, not_isReal_iff_isComplex.mp hw‚ü©‚Äñ -
        Real.log (norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π)

theorem logMap_eq_logEmbedding (u : (ùìû K)À£) :
    logMap (mixedEmbedding K u) = logEmbedding K u := by
  ext
  simp_rw [logMap, norm_unit, Real.log_one, zero_mul, sub_zero, logEmbedding, AddMonoidHom.coe_mk,
    ZeroHom.coe_mk, mult, Nat.cast_ite, ite_mul, Nat.cast_one, one_mul, Nat.cast_ofNat,
    mixedEmbedding, RingHom.prod_apply, Pi.ringHom_apply, norm_embedding_eq,
    norm_embedding_eq_of_isReal]
  rfl

theorem logMap_zero : logMap (0 : E K) = 0 := by
  ext
  simp_rw [logMap, Prod.fst_zero, Prod.snd_zero, map_zero, Pi.zero_apply, norm_zero, Real.log_zero,
    zero_mul, sub_zero, mul_zero, dite_eq_ite, ite_self]

theorem logMap_torsion_unitSMul_eq (x : E K) {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K) :
    logMap (Œ∂ ‚Ä¢ x) = logMap x := by
  ext
  simp_rw [logMap, unitSMul_smul, Prod.fst_mul, Prod.snd_mul, Pi.mul_apply, norm_mul, map_mul,
    norm_eq_norm, mixedEmbedding, RingHom.prod_apply, Pi.ringHom_apply,
    show |(Algebra.norm ‚Ñö) (Œ∂ : K)| = 1 by exact NumberField.isUnit_iff_norm.mp (Units.isUnit Œ∂),
    Rat.cast_one, one_mul, norm_embedding_eq, norm_embedding_eq_of_isReal, (mem_torsion K).mp hŒ∂,
    one_mul]

theorem logMap_mul {x y : E K} (hx : norm x ‚â† 0) (hy : norm y ‚â† 0) :
    logMap (x * y) = logMap x + logMap y := by
  ext w
  simp_rw [Pi.add_apply, logMap]
  split_ifs with hw
  ¬∑ rw [Prod.fst_mul, Pi.mul_apply, norm_mul, map_mul, Real.log_mul, Real.log_mul hx hy, add_mul]
    ¬∑ ring
    ¬∑ exact _root_.norm_ne_zero_iff.mpr <| (norm_ne_zero_iff.mp hx).1 ‚ü®_, hw‚ü©
    ¬∑ exact _root_.norm_ne_zero_iff.mpr <| (norm_ne_zero_iff.mp hy).1 ‚ü®_, hw‚ü©
  ¬∑ replace hw := not_isReal_iff_isComplex.mp hw
    rw [Prod.snd_mul, Pi.mul_apply, norm_mul, map_mul, Real.log_mul, Real.log_mul hx hy, add_mul]
    ¬∑ ring
    ¬∑ exact _root_.norm_ne_zero_iff.mpr <| (norm_ne_zero_iff.mp hx).2 ‚ü®_, hw‚ü©
    ¬∑ exact _root_.norm_ne_zero_iff.mpr <| (norm_ne_zero_iff.mp hy).2 ‚ü®_, hw‚ü©

theorem logMap_unitSMul_eq (u : (ùìû K)À£) {x : E K} (hx : norm x ‚â† 0) :
    logMap (u ‚Ä¢ x) = logEmbedding K u + logMap x := by
  rw [unitSMul_smul, logMap_mul (by rw [norm_unit]; norm_num) hx, logMap_eq_logEmbedding]

theorem logMap_smul_eq {x : E K} {c : ‚Ñù} (hx : norm x ‚â† 0) (hc : c ‚â† 0) :
    logMap (c ‚Ä¢ x) = logMap x := by
  rw [show c ‚Ä¢ x = ((fun _ ‚Ü¶ c, fun _ ‚Ü¶ c) : (E K)) * x by rfl, logMap_mul _ hx, add_left_eq_self]
  ext
  have hr : (finrank ‚Ñö K : ‚Ñù) ‚â† 0 :=  Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)
  simp_rw [logMap, Pi.zero_apply, norm_const, Real.log_pow, mul_comm, inv_mul_cancel_left‚ÇÄ hr,
    Real.norm_eq_abs, Complex.norm_eq_abs,  Complex.abs_ofReal, sub_self, mul_zero, dite_eq_ite,
    ite_self]
  rw [norm_const]
  exact pow_ne_zero _ (abs_ne_zero.mpr hc)

end logMap

noncomputable section fundamentalCone

open NumberField.Units

variable (K)

def fundamentalCone : Set (E K) := by
  let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
  exact logMap‚Åª¬π' (Zspan.fundamentalDomain B)

namespace fundamentalCone

protected theorem zero_mem : 0 ‚àà fundamentalCone K := by
  simp_rw [fundamentalCone, Set.mem_preimage, Zspan.mem_fundamentalDomain, logMap_zero, map_zero,
    Finsupp.coe_zero, Pi.zero_apply, Set.left_mem_Ico, zero_lt_one, implies_true]

variable {K}

theorem smul_mem_of_mem {x : E K} (hx : norm x ‚â† 0) (hx' : x ‚àà fundamentalCone K)
    (c : ‚Ñù) : c ‚Ä¢ x ‚àà fundamentalCone K := by
  by_cases hc : c = 0
  ¬∑ rw [hc, zero_smul]
    exact fundamentalCone.zero_mem K
  ¬∑ rwa [fundamentalCone, Set.mem_preimage, logMap_smul_eq hx hc]

theorem exists_unitSMul_mem {x : E K} (hx : norm x ‚â† 0) :
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ x ‚àà fundamentalCone K := by
  let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù
  rsuffices ‚ü®‚ü®_, ‚ü®u, _, rfl‚ü©‚ü©, hu‚ü© : ‚àÉ e : unitLattice K, e + logMap x ‚àà Zspan.fundamentalDomain B
  ¬∑ exact ‚ü®u, by rwa [fundamentalCone, Set.mem_preimage, logMap_unitSMul_eq u hx]‚ü©
  ¬∑ obtain ‚ü®‚ü®e, h‚ÇÅ‚ü©, h‚ÇÇ, -‚ü© := Zspan.exist_unique_vadd_mem_fundamentalDomain B (logMap x)
    exact ‚ü®‚ü®e, by rwa [‚Üê Basis.ofZlatticeBasis_span ‚Ñù (unitLattice K)]‚ü©, h‚ÇÇ‚ü©

theorem torsion_unitSMul_mem_of_mem {x : E K}
    (hx' : x ‚àà fundamentalCone K) {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K) :
    Œ∂ ‚Ä¢ x ‚àà fundamentalCone K := by
  rwa [fundamentalCone, Set.mem_preimage, logMap_torsion_unitSMul_eq _ hŒ∂]

theorem unitSMul_mem_iff {x : E K} (hx : norm x ‚â† 0) (hx' : x ‚àà fundamentalCone K) (u : (ùìû K)À£) :
    u ‚Ä¢ x ‚àà fundamentalCone K ‚Üî u ‚àà torsion K := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê logEmbedding_eq_zero_iff]
    let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù
    refine (Subtype.mk_eq_mk (h := ?_) (h' := ?_)).mp <|
      ExistsUnique.unique (Zspan.exist_unique_vadd_mem_fundamentalDomain B (logMap x)) ?_ ?_
    ¬∑ change logEmbedding K u ‚àà (Submodule.span ‚Ñ§ (Set.range B)).toAddSubgroup
      rw [Basis.ofZlatticeBasis_span ‚Ñù (unitLattice K)]
      exact ‚ü®u, trivial, rfl‚ü©
    ¬∑ exact Submodule.zero_mem _
    ¬∑ rwa [fundamentalCone, Set.mem_preimage, logMap_unitSMul_eq _ hx] at h
    ¬∑ rw [AddSubmonoid.mk_vadd, vadd_eq_add, zero_add]
      rwa [fundamentalCone, Set.mem_preimage] at hx'
  ¬∑ exact torsion_unitSMul_mem_of_mem hx' h

variable (K) in
def integralPoints : Set (E K) := (fundamentalCone K) ‚à© (mixedEmbedding K '' (ùìû K))

theorem exists_unitSMul_mem_integralPoints {x : E K} (hx : x ‚àà mixedEmbedding K '' (ùìû K)) :
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ x ‚àà integralPoints K := by
  by_cases hx' : x = 0
  ¬∑ simp_rw [hx', smul_zero]
    exact ‚ü®1, fundamentalCone.zero_mem _, ‚ü®0, zero_mem _, map_zero _‚ü©‚ü©
  ¬∑ replace hx' : norm x ‚â† 0 :=
      norm_ne_zero (Set.mem_range_of_mem_image (mixedEmbedding K) _ hx) hx'
    obtain ‚ü®u, hu‚ü© := exists_unitSMul_mem hx'
    obtain ‚ü®x, ‚ü®hx‚ÇÅ, ‚ü®_, rfl‚ü©‚ü©‚ü© := hx
    refine ‚ü®u, hu, ?_‚ü©
    rw [unitSMul_smul, ‚Üê map_mul]
    exact ‚ü®u * x,  mul_mem (SetLike.coe_mem (u : ùìû K)) hx‚ÇÅ, rfl‚ü©

theorem exists_unique_preimage_of_integralPoint {x : E K} (hx : x ‚àà integralPoints K) :
    ‚àÉ! a : (ùìû K), mixedEmbedding K a = x := by
  refine ‚ü®‚ü®hx.2.choose, hx.2.choose_spec.1‚ü©, hx.2.choose_spec.2, fun x h ‚Ü¶ ?_‚ü©
  rw [Subtype.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff, h, hx.2.choose_spec.2]

def preimageOfIntegralPoints (a : integralPoints K) : (ùìû K) :=
  ‚ü®a.prop.2.choose, a.prop.2.choose_spec.1‚ü©

theorem image_preimageOfIntegralPoints_eq (a : integralPoints K) :
    mixedEmbedding K (preimageOfIntegralPoints a) = a := a.prop.2.choose_spec.2

theorem torsion_unitSMul_mem_integralPoints {x : E K} {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K)
    (hx : x ‚àà integralPoints K) :
    Œ∂ ‚Ä¢ x ‚àà integralPoints K := by
  obtain ‚ü®a, ha, rfl‚ü© := hx.2
  refine ‚ü®torsion_unitSMul_mem_of_mem hx.1 hŒ∂, ‚ü®Œ∂ * a, ?_, ?_‚ü©‚ü©
  ¬∑ exact mul_mem (SetLike.coe_mem (Œ∂ : (ùìû K))) ha
  ¬∑ rw [unitSMul_smul, map_mul]

@[simps]
instance integralPoints_torsionSMul: SMul (torsion K) (integralPoints K) where
  smul := fun ‚ü®Œ∂, hŒ∂‚ü© ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®Œ∂ ‚Ä¢ x,  torsion_unitSMul_mem_integralPoints hŒ∂ hx‚ü©

instance : MulAction (torsion K) (integralPoints K) where
  one_smul := fun _ ‚Ü¶ by
    rw [Subtype.mk_eq_mk, integralPoints_torsionSMul_smul_coe, OneMemClass.coe_one, one_smul]
  mul_smul := fun _ _ _ ‚Ü¶ by
    rw [Subtype.mk_eq_mk]
    simp_rw [integralPoints_torsionSMul_smul_coe, Submonoid.coe_mul, mul_smul]

-- We need to remind Lean of this instance to avoid a timeout
instance : MulAction (ùìû K) (ùìû K) := MulActionWithZero.toMulAction

variable (K) in
def integralPointsToModUnits (a : integralPoints K) :
    Quotient (MulAction.orbitRel (ùìû K)À£ (ùìû K)) := Quotient.mk _ (preimageOfIntegralPoints a)

theorem integralPointsToModUnits_apply (a : integralPoints K) :
  (integralPointsToModUnits K a) = ‚ü¶preimageOfIntegralPoints a‚üß := rfl

variable (K) in
theorem integralPointsToModUnits_surjective :
    Function.Surjective (integralPointsToModUnits K) := by
  rintro ‚ü®x‚ü©
  obtain ‚ü®u, hu‚ü© : ‚àÉ u : (ùìû K)À£, u ‚Ä¢ (mixedEmbedding K x) ‚àà integralPoints K  :=
      exists_unitSMul_mem_integralPoints ‚ü®x, SetLike.coe_mem x, rfl‚ü©
  refine ‚ü®‚ü®u ‚Ä¢ (mixedEmbedding K x), hu‚ü©, Quotient.sound ‚ü®u, ?_‚ü©‚ü©
  rw [‚Üê unitSMul_iff_smul, image_preimageOfIntegralPoints_eq]

-- We need to remind Lean of this instance to avoid a timeout
instance : MulAction (ùìû K) (ùìû K) := MulActionWithZero.toMulAction

theorem integralPointsToModUnits_eq_iff (a b : integralPoints K) :
    integralPointsToModUnits K a = integralPointsToModUnits K b ‚Üî
      ‚àÉ Œ∂ : torsion K, Œ∂ ‚Ä¢ b = a := by
  rw [integralPointsToModUnits_apply, integralPointsToModUnits_apply]
  rw [show ‚ü¶preimageOfIntegralPoints a‚üß = ‚ü¶preimageOfIntegralPoints b‚üß ‚Üî
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ preimageOfIntegralPoints b = preimageOfIntegralPoints a by
    rw [@Quotient.eq]; rfl]
  simp_rw [‚Üê unitSMul_iff_smul, image_preimageOfIntegralPoints_eq, Subtype.ext_iff,
    integralPoints_torsionSMul_smul_coe]
  refine ‚ü®fun ‚ü®u, h‚ü© ‚Ü¶ ?_, fun ‚ü®‚ü®Œ∂, _‚ü©, h‚ü© ‚Ü¶ ‚ü®Œ∂, h‚ü©‚ü©
  by_cases hb : (b : E K) = 0
  ¬∑ rw [hb, smul_zero] at h
    exact ‚ü®1, by rw [hb, ‚Üê h, OneMemClass.coe_one, smul_zero]‚ü©
  ¬∑ have hnz : norm (b : E K) ‚â† 0 :=
      mixedEmbedding.norm_ne_zero ‚ü®b.prop.2.choose, b.prop.2.choose_spec.2‚ü© hb
    refine ‚ü®‚ü®u, (unitSMul_mem_iff hnz b.prop.1 u).mp ?_‚ü©, h‚ü©
    rw [h]
    exact a.prop.1

variable (K) in
def integralPointsQuoEquivModUnits :
    Quotient (MulAction.orbitRel (torsion K) (integralPoints K)) ‚âÉ
      Quotient (MulAction.orbitRel (ùìû K)À£ (ùìû K)) := by
  refine Equiv.ofBijective (Quotient.lift (integralPointsToModUnits K) ?_) ‚ü®?_, ?_‚ü©
  ¬∑ exact fun a b ‚Ü¶ (integralPointsToModUnits_eq_iff a b).mpr
  ¬∑ convert Setoid.ker_lift_injective (integralPointsToModUnits K)
    all_goals
    ¬∑ ext a b
      exact (integralPointsToModUnits_eq_iff a b).symm
  ¬∑ rw [Quot.surjective_lift]
    exact integralPointsToModUnits_surjective K

variable (K) in
def integralPointsQuoEquivIsPrincipal :
    Quotient (MulAction.orbitRel (torsion K) (integralPoints K)) ‚âÉ
      {I : Ideal (ùìû K) // Submodule.IsPrincipal I} :=
  (integralPointsQuoEquivModUnits K).trans (Ideal.equivIsPrincipal (ùìû K))

theorem integralPointsQuoEquivIsPrincipal_apply (a : integralPoints K) :
    integralPointsQuoEquivIsPrincipal K ‚ü¶a‚üß =
      Ideal.span {preimageOfIntegralPoints a} := by
  rw [integralPointsQuoEquivIsPrincipal, Equiv.trans_apply]
  erw [Ideal.equivIsPrincipal_apply]

def integralPointsQuoNorm :
    Quotient (MulAction.orbitRel (torsion K) (integralPoints K)) ‚Üí ‚Ñù := by
  refine Quotient.lift ?_ ?_
  ¬∑ exact fun x ‚Ü¶ norm (x : E K)
  ¬∑ intro a b ‚ü®‚ü®u, _‚ü©, hu‚ü©
    rw [Subtype.ext_iff, integralPoints_torsionSMul_smul_coe] at hu
    rw [‚Üê hu]
    exact norm_unitSMul u b

theorem integralPointsQuoNorm_apply (a : integralPoints K) :
    integralPointsQuoNorm ‚ü¶a‚üß = |Algebra.norm ‚Ñ§ (preimageOfIntegralPoints a)| := by
  rw [integralPointsQuoNorm, @Quotient.lift_mk, ‚Üê image_preimageOfIntegralPoints_eq,
    norm_eq_norm, ‚Üê Algebra.coe_norm_int, Rat.cast_abs, Rat.cast_intCast, Int.cast_abs]

def integralPointsQuoOrbitEquiv {q : Quotient (MulAction.orbitRel (torsion K) (integralPoints K))}
    (hq : integralPointsQuoNorm q ‚â† 0) :
    (MulAction.orbitRel.Quotient.orbit q) ‚âÉ (torsion K) := by
  rw [MulAction.orbitRel.Quotient.orbit_eq_orbit_out _ Quotient.out_eq', MulAction.orbit]
  refine (Equiv.ofInjective _ fun _ _ h ‚Ü¶ ?_).symm
  suffices (preimageOfIntegralPoints (Quotient.out' q) : K) ‚â† 0 by
    simp_rw [Subtype.ext_iff, integralPoints_torsionSMul_smul_coe, unitSMul_smul,
      ‚Üê image_preimageOfIntegralPoints_eq, ‚Üê map_mul, (mixedEmbedding_injective K).eq_iff] at h
    exact_mod_cast (mul_left_inj' this).mp h
  contrapose! hq
  rw [show q = ‚ü¶Quotient.out' q‚üß from (Quotient.out_eq' q).symm, integralPointsQuoNorm_apply,
    Int.cast_abs, abs_eq_zero, Int.cast_eq_zero, Algebra.norm_eq_zero_iff]
  exact_mod_cast hq

variable (K) in
def integralPointsQuoNormEquivIsPrincipal (n : ‚Ñï) :
    { x : Quotient (MulAction.orbitRel (torsion K) (integralPoints K)) //
      integralPointsQuoNorm x = n } ‚âÉ
      { I : Ideal (ùìû K) // Submodule.IsPrincipal I ‚àß Ideal.absNorm I = n } := by
  refine Equiv.trans ?_ (Equiv.subtypeSubtypeEquivSubtypeInter _ _)
  refine Equiv.subtypeEquiv (integralPointsQuoEquivIsPrincipal K) ?_
  rintro ‚ü®_‚ü©
  erw [integralPointsQuoEquivIsPrincipal_apply, integralPointsQuoNorm_apply]
  rw [Ideal.absNorm_span_singleton, Int.abs_eq_natAbs, Int.cast_natCast, Nat.cast_inj]

variable (K) in
def integralPointsQuoNormProdEquiv {n : ‚Ñï} (hn : 1 ‚â§ n) :
    { x // integralPointsQuoNorm (K := K) x = n } √ó (torsion K) ‚âÉ
        { a : integralPoints K // norm (a : E K) = n } := by
  let f : { a : integralPoints K // norm (a : E K) = n } ‚Üí
      { x // integralPointsQuoNorm (K := K) x = n } := by
    rintro ‚ü®a, ha‚ü©
    refine ‚ü®‚ü¶a‚üß, by rw [‚Üê ha]; rfl‚ü©
  let e := Equiv.sigmaFiberEquiv (Œ± := { a : integralPoints K // norm (a : E K) = n })
    (Œ≤ := { x // integralPointsQuoNorm (K := K) x = n }) f
  refine Equiv.trans ?_ e
  refine (Equiv.sigmaEquivProdOfEquiv ?_).symm
  rintro ‚ü®q, hq‚ü©
  have hq' : integralPointsQuoNorm q ‚â† 0 := by
    rw [hq]
    rw [Nat.cast_ne_zero]
    linarith
  refine Equiv.trans ?_ (integralPointsQuoOrbitEquiv hq')
  simp_rw [Subtype.ext_iff]
  refine Equiv.trans (Equiv.subtypeEquivRight fun _ ‚Ü¶
    MulAction.orbitRel.Quotient.mem_orbit.symm) ?_
  refine Equiv.subtypeSubtypeEquivSubtype (q := fun x ‚Ü¶ x ‚àà MulAction.orbitRel.Quotient.orbit q) ?_
  rintro a ha
  rw [‚Üê hq, integralPointsQuoNorm]
  rw [MulAction.orbitRel.Quotient.mem_orbit] at ha
  rw [‚Üê ha]
  simp_rw [Quotient.mk''_eq_mk]
  simp_rw [Quotient.lift_mk]

theorem main {n : ‚Ñï} (hn : 1 ‚â§ n) :
    Nat.card {I : Ideal (ùìû K) // Submodule.IsPrincipal I ‚àß Ideal.absNorm I = n} *
      Fintype.card (torsion K) = Nat.card ({a : integralPoints K // norm (a : E K) = n}) := by
  rw [‚Üê Nat.card_congr (integralPointsQuoNormEquivIsPrincipal K n)]
  rw [‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  refine Nat.card_congr ?_
  exact integralPointsQuoNormProdEquiv K hn

end fundamentalCone

section InnerProductSpace

open scoped Classical

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K` as an Euclidean space. -/
local notation "E'" K =>
    (WithLp 2 ((EuclideanSpace ‚Ñù {w : InfinitePlace K // IsReal w}) √ó
      (EuclideanSpace ‚ÑÇ {w : InfinitePlace K // IsReal w})))

example : (E' K) ‚âÉL[‚Ñù] (E K) := by
  refine ContinuousLinearEquiv.prod ?_ ?_
  exact EuclideanSpace.equiv _ ‚Ñù
  

end InnerProductSpace

#exit

open Filter Topology MeasureTheory Submodule

example :
  Tendsto (fun s : ‚Ñù ‚Ü¶
      Nat.card {I : Ideal (ùìû K) // Submodule.IsPrincipal I ‚àß Ideal.absNorm I = s} / s)
      atTop (ùìù ((volume {x ‚àà fundamentalCone K | norm x ‚â§ 1}).toReal /
        Zlattice.covolume (span ‚Ñ§ (Set.range (latticeBasis K))).toAddSubgroup)) := by
  letI : InnerProductSpace ‚Ñù (E K) := by
    refine InnerProductSpace.ofNorm ‚Ñù ?_
    sorry
  have : IsZlattice ‚Ñù (toAddSubgroup (span ‚Ñ§ (Set.range ‚áë(latticeBasis K)))) := sorry
  have := cone‚ÇÇ (span ‚Ñ§ (Set.range (latticeBasis K))).toAddSubgroup
    (X := fundamentalCone K) (F := fun x ‚Ü¶ norm x) ?_ ?_ ?_ ?_
  convert this using 3
  sorry
