-- import Mathlib.NumberTheory.NumberField.CanonicalEmbedding.FundamentalCone
import Mathlib.Topology.Algebra.Module.Basic

def ContinuousLinearEquiv.piCongrRight {R : Type*} [Semiring R] {Œπ : Type*} {M : Œπ ‚Üí Type*}
    [‚àÄ i, TopologicalSpace (M i)] [‚àÄ i, AddCommMonoid (M i)] [‚àÄ i, Module R (M i)] {N : Œπ ‚Üí Type*}
    [‚àÄ i, TopologicalSpace (N i)] [‚àÄ i, AddCommMonoid (N i)] [‚àÄ i, Module R (N i)]
    (f : (i : Œπ) ‚Üí M i ‚âÉL[R] N i) :
    ((i : Œπ) ‚Üí M i) ‚âÉL[R] (i : Œπ) ‚Üí N i :=
  { LinearEquiv.piCongrRight fun i ‚Ü¶ f i with
    continuous_toFun := by
      exact continuous_pi fun i ‚Ü¶ (f i).continuous_toFun.comp (continuous_apply i)
    continuous_invFun := by
      exact continuous_pi fun i => (f i).continuous_invFun.comp (continuous_apply i) }

@[simp]
theorem ContinuousLinearEquiv.piCongrRight_apply {R : Type*} [Semiring R] {Œπ : Type*}
    {M : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (M i)] [‚àÄ i, AddCommMonoid (M i)] [‚àÄ i, Module R (M i)]
    {N : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (N i)] [‚àÄ i, AddCommMonoid (N i)] [‚àÄ i, Module R (N i)]
    (f : (i : Œπ) ‚Üí M i ‚âÉL[R] N i) (m : (i : Œπ) ‚Üí M i) (i : Œπ) :
    ContinuousLinearEquiv.piCongrRight f m i = (f i) (m i) := rfl

def ContinuousLinearEquiv.neg (R : Type*) {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] :
    M ‚âÉL[R] M :=
  { LinearEquiv.neg R with
    continuous_toFun := continuous_neg
    continuous_invFun := continuous_neg }

@[simp]
theorem ContinuousLinearEquiv.coe_neg {R : Type*} {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] :
    ‚áë(neg R : M ‚âÉL[R] M) = -id := rfl

theorem ContinuousLinearEquiv.neg_apply {R : Type*} {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] (x : M) : neg R x = -x := by simp

@[simp]
theorem ContinuousLinearEquiv.symm_neg {R : Type*} {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] :
    (neg R : M ‚âÉL[R] M).symm = neg R := rfl

#exit

  { LinearEquiv.piCongrRight fun i ‚Ü¶ (f i).toLinearEquiv with
    toFun := sorry
  }
-- piCongrRight_apply
-- piCongrRight_apply
#exit
open MeasureTheory Classical

example {Œπ : Type*} [Fintype Œπ] {E F : Type*} [MeasureSpace E] [MeasureSpace F]
    [hE : TopologicalSpace E] [BorelSpace E]
    [SFinite (volume : Measure E)] [SFinite (volume : Measure F)]
    (e : Œπ ‚Üí E ‚âÉ·µê F) (h : ‚àÄ i, MeasurePreserving (e i) volume volume) :
    MeasurePreserving (MeasurableEquiv.piCongrRight e) volume volume := by
  convert ((MeasurableEquiv.piCongrRight e).symm.measurable.measurePreserving volume).symm
  have := pi_eq_generateFrom (T := fun _ : Œπ ‚Ü¶ hE)
  let A := {g : Set (Œπ ‚Üí E) | ‚àÉ (s : Œπ ‚Üí Set E) (i : Finset Œπ),
    (‚àÄ a ‚àà i, IsOpen (s a)) ‚àß g = i.toSet.pi s}
  refine Measure.ext_of_generateFrom_of_cover _ _ _ _ _ _ _
#exit


def MeasurePreserving.piCongrRight {Œ¥ Œ¥' : Type*} {œÄ : Œ¥' ‚Üí Type*} {œÄ' : Œ¥' ‚Üí Type*}
    [(x : Œ¥') ‚Üí MeasureSpace (œÄ x)] [(x : Œ¥') ‚Üí MeasureSpace (œÄ' x)]
    (e : (a : Œ¥') ‚Üí œÄ a ‚Üí œÄ' a) (h : ‚àÄ a : Œ¥', MeasurePreserving (e a) volume volume) :
    MeasurePreserving
      (fun a x ‚Ü¶ x (e a) (x a) : ((a : Œ¥') ‚Üí œÄ a) ‚Üí ((a : Œ¥') ‚Üí œÄ' a)) volume volume := sorry

#exit

section FDeriv

open Classical BigOperators

variable {Œπ : Type*} [Fintype Œπ]

example (p : Œπ ‚Üí ‚Ñù) : sorry := by
  have := fun i ‚Ü¶ HasFDerivAt.const_rpow (E := Œπ ‚Üí ‚Ñù) (c := (2:‚Ñù)) (f := fun x ‚Ü¶ x i)
      (f' := ContinuousLinearMap.proj i) (x := p) (hasFDerivAt_apply i p) zero_lt_two
  have := HasFDerivAt.finset_prod (Œπ := Œπ) (u := Finset.univ) (fun i _ ‚Ü¶ this i)


#exit

  have := @HasFDerivAt.finset_prod ‚Ñù _ (E := Œπ ‚Üí ‚Ñù) _ _ Œπ ‚Ñù _ _ Finset.univ (fun i x ‚Ü¶ 2 ^ (x i))
    ?_ _ p ?_
  ¬∑ sorry
  ¬∑ sorry
  ¬∑ intro i _
    have := HasFDerivAt.const_rpow (E := Œπ ‚Üí ‚Ñù) (c := (2:‚Ñù)) (f := fun x ‚Ü¶ x i)
      (f' := ContinuousLinearMap.proj i) (x := p) (hasFDerivAt_apply i p) zero_lt_two
    simp at this

--      ((2 ^ (p i) * Real.log 2) ‚Ä¢ ContinuousLinearMap.proj i)
    -- ((2 ^ (p i) * Real.log 2) ‚Ä¢ ContinuousLinearMap.proj )



#exit

example {ùïú n m : Type*} [NontriviallyNormedField ùïú] [CompleteSpace ùïú] [Fintype n] [Fintype m]
    (f : (n ‚Üí ùïú) ‚Üí (n ‚Üí ùïú))
    (f' : (n ‚Üí ùïú) ‚Üí n ‚Üí n ‚Üí ùïú) (x : (n ‚Üí ùïú)) : sorry := by
  let M := (Matrix.of fun i j ‚Ü¶ f' x i j)
  let g := Matrix.toLin' M
  let L := LinearMap.toContinuousLinearMap (Matrix.toLin' M)
  have s‚ÇÅ : ‚àÄ i, (ContinuousLinearMap.proj i).comp L =
     ‚àë k : n, M i k ‚Ä¢ ContinuousLinearMap.proj k := by
--    LinearMap.toContinuousLinearMap (Fintype.total ùïú ùïú (fun k ‚Ü¶ M i k)) := by
    intro i
    ext
    simp [g, L]
    rfl

  have : HasFDerivAt f L x := by
    rw [hasFDerivAt_pi']
    intro i
    simp [L]
    rw [s‚ÇÅ i]

    sorry

  sorry

--    (hd : ‚àÄ i j x, HasDerivAt (f i j) (f' i j) x) :
--    sorry := sorry

#exit

end FDeriv

section Topo

open Set

theorem closure_lt_eq_le {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderClosedTopology Œ±]
    [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±}  {g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, f x = g x ‚Üí ‚àÉ·∂† y in nhds x, f y < g y) :
    closure {b | f b < g b} = {b | f b ‚â§ g b} := by
  refine le_antisymm (closure_lt_subset_le hf hg) fun x hx ‚Ü¶ ?_
  obtain (hx‚ÇÅ| hx‚ÇÇ) := le_iff_eq_or_lt.mp hx
  ¬∑ exact mem_closure_iff_frequently.mpr (h hx‚ÇÅ)
  ¬∑ exact subset_closure hx‚ÇÇ

theorem frontier_le_eq_eq {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} [TopologicalSpace Œ≤] (hf : Continuous f)  (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, g x = f x ‚Üí ‚àÉ·∂† y in nhds x, g y < f y) :
    frontier {b | f b ‚â§ g b} = {b | f b = g b} := by
  rw [frontier_eq_closure_inter_closure, closure_le_eq hf hg]
  ext x
  rw [show {x | f x ‚â§ g x}·∂ú = {x | g x < f x} by ext; simp, closure_lt_eq_le hg hf h]
  simp only [Set.mem_inter_iff, Set.mem_setOf_eq, le_antisymm_iff]

theorem frontier_lt_eq_eq {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} [TopologicalSpace Œ≤] (hf : Continuous f)  (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, f x = g x ‚Üí ‚àÉ·∂† y in nhds x, f y < g y) :
    frontier {b | f b < g b} = {b | f b = g b} := by
  simpa only [eq_comm, ‚Üê not_lt, ‚Üê Set.compl_setOf, frontier_compl] using frontier_le_eq_eq hg hf h

end Topo

#exit

-- section Module

-- variable {Œπ : Type*} [IsEmpty Œπ] (M : Type*) [AddCommMonoid M] {R : Type*} [Semiring R] [Module R M]
-- variable (b : Basis Œπ R M)

-- example : Subsingleton M := by
--   have : Fintype Œπ := Fintype.ofIsEmpty
--   exact subsingleton_of_forall_eq 0 fun y ‚Ü¶ by rw [‚Üê b.sum_repr y, Fintype.sum_empty]

-- end Module

section PiLp

open Bornology Filter BigOperators

variable {Œπ : Type*} [Fintype Œπ] {R M : Type*} [NormedDivisionRing R] [SeminormedAddCommGroup M]
  [Module R M] [BoundedSMul R M]

theorem Bornology.isBoundedOfBoundedCoeff (v : Œπ ‚Üí M) {s : Set R} (h : IsBounded s) :
    IsBounded (Set.range fun (c : Œπ ‚Üí s) ‚Ü¶ ‚àë i, (c i : R) ‚Ä¢ v i) := by
  generalize Finset.univ (Œ± := Œπ) = t
  obtain ‚ü®C, hC‚ü© : ‚àÉ C, ‚àÄ x ‚àà s, ‚Äñx‚Äñ ‚â§ C := isBounded_iff_forall_norm_le.mp h
  induction t using Finset.cons_induction_on with
  | h‚ÇÅ =>
      exact Metric.isBounded_range_iff.mpr ‚ü®0, by simp‚ü©
  | @h‚ÇÇ a _ h_ne h_bd =>
      rw [isBounded_iff_forall_norm_le] at h_bd ‚ä¢
      obtain ‚ü®C‚ÇÅ, hC‚ÇÅ‚ü© := h_bd
      refine ‚ü®C * ‚Äñv a‚Äñ + C‚ÇÅ, fun x ‚ü®c, hc‚ü© ‚Ü¶ ?_‚ü©
      simp_rw [‚Üê hc, Finset.sum_cons]
      refine le_trans (norm_add_le _ _) ?_
      rw [norm_smul]
      gcongr
      ¬∑ exact hC (c a) (c a).prop
      ¬∑ exact hC‚ÇÅ _ ‚ü®c, rfl‚ü©

end PiLp

section FundamentalCone

open NumberField NumberField.InfinitePlace NumberField.mixedEmbedding MeasureTheory
  BigOperators Submodule Bornology NumberField.Units NumberField.Units.dirichletUnitTheorem

local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

variable (K : Type*) [Field K] [NumberField K]

/-- Docs. -/
abbrev S : Set (E K) := {x ‚àà fundamentalCone K | mixedEmbedding.norm x ‚â§ 1}

/-- Docs. -/
abbrev S‚ÇÅ : Set (E K) := {x ‚àà fundamentalCone K | mixedEmbedding.norm x = 1}

variable {K} in
@[simp]
theorem logMap_eq_of_norm_one_at_isReal {x : E K} (hx : mixedEmbedding.norm x = 1)
    {w : InfinitePlace K} (hw : IsReal w) (hw' : w ‚â† w‚ÇÄ) :
    logMap x ‚ü®w, hw'‚ü© = Real.log ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ := by
  rw [logMap, dif_pos hw, hx, Real.log_one, zero_mul, sub_zero]

variable {K} in
@[simp]
theorem logMap_eq_of_norm_one_at_isComplex {x : E K} (hx : mixedEmbedding.norm x = 1)
    {w : InfinitePlace K} (hw : IsComplex w) (hw' : w ‚â† w‚ÇÄ) :
    logMap x ‚ü®w, hw'‚ü© = 2 * Real.log ‚Äñx.2 ‚ü®w, hw‚ü©‚Äñ := by
  rw [logMap, dif_neg (not_isReal_iff_isComplex.mpr hw), hx, Real.log_one, zero_mul, sub_zero]

variable {K} in
open Classical in
noncomputable def atPlace (w : InfinitePlace K) : (E K) ‚Üí*‚ÇÄ ‚Ñù where
  toFun x := if hw : IsReal w then ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ else ‚Äñx.2 ‚ü®w, not_isReal_iff_isComplex.mp hw‚ü©‚Äñ
  map_zero' := by simp
  map_one' := by simp
  map_mul' x y := by split_ifs <;> simp

theorem atPlace_apply_isReal (x : E K) {w : InfinitePlace K} (hw : IsReal w) :
    atPlace w x = ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ := by
  rw [atPlace, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, dif_pos]

theorem atPlace_apply_isComplex (x : E K) {w : InfinitePlace K} (hw : IsComplex w) :
    atPlace w x = ‚Äñx.2 ‚ü®w, hw‚ü©‚Äñ := by
  rw [atPlace, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, dif_neg (not_isReal_iff_isComplex.mpr hw)]



set_option maxHeartbeats 5000000 in
theorem norm_apply' (x : E K) :
    mixedEmbedding.norm x = ‚àè w, (atPlace x w) ^ (mult w) := by
  classical
  simp_rw [mixedEmbedding.norm_apply, atPlace, dite_pow, Finset.univ.prod_dite]
  simp_rw [‚Üê Finset.prod_coe_sort_eq_attach]
  rw [‚Üê Finset.prod_coe_sort, ‚Üê Finset.prod_coe_sort]

  ¬∑

    sorry
  ¬∑
    sorry

#exit

example :
  ‚àÉ C, 0 < C ‚àß ‚àÄ x (hx : mixedEmbedding.norm x = 1) w, w ‚â† w‚ÇÄ ‚Üí


theorem isBounded_S : IsBounded (S‚ÇÅ K) := by
  classical
  rsuffices ‚ü®C, hC‚ü© :
      ‚àÉ C, ‚àÄ x ‚àà S‚ÇÅ K, ‚àÄ w, w ‚â† w‚ÇÄ ‚Üí if hw : IsReal w then |Real.log ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ| ‚â§ C else
      |Real.log ‚Äñ(x.2 ‚ü®w, not_isReal_iff_isComplex.mp hw‚ü©)‚Äñ| ‚â§ C := by
    sorry
  refine isBounded_image_fst_and_snd.mp ‚ü®?_, ?_‚ü©
  ¬∑ rw [isBounded_iff_forall_norm_le]
    refine ‚ü®max (Real.exp C) 2, ?_‚ü©
    rintro x‚ÇÅ ‚ü®x, hx, rfl‚ü©
    simp only [Set.mem_image, Set.mem_setOf_eq, Prod.exists, exists_and_right,
      exists_eq_right] at hx
    rw [pi_norm_le_iff_of_nonneg]
    rintro ‚ü®w, hw‚ü©
    by_cases hw' : w = w‚ÇÄ
    ¬∑ have := hx.2
      rw [mixedEmbedding.norm_apply] at this
      rw [hw'] at hw
      rw [‚Üê Finset.univ.mul_prod_erase _ (by sorry : ‚ü®w‚ÇÄ, hw‚ü©  ‚àà Finset.univ)]
        at this
      sorry
    ¬∑ specialize hC x hx w hw'
      rw [dif_pos] at hC

      sorry
  ¬∑
    sorry

#exit

  classical
  let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (Zspan.fundamentalDomain_isBounded B).subset_closedBall_lt 0 0
  have h‚ÇÄ : ‚àÄ x ‚àà fundamentalCone K,
    ‚ÄñlogMap x‚Äñ ‚â§ r := fun _ h ‚Ü¶ mem_closedBall_zero_iff.mp (hr‚ÇÇ h.1)
  have : ‚àÄ x ‚àà S‚ÇÅ K, ‚àÄ w, w ‚â† w‚ÇÄ ‚Üí
      if hw : IsReal w then |Real.log ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ| ‚â§ r
      else |Real.log ‚Äñ(x.2 ‚ü®w, not_isReal_iff_isComplex.mp hw‚ü©)‚Äñ| ‚â§ r / 2 := by
    intro x hx w hw'
    split_ifs with hw
    ¬∑ rw [‚Üê logMap_eq_of_norm_one_at_isReal hx.2 hw hw']
      exact (pi_norm_le_iff_of_nonneg hr‚ÇÅ.le).mp (h‚ÇÄ x hx.1) ‚ü®w, hw'‚ü©
    ¬∑ rw [le_div_iff' zero_lt_two, show (2 : ‚Ñù) = |2| by norm_num, ‚Üê abs_mul,
        ‚Üê logMap_eq_of_norm_one_at_isComplex hx.2 (not_isReal_iff_isComplex.mp hw) hw']
      exact (pi_norm_le_iff_of_nonneg hr‚ÇÅ.le).mp (h‚ÇÄ x hx.1) ‚ü®w, hw'‚ü©
  have : ‚àÄ x ‚àà S‚ÇÅ K, if hw‚ÇÄ : IsReal w‚ÇÄ then |Real.log ‚Äñx.1 ‚ü®w‚ÇÄ, hw‚ÇÄ‚ü©‚Äñ| ‚â§ r
      else |Real.log ‚Äñ(x.2 ‚ü®w‚ÇÄ, not_isReal_iff_isComplex.mp hw‚ÇÄ‚ü©)‚Äñ| ‚â§ r / 2 := sorry

  rw [isBounded_iff_forall_norm_le]
  refine ‚ü®?_, fun x hx ‚Ü¶ ?_‚ü©
  rotate_left
  refine norm_prod_le_iff.mpr ‚ü®?_, ?_‚ü©
  ¬∑ rw [pi_norm_le_iff_of_nonneg sorry]
    intro w

#exit

theorem measurable_S : MeasurableSet (S K) :=
  fundamentalCone.measurable.inter <|
    measurableSet_le (mixedEmbedding.continuous_norm K).measurable measurable_const

theorem frontier_S_eq : frontier (S K) = S‚ÇÅ K := sorry

open Classical in
theorem frontier_ae_null : volume (S‚ÇÅ K) = 0 := sorry

end FundamentalCone

noncomputable section

open Classical

variable (K : Type*) [Field K] [NumberField K]

namespace NumberField.mixedEmbedding.euclideanSpace

open NumberField NumberField.InfinitePlace MeasureTheory BigOperators Submodule

local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K` as an Euclidean space. -/
local notation "E‚ÇÇ" K =>
    (WithLp 2 ((EuclideanSpace ‚Ñù {w : InfinitePlace K // IsReal w}) √ó
      (EuclideanSpace ‚ÑÇ {w : InfinitePlace K // IsComplex w})))

/-- Docs. -/
local instance : Ring (EuclideanSpace ‚Ñù { w : InfinitePlace K // IsReal w }) := Pi.ring

/-- Docs. -/
local instance : Ring (EuclideanSpace ‚ÑÇ { w : InfinitePlace K // IsComplex w }) := Pi.ring

instance : Ring (E‚ÇÇ K) := Prod.instRing

instance : MeasurableSpace (E‚ÇÇ K) := borel _

instance : BorelSpace (E‚ÇÇ K)  :=  ‚ü®rfl‚ü©

instance : T2Space (E‚ÇÇ K) := Prod.t2Space

protected theorem norm_apply (x : E‚ÇÇ K) :
    ‚Äñx‚Äñ = Real.sqrt (‚àë w, ‚Äñx.1 w‚Äñ ^ 2 + ‚àë w, ‚Äñx.2 w‚Äñ ^ 2) := by
  rw [WithLp.prod_norm_eq_add (by exact Nat.ofNat_pos), EuclideanSpace.norm_eq,
    EuclideanSpace.norm_eq, ENNReal.toReal_ofNat, Real.rpow_two, Real.sq_sqrt (by positivity),
    Real.rpow_two, Real.sq_sqrt (by positivity), Real.sqrt_eq_rpow]

-- protected theorem inner_apply (x y : E‚ÇÇ K) :
--     ‚ü™x, y‚ü´_‚Ñù = ‚àë w, (x.1 w) * (y.1 w) +
--       ‚àë w, ((x.2 w).re * (y.2 w).re + (x.2 w).im * (y.2 w).im) := by
--   simp_rw [WithLp.prod_inner_apply, EuclideanSpace.inner_eq_star_dotProduct, real_inner_eq_re_inner,
--     EuclideanSpace.inner_eq_star_dotProduct, Matrix.dotProduct, Pi.star_apply, star_trivial,
--     RCLike.star_def, map_sum, RCLike.mul_re, RCLike.conj_re, RCLike.re_to_complex,
--     RCLike.conj_im, WithLp.equiv_pi_apply, neg_mul, sub_neg_eq_add, RCLike.im_to_complex]

/-- Docs. -/
protected def linearEquiv : (E‚ÇÇ K) ‚âÉ‚Çó[‚Ñù] (E K) := WithLp.linearEquiv _ _ _

/-- Docs. -/
protected def continuousLinearEquiv : (E‚ÇÇ K) ‚âÉL[‚Ñù] (E K) :=
  (euclideanSpace.linearEquiv K).toContinuousLinearEquiv

/-- Docs. -/
protected def homeomorph : (E‚ÇÇ K) ‚âÉ‚Çú (E K) :=
  (euclideanSpace.continuousLinearEquiv K).toHomeomorph

/-- Docs. -/
-- protected def addEquiv : (E‚ÇÇ K) ‚âÉ+ (E K) := (euclideanSpace.linearEquiv K).toAddEquiv

protected theorem coe_homeomorph :
   ‚áë(euclideanSpace.linearEquiv K) = ‚áë(euclideanSpace.homeomorph K) := rfl

protected theorem coe_continuousLinearEquiv :
    ‚áë(euclideanSpace.linearEquiv K) = ‚áë(euclideanSpace.continuousLinearEquiv K) := rfl

@[simp]
theorem linearEquiv_apply_ofIsReal (x : E‚ÇÇ K) {w : InfinitePlace K} (hw : IsReal w) :
    (euclideanSpace.linearEquiv K x).1 ‚ü®w, hw‚ü© = x.1 ‚ü®w, hw‚ü© := rfl

@[simp]
theorem linearEquiv_apply_ofIsComplex (x : E‚ÇÇ K) {w : InfinitePlace K} (hw : IsComplex w) :
    (euclideanSpace.linearEquiv K x).2 ‚ü®w, hw‚ü© = x.2 ‚ü®w, hw‚ü© := rfl

instance : Nontrivial (E‚ÇÇ K) := (euclideanSpace.linearEquiv K).toEquiv.nontrivial

protected theorem finrank :
    FiniteDimensional.finrank ‚Ñù (E‚ÇÇ K) = FiniteDimensional.finrank ‚Ñö K := by
  rw [‚Üê mixedEmbedding.finrank]
  refine  LinearEquiv.finrank_eq ?_
  exact euclideanSpace.linearEquiv K

/-- Docs. -/
protected def stdOrthonormalBasis : OrthonormalBasis (index K) ‚Ñù (E‚ÇÇ K) :=
  OrthonormalBasis.prod (EuclideanSpace.basisFun _ ‚Ñù)
    ((Pi.orthonormalBasis fun _ ‚Ü¶ Complex.orthonormalBasisOneI).reindex (Equiv.sigmaEquivProd _ _))

theorem stdOrthonormalBasis_map_equiv :
    (euclideanSpace.stdOrthonormalBasis K).toBasis.map (euclideanSpace.linearEquiv K) =
      mixedEmbedding.stdBasis K := by ext _ _ <;> rfl

@[simp]
theorem stdOrthonormalBasis_repr_apply (x : E‚ÇÇ K) (i : index K) :
    (euclideanSpace.stdOrthonormalBasis K).repr x i =
      (stdBasis K).repr (euclideanSpace.linearEquiv K x) i := rfl

theorem measurePreserving_euclideanLinearEquiv :
    MeasurePreserving (euclideanSpace.linearEquiv K) := by
  let e := (euclideanSpace.homeomorph K).toMeasurableEquiv
  convert e.measurable.measurePreserving volume
  erw [‚Üê (OrthonormalBasis.addHaar_eq_volume (euclideanSpace.stdOrthonormalBasis K)),
    Homeomorph.toMeasurableEquiv_coe, Basis.map_addHaar _ (euclideanSpace.continuousLinearEquiv K),
    stdOrthonormalBasis_map_equiv, eq_comm, Basis.addHaar_eq_iff, Basis.coe_parallelepiped,
    ‚Üê measure_congr (Zspan.fundamentalDomain_ae_parallelepiped (stdBasis K) volume),
    volume_fundamentalDomain_stdBasis K]

end NumberField.mixedEmbedding.euclideanSpace

open Filter NumberField NumberField.mixedEmbedding NumberField.InfinitePlace Topology MeasureTheory
  NumberField.Units NumberField.mixedEmbedding.fundamentalCone Submodule Bornology
  NumberField.mixedEmbedding.euclideanSpace FiniteDimensional NumberField.Units.dirichletUnitTheorem

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K` as an Euclidean space. -/
local notation "E‚ÇÇ" K =>
    (WithLp 2 ((EuclideanSpace ‚Ñù {w : InfinitePlace K // IsReal w}) √ó
      (EuclideanSpace ‚ÑÇ {w : InfinitePlace K // IsComplex w})))

local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

/-- Docs. -/
def Œõ : AddSubgroup (E‚ÇÇ K) :=
    (span ‚Ñ§ (Set.range ((latticeBasis K).map (euclideanSpace.linearEquiv K).symm))).toAddSubgroup

instance : DiscreteTopology (Œõ K) := Zspan.instDiscreteTopology _

instance : IsZlattice ‚Ñù (Œõ K) where
  span_top := by
    simp_rw [Œõ, coe_toAddSubgroup, ‚Üê Zspan.map, map_coe, LinearEquiv.restrictScalars_apply,
      ‚Üê Submodule.map_span, Zspan.span_top, Submodule.map_top, LinearEquivClass.range]

abbrev X : Set (E‚ÇÇ K) := (euclideanSpace.linearEquiv K)‚Åª¬π' (fundamentalCone K)

theorem repl :
  {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) ‚â§ 1} =
    (euclideanSpace.linearEquiv K)‚Åª¬π' (S K) := rfl

theorem repl' :
  {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) = 1} =
    (euclideanSpace.linearEquiv K)‚Åª¬π' (S‚ÇÅ K) := rfl

example :
    IsBounded {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) ‚â§ 1} := by
  have := (euclideanSpace.continuousLinearEquiv K).symm.lipschitz
  have : AntilipschitzWith _ (euclideanSpace.linearEquiv K) := by
    refine this.to_rightInverse ?_
    exact Equiv.rightInverse_symm _
  exact AntilipschitzWith.isBounded_preimage this (isBounded_S K)

example :
    MeasurableSet {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) ‚â§ 1} := by
  have : Measurable (euclideanSpace.linearEquiv K) :=
    (euclideanSpace.continuousLinearEquiv K).continuous.measurable
  exact MeasurableSet.preimage (measurable_S K) this

example :
    frontier {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) ‚â§ 1} =
      {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) = 1} := by
  erw [repl, (euclideanSpace.continuousLinearEquiv K).toContinuousLinearMap.frontier_preimage,
    frontier_S_eq, ‚Üê repl']
  exact (euclideanSpace.continuousLinearEquiv K).surjective

example :
    volume (frontier {x | x ‚àà X K ‚àß
      mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) ‚â§ 1}) = 0 := by
  have := ContinuousLinearMap.frontier_preimage
    (euclideanSpace.continuousLinearEquiv K : (E‚ÇÇ K) ‚ÜíL[‚Ñù] (E K))
    (ContinuousLinearEquiv.surjective _)
    (S K)
  erw [euclideanSpace.coe_continuousLinearEquiv, this, MeasurePreserving.measure_preimage
    (measurePreserving_euclideanLinearEquiv K), frontier_S_eq, frontier_ae_null]

  sorry

-- volume (frontier {x | x ‚àà X K ‚àß mixedEmbedding.norm ((euclideanSpace.linearEquiv K) x) ‚â§ 1}) = 0

#exit

/-- Docs. -/
abbrev X : Set (E‚ÇÇ K) := (euclideanSpace.linearEquiv K)‚Åª¬π' (fundamentalCone K)

/-- Docs. -/
abbrev X‚ÇÅ : Set (E‚ÇÇ K) := {x ‚àà X K | mixedEmbedding.norm (euclideanSpace.linearEquiv K x) ‚â§ 1}

/-- Docs. -/
abbrev F‚ÇÅ : Set (E‚ÇÇ K) := {x ‚àà X K | mixedEmbedding.norm (euclideanSpace.linearEquiv K x) = 1}

variable {K}

theorem aux00 {x : E‚ÇÇ K} (hx : x ‚àà X K) :
    0 < mixedEmbedding.norm (euclideanSpace.linearEquiv K x) :=
  lt_iff_le_and_ne.mpr ‚ü®mixedEmbedding.norm_nonneg _, Ne.symm hx.2‚ü©

theorem aux0 {x : E‚ÇÇ K} (hx : x ‚àà X‚ÇÅ K) :
    ‚àÉ c : ‚Ñù, 1 ‚â§ c ‚àß c ‚Ä¢ x ‚àà F‚ÇÅ K := by
  have : finrank ‚Ñö K ‚â† 0 := ne_of_gt finrank_pos
  refine ‚ü®((mixedEmbedding.norm (euclideanSpace.linearEquiv K x)) ^ (-(finrank ‚Ñö K : ‚Ñù)‚Åª¬π)),
    ?_, ?_‚ü©
  ¬∑ refine Real.one_le_rpow_of_pos_of_le_one_of_nonpos ?_ ?_ ?_
    ¬∑ exact aux00 hx.1
    ¬∑ exact hx.2
    ¬∑ aesop
  ¬∑ refine ‚ü®?_, ?_‚ü©
    ¬∑ rw [X, Set.mem_preimage, _root_.map_smul]
      refine smul_mem_of_mem hx.1 ?_
      refine (Real.rpow_ne_zero ?_ ?_).mpr ?_
      exact mixedEmbedding.norm_nonneg _
      aesop
      exact ne_of_gt (aux00 hx.1)
    ¬∑ have := aux00 hx.1
      rw [_root_.map_smul, mixedEmbedding.norm_smul, abs_eq_self.mpr]
      rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_mul, neg_mul, inv_mul_cancel, Real.rpow_neg_one,
        inv_mul_cancel]
      exact ne_of_gt (aux00 hx.1)
      aesop
      exact mixedEmbedding.norm_nonneg _
      refine Real.rpow_nonneg (mixedEmbedding.norm_nonneg _) _

theorem aux1 (h : IsBounded (F‚ÇÅ K)) :
    IsBounded (X‚ÇÅ K) := by
  rw [Metric.isBounded_iff_subset_ball 0]
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := h.subset_ball_lt 0 0
  refine ‚ü®r, ?_‚ü©
  intro x hx
  obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© := aux0 hx
  have := hr‚ÇÇ hc‚ÇÇ
  rw [mem_ball_zero_iff] at this ‚ä¢
  rw [‚Üê smul_lt_smul_iff_of_pos_left (by linarith : 0 < c)]
  rw [show c ‚Ä¢ ‚Äñx‚Äñ = ‚Äñc ‚Ä¢ x‚Äñ by
    rw [norm_smul, Real.norm_eq_abs, abs_eq_self.mpr (by linarith), smul_eq_mul]]
  refine lt_of_lt_of_le this ?_
  refine le_smul_of_one_le_left ?_ ?_
  exact le_of_lt hr‚ÇÅ
  exact hc‚ÇÅ

theorem aux11 : frontier (X‚ÇÅ K) = F‚ÇÅ K := by
  unfold X‚ÇÅ F‚ÇÅ
  let f := Set.indicator (X K)
    (fun x : E‚ÇÇ K ‚Ü¶ mixedEmbedding.norm (euclideanSpace.linearEquiv K x))
  let g := Set.indicator (X K) (fun _ ‚Ü¶ (1 : ‚Ñù))
  have := frontier_le_eq_eq (f := f) (g := g) sorry sorry sorry
  convert this
  ¬∑ sorry
  ¬∑ sorry

theorem logMap_apply_F‚ÇÅ_ofIsReal {x : E‚ÇÇ K} (hx : x ‚àà F‚ÇÅ K) {w : InfinitePlace K} (hw‚ÇÅ : w ‚â† w‚ÇÄ)
    (hw‚ÇÇ : IsReal w) :
    logMap (euclideanSpace.linearEquiv K x) ‚ü®w, hw‚ÇÅ‚ü© = Real.log ‚Äñx.1 ‚ü®w, hw‚ÇÇ‚ü©‚Äñ := by
  rw [logMap, dif_pos hw‚ÇÇ, hx.2, Real.log_one, zero_mul, sub_zero]
  rfl

theorem logMap_apply_F‚ÇÅ_ofIsComplex {x : E‚ÇÇ K} (hx : x ‚àà F‚ÇÅ K) {w : InfinitePlace K} (hw‚ÇÅ : w ‚â† w‚ÇÄ)
    (hw‚ÇÇ : IsComplex w) :
    logMap (euclideanSpace.linearEquiv K x) ‚ü®w, hw‚ÇÅ‚ü© = 2 * Real.log ‚Äñx.2 ‚ü®w, hw‚ÇÇ‚ü©‚Äñ := by
  rw [logMap, dif_neg (not_isReal_iff_isComplex.mpr hw‚ÇÇ), hx.2, Real.log_one, zero_mul, sub_zero]
  rfl

theorem logMap_bounded_of_mem {w : InfinitePlace K} (hw : w ‚â† w‚ÇÄ) :
    ‚àÉ C, ‚àÄ x ‚àà fundamentalCone K, ‚ÄñlogMap x ‚ü®w, hw‚ü©‚Äñ ‚â§ C := by
  classical
  let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (Zspan.fundamentalDomain_isBounded B).subset_closedBall_lt 0 0
  refine ‚ü®r, fun _ hx ‚Ü¶ ?_‚ü© -- (pi_norm_le_iff hr‚ÇÅ).mp (mem_closedBall_zero_iff.mp (hr‚ÇÇ hx.1)) ‚ü®w, hw‚ü©‚ü©
  have := mem_closedBall_zero_iff.mp (hr‚ÇÇ hx.1)
  sorry

theorem bounded_at_ne_w‚ÇÄ_isReal {w : InfinitePlace K} (hw : IsReal w) (hw' : w ‚â† w‚ÇÄ) :
    ‚àÉ C‚ÇÅ C‚ÇÇ,‚àÄ x ‚àà F‚ÇÅ K, 0 < C‚ÇÅ ‚àß C‚ÇÅ ‚â§ ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ ‚àß ‚Äñx.1 ‚ü®w, hw‚ü©‚Äñ ‚â§ C‚ÇÇ := by
  obtain ‚ü®r, hr‚ü© := logMap_bounded_of_mem hw'
  refine ‚ü®Real.exp (- r), Real.exp r, fun x hx ‚Ü¶ ‚ü®Real.exp_pos _, ?_‚ü©‚ü©
  rw [‚Üê Real.log_le_iff_le_exp, ‚Üê Real.le_log_iff_exp_le, ‚Üê abs_le]
  sorry
  sorry
  sorry

theorem bounded_at_ne_w‚ÇÄ_isComplex {w : InfinitePlace K} (hw : IsComplex w) (hw' : w ‚â† w‚ÇÄ) :
    ‚àÉ C‚ÇÅ C‚ÇÇ, ‚àÄ x ‚àà X K, 0 < C‚ÇÅ ‚àß C‚ÇÅ ‚â§ ‚Äñx.2 ‚ü®w, hw‚ü©‚Äñ ‚àß ‚Äñx.2 ‚ü®w, hw‚ü©‚Äñ ‚â§ C‚ÇÇ := sorry

theorem bounded_of_mem_F‚ÇÅ_at_w‚ÇÄ_isReal (hw‚ÇÄ : IsReal w‚ÇÄ) :
    ‚àÉ C, ‚àÄ x ‚àà F‚ÇÅ K, ‚Äñx.1 ‚ü®w‚ÇÄ, hw‚ÇÄ‚ü©‚Äñ ‚â§ C := sorry

theorem bounded_of_mem_F‚ÇÅ_at_w‚ÇÄ_isComplex (hw‚ÇÄ : IsComplex w‚ÇÄ) :
    ‚àÉ C, ‚àÄ x ‚àà F‚ÇÅ K, ‚Äñx.2 ‚ü®w‚ÇÄ, hw‚ÇÄ‚ü©‚Äñ ‚â§ C := sorry

variable (K)

-- use this:  obtain hw | hw := w.isReal_or_isComplex

theorem bounded_of_mem_F‚ÇÅ_at_index (i : index K) :
    ‚àÉ C, ‚àÄ x ‚àà F‚ÇÅ K, |(euclideanSpace.stdOrthonormalBasis K).repr x i| ‚â§ C := by
  cases i with
  | inl w =>
      simp only [stdOrthonormalBasis_repr_apply, stdBasis_apply_ofIsReal]
      by_cases hw : w.val = w‚ÇÄ
      ¬∑ have : IsReal (w‚ÇÄ : InfinitePlace K) := by
          rw [‚Üê hw]
          exact w.prop
        have := bounded_of_mem_F‚ÇÅ_at_w‚ÇÄ_isReal this
        convert this
      ¬∑ have := bounded_at_ne_w‚ÇÄ_isReal w.prop hw
        obtain ‚ü®_, C, hC‚ü© := this
        refine ‚ü®C, ?_‚ü©
        intro _ hx
        exact (hC _ hx).2.2
  | inr wj =>
      rcases wj with ‚ü®w, j‚ü©
      by_cases hw : w.val = w‚ÇÄ
      ¬∑ have : IsComplex (w‚ÇÄ : InfinitePlace K) := by
          rw [‚Üê hw]
          exact w.prop
        obtain ‚ü®C, hC‚ü© := bounded_of_mem_F‚ÇÅ_at_w‚ÇÄ_isComplex this
        fin_cases j
        ¬∑ refine ‚ü®C, ?_‚ü©
          intro _ hx
          refine le_trans (Complex.abs_re_le_abs _) ?_
          convert hC _ hx
        ¬∑ refine ‚ü®C, ?_‚ü©
          intro _ hx
          refine le_trans (Complex.abs_im_le_abs _) ?_
          convert hC _ hx
      ¬∑ have := bounded_at_ne_w‚ÇÄ_isComplex w.prop hw
        obtain ‚ü®_, C, hC‚ü© := this
        fin_cases j
        ¬∑ simp only [Fin.zero_eta, stdOrthonormalBasis_repr_apply, Fin.isValue,
            stdBasis_apply_ofIsComplex_fst]
          refine ‚ü®C, ?_‚ü©
          intro _ hx
          refine le_trans (Complex.abs_re_le_abs _) ?_
          exact (hC _ hx.1).2.2
        ¬∑ simp only [Fin.mk_one, stdOrthonormalBasis_repr_apply, Fin.isValue,
            stdBasis_apply_ofIsComplex_snd]
          refine ‚ü®C, ?_‚ü©
          intro _ hx
          refine le_trans (Complex.abs_im_le_abs _) ?_
          exact (hC _ hx.1).2.2

theorem aux20 :
    ‚àÉ s : Set ‚Ñù, IsBounded s ‚àß ‚àÄ i, ‚àÄ x ‚àà F‚ÇÅ K,
      (euclideanSpace.stdOrthonormalBasis K).repr x i ‚àà s := by
  refine ‚ü®?_, ?_, ?_‚ü©
  ¬∑ let R := Finset.univ.sup' ?_ fun i : index K ‚Ü¶ (bounded_of_mem_F‚ÇÅ_at_index K i).choose
    exact Metric.closedBall 0 R
    exact Finset.univ_nonempty
  ¬∑ exact Metric.isBounded_closedBall
  ¬∑ intro i _ hx
    have := (bounded_of_mem_F‚ÇÅ_at_index K i).choose_spec _ hx
    rw [mem_closedBall_zero_iff]
    refine le_trans this ?_
    refine Finset.univ.le_sup' (fun i : index K ‚Ü¶ (bounded_of_mem_F‚ÇÅ_at_index K i).choose) ?_
    exact Finset.mem_univ i

-- theorem logMap_bounded_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) {w : InfinitePlace K}
--     (hw : w ‚â† w‚ÇÄ) :
--     ‚àÉ C, ‚ÄñlogMap x ‚ü®w, hw‚ü©‚Äñ < C := by
--   classical
--   let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
--   obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (Zspan.fundamentalDomain_isBounded B).subset_ball_lt 0 0
--   exact ‚ü®r, (pi_norm_lt_iff hr‚ÇÅ).mp (mem_ball_zero_iff.mp (hr‚ÇÇ hx.1)) ‚ü®w, hw‚ü©‚ü©

-- theorem aux20 :
--     ‚àÉ s : Set ‚Ñù, IsBounded s ‚àß ‚àÄ i, ‚àÄ x ‚àà F‚ÇÅ K,
--       (euclideanSpace.stdOrthonormalBasis K).repr x i ‚àà s := by
--   rsuffices ‚ü®C‚ÇÅ, C‚ÇÇ, hC‚ÇÅ, hC‚ÇÇ, h‚ü© : ‚àÉ C‚ÇÅ C‚ÇÇ : ‚Ñù, 0 < C‚ÇÅ ‚àß 1 ‚â§ C‚ÇÇ ‚àß
--       ‚àÄ x ‚àà (F‚ÇÅ K),
--         (‚àÄ w, w.val ‚â† w‚ÇÄ ‚Üí C‚ÇÅ < ‚Äñx.1 w‚Äñ ‚àß ‚Äñx.1 w‚Äñ ‚â§ C‚ÇÇ) ‚àß
--         (‚àÄ w, w.val ‚â† w‚ÇÄ ‚Üí C‚ÇÅ < ‚Äñx.2 w‚Äñ ^ 2 ‚àß ‚Äñx.2 w‚Äñ ^ 2 ‚â§ C‚ÇÇ) := by
--     let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
--     obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (Zspan.fundamentalDomain_isBounded B).subset_ball_lt 0 0
--     have h : ‚àÄ x ‚àà X K, ‚àÄ w : { w // w ‚â† w‚ÇÄ },
--       ‚ÄñlogMap ((euclideanSpace.linearEquiv K) x) w‚Äñ < r :=
--         fun _ h ‚Ü¶ (pi_norm_lt_iff hr‚ÇÅ).mp  <| mem_ball_zero_iff.mp (hr‚ÇÇ h.1)
--     refine ‚ü®Real.exp (- r), Real.exp r, Real.exp_pos _, Real.one_le_exp (le_of_lt hr‚ÇÅ),
--       fun x hx ‚Ü¶ ‚ü®fun w hw ‚Ü¶ ?_, fun w hw ‚Ü¶ ?_‚ü©‚ü©
--     ¬∑ specialize h x hx.1 ‚ü®w.val, hw‚ü©
--       rw [‚Üê Real.log_lt_iff_lt_exp, ‚Üê Real.lt_log_iff_exp_lt, ‚Üê abs_lt]
--       rwa [logMap_apply_F‚ÇÅ_ofIsReal hx hw w.prop, Real.norm_eq_abs] at h
--       sorry
--       sorry
--     ¬∑ specialize h x hx.1 ‚ü®w.val, hw‚ü©
--       rw [‚Üê Real.log_lt_iff_lt_exp, ‚Üê Real.lt_log_iff_exp_lt, ‚Üê abs_lt, Real.log_pow,
--         Nat.cast_ofNat]
--       rwa [logMap_apply_F‚ÇÅ_ofIsComplex hx hw w.prop, Real.norm_eq_abs] at h
--       sorry
--       sorry
--   let M := max C‚ÇÇ (C‚ÇÅ ^ (1 - Fintype.card (InfinitePlace K)))
--   refine ‚ü®Metric.closedBall 0 M, Metric.isBounded_closedBall, fun i x hx  ‚Ü¶ ?_‚ü©
--   rw [mem_closedBall_zero_iff]
--   cases i with
--   | inl w =>
--       by_cases hw : w.1 ‚â† w‚ÇÄ
--       ¬∑ rw [stdOrthonormalBasis_repr_apply, stdBasis_apply_ofIsReal]
--         rw [euclideanSpace.linearEquiv_apply_ofIsReal]
--         replace h := ((h x hx).1 w hw).2
--         refine le_trans ?_ (le_max_left _ _)
--         exact h
--       ¬∑
--         sorry
--   | inr wj =>
--       rcases wj with ‚ü®w, j‚ü©
--       by_cases hw : w.1 ‚â† w‚ÇÄ
--       ¬∑ fin_cases j
--         ¬∑ rw [Fin.zero_eta, stdOrthonormalBasis_repr_apply, stdBasis_apply_ofIsComplex_fst,
--             Real.norm_eq_abs]
--           refine le_trans (Complex.abs_re_le_abs _) ?_
--           replace h := ((h x hx).2 w hw).2
--           refine le_trans ?_ (le_max_left _ _)
--           rw [‚Üê Real.le_sqrt] at h
--           refine le_trans h ?_
--           sorry
--           exact norm_nonneg _
--           sorry
--         ¬∑ rw [Fin.mk_one, stdOrthonormalBasis_repr_apply, stdBasis_apply_ofIsComplex_snd,
--             Real.norm_eq_abs]
--           refine le_trans (Complex.abs_im_le_abs _) ?_
--           replace h := ((h x hx).2 w hw).2
--           refine le_trans ?_ (le_max_left _ _)
--           rw [‚Üê Real.le_sqrt] at h
--           refine le_trans h ?_
--           sorry
--           exact norm_nonneg _
--           sorry
--       ¬∑ sorry

  --   let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
  --   have := (Zspan.fundamentalDomain_isBounded B).subset_ball_lt 0 0
  --   obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := this
  --   refine ‚ü®Real.exp (- r), Real.exp r, Real.exp_pos _, Real.exp_pos _, fun x hx‚ÇÅ ‚Ü¶ ?_‚ü©
  --   have hx‚ÇÇ : x ‚â† 0 := sorry
  --   have hx‚ÇÉ : (‚àÄ w, x.1 w ‚â† 0) ‚àß (‚àÄ w, x.2 w ‚â† 0) := sorry
  --   have hx‚ÇÑ :  ‚àÄ w : { w // w ‚â† w‚ÇÄ }, ‚ÄñlogMap ((euclideanSpace.linearEquiv K) x) w‚Äñ < r := by
  --     rw [‚Üê pi_norm_lt_iff hr‚ÇÅ, ‚Üê mem_ball_zero_iff]
  --     refine hr‚ÇÇ ?_
  --     have := hx‚ÇÅ.1
  --     rw [X, fundamentalCone, Set.mem_preimage] at this
  --     exact (this.resolve_right (by simp [hx‚ÇÇ])).1

theorem aux2 : IsBounded (F‚ÇÅ K) := by
  obtain ‚ü®s, hs‚ÇÅ, hs‚ÇÇ‚ü© : ‚àÉ s : Set ‚Ñù, IsBounded s ‚àß ‚àÄ i, ‚àÄ x ‚àà F‚ÇÅ K,
    (euclideanSpace.stdOrthonormalBasis K).repr x i ‚àà s := aux20 K
  refine IsBounded.subset (isBoundedOfBoundedCoeff
    (fun i ‚Ü¶ euclideanSpace.stdOrthonormalBasis K i) hs‚ÇÅ) ?_
  intro x hx
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro i
    refine ‚ü®(euclideanSpace.stdOrthonormalBasis K).repr x i, ?_‚ü©
    exact hs‚ÇÇ i x hx
  ¬∑ simp_rw [OrthonormalBasis.sum_repr]

def iso3 : ‚Üë(‚Üë(Œõ K) ‚à© X K) ‚âÉ integralPoint K :=
  Equiv.subtypeEquiv (euclideanSpace.linearEquiv _).toEquiv fun x ‚Ü¶ by
  simp only [Œõ, coe_toAddSubgroup, Set.inter_comm _ (X K), Set.mem_inter_iff, Set.mem_preimage,
    SetLike.mem_coe, LinearEquiv.coe_toEquiv, integralPoint, Set.mem_image, Set.mem_range,
    exists_exists_eq_and, and_congr_right_iff]
  intro _
  rw [‚Üê Zspan.map]
  rw [Submodule.mem_map]
  simp_rw [mem_span_latticeBasis]
  simp only [RingHom.mem_range, RingHom.coe_comp, Function.comp_apply,
    LinearEquiv.restrictScalars_apply, exists_exists_eq_and]
  simp_rw [LinearEquiv.symm_apply_eq]

@[simp]
theorem iso3_apply (x : ‚Üë(‚Üë(Œõ K) ‚à© X K)) :
    iso3 K x = euclideanSpace.linearEquiv K (x : E‚ÇÇ K) := rfl

open Submodule Ideal nonZeroDivisors

example :
    Tendsto (fun n : ‚Ñï ‚Ü¶
      (Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
        absNorm (I : Ideal (ùìû K)) ‚â§ n} * torsionOrder K : ‚Ñù) / n) atTop
          (ùìù ((volume (X‚ÇÅ K)).toReal / Zlattice.covolume (Œõ K))) := by
  refine Tendsto.congr' ?_
    (Tendsto.comp (Zlattice.covolume.tendsto_card_le_div' (Œõ K) ?_ ?_ ?_ ?_)
      tendsto_natCast_atTop_atTop)
  ¬∑ filter_upwards with n
    have := card_isPrincipal_norm_le K n
    simp_rw [Function.comp_apply, ‚Üê Nat.cast_mul]
    rw [this]
    simp_rw [Set.setOf_inter_eq_sep, ‚Üê and_assoc, ‚Üê Set.mem_inter_iff]
    congr 2
    refine Nat.card_congr ?_
    refine Equiv.trans (Equiv.Set.sep _ _) ?_
    refine Equiv.subtypeEquiv (iso3 K) ?_
    intro x
    simp_rw [Set.mem_setOf_eq, ‚Üê Nat.cast_le (Œ± := ‚Ñù), intNorm_coe]
    have := iso3_apply K x
    rw [this]
  ¬∑ intro x c hx hc
    sorry
  ¬∑ intro x r hr
    rw [LinearMapClass.map_smul, mixedEmbedding.norm_smul, euclideanSpace.finrank,
      abs_eq_self.mpr hr.le]
  ¬∑ refine aux1 ?_
    exact aux2 K
  ¬∑
    sorry

#exit

example :
    Tendsto (fun n : ‚Ñï ‚Ü¶
      (Nat.card {I : Ideal (ùìû K) | Submodule.IsPrincipal I ‚àß Ideal.absNorm I ‚àà Finset.Icc 1 n} *
        torsionOrder K : ‚Ñù) / n) atTop
          (ùìù ((volume (X‚ÇÅ K)).toReal / Zlattice.covolume (Œõ K))) := by
  refine Tendsto.congr' ?_
--  refine IsEquivalent.tendsto_nhds ?_
    (Tendsto.comp (Zlattice.covolume.tendsto_card_le_div' (Œõ K) ?_ ?_ ?_ ?_)
      tendsto_natCast_atTop_atTop)
  ¬∑ have := card_isPrincipal_norm_le_div_atTop K
    refine IsEquivalent.trans ?_ this.symm
    refine EventuallyEq.isEquivalent ?_
    filter_upwards with _
    simp_rw [Function.comp_apply, Set.setOf_inter_eq_sep, ‚Üê and_assoc, ‚Üê Set.mem_inter_iff]
    -- have := card_isPrincipal_norm_in_Icc K c
    -- simp_rw [this]
    congr 2
    refine Nat.card_congr ?_
    refine Equiv.trans (Equiv.Set.sep _ _) ?_
    refine Equiv.subtypeEquiv (iso3 K) ?_
    intro x
    simp_rw [Set.mem_setOf_eq, ‚Üê Nat.cast_le (Œ± := ‚Ñù), intNorm_coe]
    have := iso3_apply x
    rw [this]
  ¬∑ intro x r hx hr
    erw [Set.mem_preimage, _root_.map_smul (euclideanSpace.linearEquiv K)]
    refine smul_mem_of_mem ?_ r
    exact hx
  ¬∑ intro x r hr
    rw [_root_.map_smul, mixedEmbedding.norm_smul, abs_eq_self.mpr hr]
    erw [mixedEmbedding.finrank]
  ¬∑ -- Not trivial at all
    sorry
  ¬∑ refine MeasurableSet.inter ?_ ?_
    ¬∑ rw [X]
      refine measurableSet_preimage (euclideanSpace.homeomorph K).measurable ?_
      sorry
    ¬∑ refine measurableSet_le (f := fun x ‚Ü¶ mixedEmbedding.norm (euclideanSpace.linearEquiv K x))
        (g := fun _ ‚Ü¶ 1) ?_ ?_
      sorry
      exact measurable_const

#lint
