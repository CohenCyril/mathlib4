import Mathlib.Logic.Equiv.Defs
-- import Mathlib.NumberTheory.NumberField.CanonicalEmbedding.FundamentalCone
-- import Mathlib.Algebra.Module.Zlattice.Covolume

variable {Œ± Œ≤ : Type*} (p : Œ± ‚Üí Prop)

def prodSubtypeEquivSubtypeProd : {s : Œ± √ó Œ≤ // p s.1} ‚âÉ {a // p a} √ó Œ≤ where
  toFun x := ‚ü®‚ü®x.1.1, x.2‚ü©, x.1.2‚ü©
  invFun x := ‚ü®‚ü®x.1.1, x.2‚ü©, x.1.2‚ü©
  left_inv _ := rfl
  right_inv _ := rfl

#exit

  refine Equiv.trans (Equiv.subtypeProdEquivSigmaSubtype fun a ‚Ü¶ fun b ‚Ü¶ p a) ?_
  exact?
  refine Equiv.trans ?_ (Equiv.sigmaEquivProd _ _)

  --refine Equiv.trans ?_ (Equiv.subtypeSigmaEquiv _ (fun a ‚Ü¶ p a))
  -- refine Equiv.trans (Equiv.subtypeSigmaEquiv _ (fun a ‚Ü¶ p a)) ?_

  sorry

end logic

#exit

section Topo

theorem closure_lt_eq_le {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderClosedTopology Œ±]
    [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±}  {g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, f x = g x ‚Üí ‚àÉ·∂† y in nhds x, f y < g y) :
    closure {b | f b < g b} = {b | f b ‚â§ g b} := by
  refine le_antisymm (closure_lt_subset_le hf hg) fun x hx ‚Ü¶ ?_
  obtain (hx‚ÇÅ| hx‚ÇÇ) := le_iff_eq_or_lt.mp hx
  ¬∑ exact mem_closure_iff_frequently.mpr (h hx‚ÇÅ)
  ¬∑ exact subset_closure hx‚ÇÇ

theorem frontier_le_eq_eq {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} [TopologicalSpace Œ≤] (hf : Continuous f)  (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, g x = f x ‚Üí ‚àÉ·∂† y in nhds x, g y < f y) :
    frontier {b | f b ‚â§ g b} = {b | f b = g b} := by
  rw [frontier_eq_closure_inter_closure, closure_le_eq hf hg]
  ext x
  rw [show {x | f x ‚â§ g x}·∂ú = {x | g x < f x} by ext; simp, closure_lt_eq_le hg hf h]
  simp only [Set.mem_inter_iff, Set.mem_setOf_eq, le_antisymm_iff]

theorem frontier_lt_eq_eq {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} [TopologicalSpace Œ≤] (hf : Continuous f)  (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, f x = g x ‚Üí ‚àÉ·∂† y in nhds x, f y < g y) :
    frontier {b | f b < g b} = {b | f b = g b} := by
  simpa only [eq_comm, ‚Üê not_lt, ‚Üê Set.compl_setOf, frontier_compl] using frontier_le_eq_eq hg hf h

end Topo

section Module

variable {Œπ : Type*} [IsEmpty Œπ] (M : Type*) [AddCommMonoid M] {R : Type*} [Semiring R] [Module R M]
variable (b : Basis Œπ R M)

example : Subsingleton M := by
  have : Fintype Œπ := Fintype.ofIsEmpty
  exact subsingleton_of_forall_eq 0 fun y ‚Ü¶ by rw [‚Üê b.sum_repr y, Fintype.sum_empty]

end Module

section PiLp

open Bornology Filter

variable {Œπ : Type*} [Fintype Œπ] (R M : Type*) [NormedDivisionRing R] [SeminormedAddCommGroup M]
  [Module R M] (b : Basis Œπ R M) (s : Set M)

variable [BoundedSMul R M]

example [IsEmpty Œπ] : Subsingleton M := by
  refine subsingleton_of_forall_eq 0 fun y ‚Ü¶ ?_
  rw [‚Üê b.sum_repr y, Fintype.sum_empty]

example (h : ‚àÄ i, IsBounded ((fun x ‚Ü¶ b.repr x i) '' s)) :
    IsBounded s := by
  by_cases hŒπ : IsEmpty Œπ
  ¬∑ have : Subsingleton M := by
      sorry
    have : IsBounded (‚ä§ : Set M) := by exact IsBounded.all ‚ä§
    refine IsBounded.subset this le_top
  ¬∑ obtain ‚ü®C, hC‚ü© : ‚àÉ C, ‚àÄ i, ‚Äñb i‚Äñ ‚â§ C := by
      refine ‚ü®?_, ?_‚ü©
      refine Finset.univ.sup' ?_ (fun i ‚Ü¶ ‚Äñb i‚Äñ)
      rw [Finset.univ_nonempty_iff]
      exact not_isEmpty_iff.mp hŒπ
      exact fun i ‚Ü¶ Finset.le_sup' (fun i ‚Ü¶ ‚Äñb i‚Äñ) (Finset.mem_univ i)
    obtain ‚ü®D, hD‚ÇÅ, hD‚ÇÇ‚ü© : ‚àÉ D ‚â• 0, ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñb.repr x i‚Äñ ‚â§ D := by
      simp_rw [Metric.isBounded_iff_subset_closedBall (0:R)] at h
      let D := Finset.univ.sup' ?_ fun i ‚Ü¶ (h i).choose
      refine ‚ü®D, ?_, ?_‚ü©
      sorry
      intro i x hx
      specialize h i
      have := h.choose_spec
      have : ‚Äñb.repr x i‚Äñ ‚â§ h.choose := by
        sorry
      sorry
      sorry
    refine (Metric.isBounded_iff_subset_closedBall 0).mpr ‚ü®?_, ?_‚ü©
    ¬∑ exact (Fintype.card Œπ) ‚Ä¢ (D * C)
    ¬∑ intro x hx
      rw [mem_closedBall_zero_iff, ‚Üê b.sum_repr x]
      refine le_trans (norm_sum_le _ _) ?_
      simp_rw [norm_smul]
      rw [Fintype.card, ‚Üê Finset.sum_const]
      refine Finset.sum_le_sum fun i _ ‚Ü¶ ?_
      gcongr
      ¬∑ exact hD‚ÇÇ i x hx
      ¬∑ exact hC i

variable (p : ENNReal) (ùïú : Type*) {Œπ : Type*} (Œ≤ : Œπ ‚Üí Type*) [Fact (1 ‚â§ p)] [Fintype Œπ]
  [NormedField ùïú] [(i : Œπ) ‚Üí SeminormedAddCommGroup (Œ≤ i)]  [(i : Œπ) ‚Üí NormedSpace ùïú (Œ≤ i)]

example (s : Set (PiLp p Œ≤)) :
    IsBounded s ‚Üî ‚àÄ i, IsBounded ((fun x ‚Ü¶ ‚Äñx i‚Äñ) '' s) := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Metric.isBounded_iff_subset_ball 0]
    intro h i
    rw [Metric.isBounded_iff_subset_ball 0]

    sorry
  ¬∑
    sorry


end PiLp

open Classical

variable (K : Type*) [Field K] [NumberField K]

noncomputable section

namespace NumberField.mixedEmbedding.euclideanSpace

open NumberField NumberField.InfinitePlace MeasureTheory BigOperators Submodule

local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K` as an Euclidean space. -/
local notation "E‚ÇÇ" K =>
    (WithLp 2 ((EuclideanSpace ‚Ñù {w : InfinitePlace K // IsReal w}) √ó
      (EuclideanSpace ‚ÑÇ {w : InfinitePlace K // IsComplex w})))

/-- Docs. -/
local instance : Ring (EuclideanSpace ‚Ñù { w : InfinitePlace K // IsReal w }) := Pi.ring

/-- Docs. -/
local instance : Ring (EuclideanSpace ‚ÑÇ { w : InfinitePlace K // IsComplex w }) := Pi.ring

instance : Ring (E‚ÇÇ K) := Prod.instRing

instance : MeasurableSpace (E‚ÇÇ K) := borel _

instance : BorelSpace (E‚ÇÇ K)  :=  ‚ü®rfl‚ü©

instance : T2Space (E‚ÇÇ K) := Prod.t2Space

protected theorem norm_apply (x : E‚ÇÇ K) :
    ‚Äñx‚Äñ = Real.sqrt (‚àë w, ‚Äñx.1 w‚Äñ ^ 2 + ‚àë w, ‚Äñx.2 w‚Äñ ^ 2) := by
  rw [WithLp.prod_norm_eq_add (by exact Nat.ofNat_pos), EuclideanSpace.norm_eq,
    EuclideanSpace.norm_eq, ENNReal.toReal_ofNat, Real.rpow_two, Real.sq_sqrt (by positivity),
    Real.rpow_two, Real.sq_sqrt (by positivity), Real.sqrt_eq_rpow]

-- protected theorem inner_apply (x y : E‚ÇÇ K) :
--     ‚ü™x, y‚ü´_‚Ñù = ‚àë w, (x.1 w) * (y.1 w) +
--       ‚àë w, ((x.2 w).re * (y.2 w).re + (x.2 w).im * (y.2 w).im) := by
--   simp_rw [WithLp.prod_inner_apply, EuclideanSpace.inner_eq_star_dotProduct, real_inner_eq_re_inner,
--     EuclideanSpace.inner_eq_star_dotProduct, Matrix.dotProduct, Pi.star_apply, star_trivial,
--     RCLike.star_def, map_sum, RCLike.mul_re, RCLike.conj_re, RCLike.re_to_complex,
--     RCLike.conj_im, WithLp.equiv_pi_apply, neg_mul, sub_neg_eq_add, RCLike.im_to_complex]

/-- Docs. -/
protected def linearEquiv : (E‚ÇÇ K) ‚âÉ‚Çó[‚Ñù] (E K) := WithLp.linearEquiv _ _ _

/-- Docs. -/
protected def continuousLinearEquiv : (E‚ÇÇ K) ‚âÉL[‚Ñù] (E K) :=
  (euclideanSpace.linearEquiv K).toContinuousLinearEquiv

/-- Docs. -/
protected def homeomorph : (E‚ÇÇ K) ‚âÉ‚Çú (E K) :=
  (euclideanSpace.continuousLinearEquiv K).toHomeomorph

/-- Docs. -/
-- protected def addEquiv : (E‚ÇÇ K) ‚âÉ+ (E K) := (euclideanSpace.linearEquiv K).toAddEquiv

protected theorem coe_homeomorph :
  ‚áë(euclideanSpace.linearEquiv K) = ‚áë(euclideanSpace.homeomorph K) := rfl

protected theorem coe_continuousLinearEquiv :
  ‚áë(euclideanSpace.linearEquiv K) = ‚áë(euclideanSpace.continuousLinearEquiv K) := rfl

instance : Nontrivial (E‚ÇÇ K) := (euclideanSpace.linearEquiv K).toEquiv.nontrivial

/-- Docs. -/
protected def stdOrthonormalBasis : OrthonormalBasis (index K) ‚Ñù (E‚ÇÇ K) := sorry

theorem stdOrthonormalBasis_equiv :
    (euclideanSpace.stdOrthonormalBasis K).toBasis.map (euclideanSpace.linearEquiv K) =
      mixedEmbedding.stdBasis K := sorry

theorem measurePreserving_euclideanLinearEquiv :
    MeasurePreserving (euclideanSpace.linearEquiv K) := by
  let e := (euclideanSpace.homeomorph K).toMeasurableEquiv
  convert e.measurable.measurePreserving volume
  erw [‚Üê (OrthonormalBasis.addHaar_eq_volume (euclideanSpace.stdOrthonormalBasis K)),
    Homeomorph.toMeasurableEquiv_coe, Basis.map_addHaar _ (euclideanSpace.continuousLinearEquiv K),
    stdOrthonormalBasis_equiv, eq_comm, Basis.addHaar_eq_iff, Basis.coe_parallelepiped,
    ‚Üê measure_congr (Zspan.fundamentalDomain_ae_parallelepiped (stdBasis K) volume),
    volume_fundamentalDomain_stdBasis K]

end NumberField.mixedEmbedding.euclideanSpace

open Filter NumberField NumberField.mixedEmbedding NumberField.InfinitePlace Topology MeasureTheory
  NumberField.Units NumberField.mixedEmbedding.fundamentalCone Submodule Bornology
  NumberField.mixedEmbedding.euclideanSpace FiniteDimensional NumberField.Units.dirichletUnitTheorem

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K` as an Euclidean space. -/
local notation "E‚ÇÇ" K =>
    (WithLp 2 ((EuclideanSpace ‚Ñù {w : InfinitePlace K // IsReal w}) √ó
      (EuclideanSpace ‚ÑÇ {w : InfinitePlace K // IsComplex w})))

local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

/-- Docs. -/
def Œõ : AddSubgroup (E‚ÇÇ K) :=
    (span ‚Ñ§ (Set.range ((latticeBasis K).map (euclideanSpace.linearEquiv K).symm))).toAddSubgroup

instance : DiscreteTopology (Œõ K) := Zspan.instDiscreteTopology _

instance : IsZlattice ‚Ñù (Œõ K) where
  span_top := by
    simp_rw [Œõ, coe_toAddSubgroup, ‚Üê Zspan.map, map_coe, LinearEquiv.restrictScalars_apply,
      ‚Üê Submodule.map_span, Zspan.span_top, Submodule.map_top, LinearEquivClass.range]

/-- Docs. -/
abbrev X : Set (E‚ÇÇ K) := (euclideanSpace.linearEquiv K)‚Åª¬π' (fundamentalCone K)

/-- Docs. -/
abbrev X‚ÇÅ : Set (E‚ÇÇ K) := {x ‚àà X K | mixedEmbedding.norm (euclideanSpace.linearEquiv K x) ‚â§ 1}

/-- Docs. -/
abbrev F‚ÇÅ : Set (E‚ÇÇ K) := {x ‚àà X K | mixedEmbedding.norm (euclideanSpace.linearEquiv K x) = 1}

variable {K}

theorem aux00 {x : E‚ÇÇ K} (hx : x ‚àà X K) (hx' : x ‚â† 0) :
    0 < mixedEmbedding.norm (euclideanSpace.linearEquiv K x) := by
  rw [X, fundamentalCone, Set.mem_preimage] at hx
  have := hx.resolve_right ?_
  refine lt_iff_le_and_ne.mpr ‚ü®?_, ?_‚ü©
  ¬∑ exact mixedEmbedding.norm_nonneg _
  ¬∑ exact Ne.symm this.2
  rw [Set.mem_singleton_iff, AddEquivClass.map_eq_zero_iff]
  exact hx'

theorem aux0 {x : E‚ÇÇ K} (hx : x ‚àà X‚ÇÅ K) (hx' : x ‚â† 0) :
    ‚àÉ c : ‚Ñù, 1 ‚â§ c ‚àß c ‚Ä¢ x ‚àà F‚ÇÅ K := by
  refine ‚ü®((mixedEmbedding.norm (euclideanSpace.linearEquiv K x)) ^ (-(finrank ‚Ñö K : ‚Ñù)‚Åª¬π)), ?_, ?_‚ü©
  ¬∑ refine Real.one_le_rpow_of_pos_of_le_one_of_nonpos ?_ ?_ ?_
    ¬∑ exact aux00 hx.1 hx'
    ¬∑ exact hx.2
    ¬∑ simp
  ¬∑ refine ‚ü®?_, ?_‚ü©
    ¬∑ rw [X, Set.mem_preimage, _root_.map_smul]
      exact smul_mem_of_mem hx.1 _
    ¬∑ rw [_root_.map_smul, mixedEmbedding.norm_smul, abs_eq_self.mpr]
      rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_mul, neg_mul, inv_mul_cancel, Real.rpow_neg_one,
        inv_mul_cancel]
      ¬∑ exact ne_of_gt (aux00 hx.1 hx')
      ¬∑ rw [Nat.cast_ne_zero]
        exact ne_of_gt finrank_pos
      ¬∑ exact mixedEmbedding.norm_nonneg _
      ¬∑ refine Real.rpow_nonneg ?_ _
        exact mixedEmbedding.norm_nonneg _

theorem aux1 (h : IsBounded (F‚ÇÅ K)) :
    IsBounded (X‚ÇÅ K) := by
  rw [Metric.isBounded_iff_subset_ball 0]
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := h.subset_ball_lt 0 0
  refine ‚ü®r, ?_‚ü©
  rintro x hx
  by_cases hx' : x = 0
  ¬∑ rw [hx']
    exact Metric.mem_ball_self hr‚ÇÅ
  ¬∑ obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© := aux0 hx hx'
    have := hr‚ÇÇ hc‚ÇÇ
    rw [mem_ball_zero_iff] at this ‚ä¢
    rw [norm_smul, ‚Üê lt_div_iff'] at this
    refine lt_of_lt_of_le this ?_
    refine div_le_self ?_ ?_
    exact le_of_lt hr‚ÇÅ
    rw [Real.norm_eq_abs]
    exact le_trans hc‚ÇÅ (le_abs_self _)
    rw [norm_pos_iff]
    refine ne_of_gt ?_
    exact lt_of_lt_of_le zero_lt_one hc‚ÇÅ

theorem aux11 : frontier (X‚ÇÅ K) = F‚ÇÅ K := sorry

theorem logMap_apply_F‚ÇÅ_ofIsReal {x : E‚ÇÇ K} (hx : x ‚àà F‚ÇÅ K) {w : InfinitePlace K} (hw‚ÇÅ : w ‚â† w‚ÇÄ)
    (hw‚ÇÇ : IsReal w) :
    logMap (euclideanSpace.linearEquiv K x) ‚ü®w, hw‚ÇÅ‚ü© = Real.log ‚Äñx.1 ‚ü®w, hw‚ÇÇ‚ü©‚Äñ := by
  rw [logMap, dif_pos hw‚ÇÇ, hx.2, Real.log_one, zero_mul, sub_zero]
  rfl

theorem logMap_apply_F‚ÇÅ_ofIsComplex {x : E‚ÇÇ K} (hx : x ‚àà F‚ÇÅ K) {w : InfinitePlace K} (hw‚ÇÅ : w ‚â† w‚ÇÄ)
    (hw‚ÇÇ : IsComplex w) :
    logMap (euclideanSpace.linearEquiv K x) ‚ü®w, hw‚ÇÅ‚ü© = 2 * Real.log ‚Äñx.2 ‚ü®w, hw‚ÇÇ‚ü©‚Äñ := by
  rw [logMap, dif_neg (not_isReal_iff_isComplex.mpr hw‚ÇÇ), hx.2, Real.log_one, zero_mul, sub_zero]
  rfl

theorem aux2 : IsBounded (F‚ÇÅ K) := by
  rsuffices ‚ü®C, _, hC‚ü© : ‚àÉ C‚ÇÅ C‚ÇÇ : ‚Ñù, 0 < C‚ÇÅ ‚àß 0 < C‚ÇÇ ‚àß
      ‚àÄ x ‚àà (F‚ÇÅ K),
        (‚àÄ w, w.val ‚â† w‚ÇÄ ‚Üí C‚ÇÅ < ‚Äñx.1 w‚Äñ ‚àß ‚Äñx.1 w‚Äñ < C‚ÇÇ) ‚àß
        (‚àÄ w, w.val ‚â† w‚ÇÄ ‚Üí C‚ÇÅ < ‚Äñx.2 w‚Äñ ‚àß ‚Äñx.2 w‚Äñ < C‚ÇÇ) := by
    let B := (Module.Free.chooseBasis ‚Ñ§ (unitLattice K)).ofZlatticeBasis ‚Ñù _
    have := (Zspan.fundamentalDomain_isBounded B).subset_ball_lt 0 0
    obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := this
    refine ‚ü®Real.exp (- r), Real.exp r, Real.exp_pos _, Real.exp_pos _, fun x hx‚ÇÅ ‚Ü¶ ?_‚ü©
    have hx‚ÇÇ : x ‚â† 0 := sorry
    have hx‚ÇÉ : (‚àÄ w, x.1 w ‚â† 0) ‚àß (‚àÄ w, x.2 w ‚â† 0) := sorry
    have hx‚ÇÑ :  ‚àÄ w : { w // w ‚â† w‚ÇÄ }, ‚ÄñlogMap ((euclideanSpace.linearEquiv K) x) w‚Äñ < r := by
      rw [‚Üê pi_norm_lt_iff hr‚ÇÅ, ‚Üê mem_ball_zero_iff]
      refine hr‚ÇÇ ?_
      have := hx‚ÇÅ.1
      rw [X, fundamentalCone, Set.mem_preimage] at this
      exact (this.resolve_right (by simp [hx‚ÇÇ])).1

    refine ‚ü®fun w hw ‚Ü¶ ?_, fun w hw ‚Ü¶ ?_‚ü©
    ¬∑ rw [‚Üê Real.log_lt_iff_lt_exp, ‚Üê Real.lt_log_iff_exp_lt, ‚Üê abs_lt]
      rw [‚Üê logMap_apply_F‚ÇÅ_ofIsReal hx‚ÇÅ hw]
      exact hx‚ÇÑ ‚ü®w.val, hw‚ü©
      sorry
      sorry
    ¬∑ rw [‚Üê Real.log_lt_iff_lt_exp, ‚Üê Real.lt_log_iff_exp_lt, ‚Üê abs_lt]
      refine lt_trans ?_ (div_two_lt_of_pos hr‚ÇÅ)
      rw [‚Üê mul_lt_mul_left (zero_lt_two)]
      rw [mul_div_cancel‚ÇÄ _ (two_ne_zero)]
      rw [show (2:‚Ñù) = |2| by norm_num, ‚Üê abs_mul]
      rw [‚Üê logMap_apply_F‚ÇÅ_ofIsComplex hx‚ÇÅ hw]
      exact hx‚ÇÑ ‚ü®w.val, hw‚ü©
      sorry
      sorry
  rw [Metric.isBounded_iff_subset_closedBall 0]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ sorry
  ¬∑ intro x hx
    rw [mem_closedBall_zero_iff, euclideanSpace.norm_apply]
    sorry

variable (K) in
def iso3 : ‚Üë(‚Üë(Œõ K) ‚à© X K) ‚âÉ integralPoint K :=
  Equiv.subtypeEquiv (euclideanSpace.linearEquiv _).toEquiv fun x ‚Ü¶ by
  simp only [Œõ, coe_toAddSubgroup, Set.inter_comm _ (X K), Set.mem_inter_iff, Set.mem_preimage,
    SetLike.mem_coe, LinearEquiv.coe_toEquiv, integralPoint, Set.mem_image, Set.mem_range,
    exists_exists_eq_and, and_congr_right_iff]
  intro _
  rw [‚Üê Zspan.map]
  rw [Submodule.mem_map]
  simp_rw [mem_span_latticeBasis]
  simp only [RingHom.mem_range, RingHom.coe_comp, Function.comp_apply,
    LinearEquiv.restrictScalars_apply, exists_exists_eq_and]
  simp_rw [LinearEquiv.symm_apply_eq]

@[simp]
theorem iso3_apply (x : ‚Üë(‚Üë(Œõ K) ‚à© X K)) :
    iso3 K x = euclideanSpace.linearEquiv K (x : E‚ÇÇ K) := rfl

open Asymptotics Submodule Ideal nonZeroDivisors

example :
    Tendsto (fun n : ‚Ñï ‚Ü¶
      (Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal I.val ‚àß absNorm I.val ‚â§ n} *
        torsionOrder K : ‚Ñù) / n) atTop
          (ùìù ((volume (X‚ÇÅ K)).toReal / Zlattice.covolume (Œõ K))) := by
  refine Tendsto.congr' ?_
    (Tendsto.comp (Zlattice.covolume.tendsto_card_le_div' (Œõ K) ?_ ?_ ?_ ?_)
      tendsto_natCast_atTop_atTop)
  ¬∑ filter_upwards with n
    have := card_isPrincipal_norm_le K n
    simp_rw [Function.comp_apply, ‚Üê Nat.cast_mul]
    rw [this]
    simp_rw [Set.setOf_inter_eq_sep, ‚Üê and_assoc, ‚Üê Set.mem_inter_iff]
    congr 2
    refine Nat.card_congr ?_
    refine Equiv.trans (Equiv.Set.sep _ _) ?_
    refine Equiv.subtypeEquiv (iso3 K) ?_
    intro x
    simp_rw [Set.mem_setOf_eq, ‚Üê Nat.cast_le (Œ± := ‚Ñù), intNorm_coe]
    have := iso3_apply x
    rw [this]

#exit

example :
    Tendsto (fun n : ‚Ñï ‚Ü¶
      (Nat.card {I : Ideal (ùìû K) | Submodule.IsPrincipal I ‚àß Ideal.absNorm I ‚àà Finset.Icc 1 n} *
        torsionOrder K : ‚Ñù) / n) atTop
          (ùìù ((volume (X‚ÇÅ K)).toReal / Zlattice.covolume (Œõ K))) := by
  refine Tendsto.congr' ?_
--  refine IsEquivalent.tendsto_nhds ?_
    (Tendsto.comp (Zlattice.covolume.tendsto_card_le_div' (Œõ K) ?_ ?_ ?_ ?_)
      tendsto_natCast_atTop_atTop)
  ¬∑ have := card_isPrincipal_norm_le_div_atTop K
    refine IsEquivalent.trans ?_ this.symm
    refine EventuallyEq.isEquivalent ?_
    filter_upwards with _
    simp_rw [Function.comp_apply, Set.setOf_inter_eq_sep, ‚Üê and_assoc, ‚Üê Set.mem_inter_iff]
    -- have := card_isPrincipal_norm_in_Icc K c
    -- simp_rw [this]
    congr 2
    refine Nat.card_congr ?_
    refine Equiv.trans (Equiv.Set.sep _ _) ?_
    refine Equiv.subtypeEquiv (iso3 K) ?_
    intro x
    simp_rw [Set.mem_setOf_eq, ‚Üê Nat.cast_le (Œ± := ‚Ñù), intNorm_coe]
    have := iso3_apply x
    rw [this]
  ¬∑ intro x r hx hr
    erw [Set.mem_preimage, _root_.map_smul (euclideanSpace.linearEquiv K)]
    refine smul_mem_of_mem ?_ r
    exact hx
  ¬∑ intro x r hr
    rw [_root_.map_smul, mixedEmbedding.norm_smul, abs_eq_self.mpr hr]
    erw [mixedEmbedding.finrank]
  ¬∑ -- Not trivial at all
    sorry
  ¬∑ refine MeasurableSet.inter ?_ ?_
    ¬∑ rw [X]
      refine measurableSet_preimage (euclideanSpace.homeomorph K).measurable ?_
      sorry
    ¬∑ refine measurableSet_le (f := fun x ‚Ü¶ mixedEmbedding.norm (euclideanSpace.linearEquiv K x))
        (g := fun _ ‚Ü¶ 1) ?_ ?_
      sorry
      exact measurable_const

#lint
