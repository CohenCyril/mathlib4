import Mathlib.Algebra.Algebra.Unitization
import Mathlib.Topology.ContinuousFunction.ContinuousMapZero
import Mathlib.Topology.Algebra.Algebra

open Set Topology TopologicalSpace Function Uniformity

theorem Set.exists_image2_iff {Œ± Œ≤ Œ≥ : Type*} {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} {s : Set Œ±} {t : Set Œ≤}
    {p : Œ≥ ‚Üí Prop}  :
    (‚àÉ z ‚àà image2 f s t, p z) ‚Üî ‚àÉ x ‚àà s, ‚àÉ y ‚àà t, p (f x y) := by
  simp only [mem_image2, exists_exists_and_exists_and_eq_and]

section MissingHomeomorph

variable {X Y Z : Type*} [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Z]

@[simps]
def ContinuousMap.inl : C(X, X ‚äï Y) where
  toFun := Sum.inl

@[simps]
def ContinuousMap.inr : C(Y, X ‚äï Y) where
  toFun := Sum.inr

@[simps]
def ContinuousMap.sumElim (f : C(X, Z) √ó C(Y, Z)) : C(X ‚äï Y, Z) where
  toFun := Sum.elim f.1 f.2

def Homeomorph.sumCompl {s : Set X} [DecidablePred (¬∑ ‚àà s)] (hs : IsClopen s) :
    s ‚äï (s·∂ú : Set X) ‚âÉ‚Çú X :=
  .homeomorphOfContinuousOpen (Equiv.Set.sumCompl s)
    (by rw [continuous_sum_dom]; exact ‚ü®continuous_subtype_val, continuous_subtype_val‚ü©)
    (by
      rw [isOpenMap_sum]
      exact ‚ü®hs.isOpen.isOpenMap_subtype_val, hs.compl.isOpen.isOpenMap_subtype_val‚ü©)

variable (X Y Z) in
@[simps]
def ContinuousMap.sumEquiv :
    C(X, Z) √ó C(Y, Z) ‚âÉ C(X ‚äï Y, Z) where
  toFun := ContinuousMap.sumElim
  invFun f := ‚ü®f.comp .inl, f.comp .inr‚ü©
  left_inv f := rfl
  right_inv f := ext <| by rintro (x|y) <;> rfl

-- variable (X Y Z) in
-- def ContinuousMap.sumHomeomorph :
--     C(X, Z) √ó C(Y, Z) ‚âÉ‚Çú C(X ‚äï Y, Z) where
--   toEquiv := ContinuousMap.sumEquiv X Y Z
--   continuous_toFun := continuous_compactOpen.mpr fun K hK U hU ‚Ü¶ by
--     sorry
--   continuous_invFun := sorry

end MissingHomeomorph

section MissingCompactOpen

namespace ContinuousMap

variable {X‚ÇÅ X‚ÇÇ Y : Type*} (Z : Type*) {i‚ÇÅ : X‚ÇÅ ‚Üí Y} {i‚ÇÇ : X‚ÇÇ ‚Üí Y}
    [TopologicalSpace X‚ÇÅ] [TopologicalSpace X‚ÇÇ] [TopologicalSpace Y]
    [UniformSpace Z]

-- TODO:
-- 1) make proof cleaner (do we really need bases ? One inequality should be easy at least)
-- 2) generalize to UniformOnFun
-- 3) can we do a purely topological statement ?
lemma foo (hi‚ÇÅ : ClosedEmbedding i‚ÇÅ) (hi‚ÇÇ : ClosedEmbedding i‚ÇÇ) (hi : range i‚ÇÅ ‚à™ range i‚ÇÇ = univ) :
    (inferInstance : UniformSpace C(Y, Z)) =
      (.comap (fun f ‚Ü¶ f.comp ‚ü®i‚ÇÅ, hi‚ÇÅ.continuous‚ü©) inferInstance)
      ‚äì (.comap (fun f ‚Ü¶ f.comp ‚ü®i‚ÇÇ, hi‚ÇÇ.continuous‚ü©) inferInstance) := UniformSpace.ext <| by
  rw [@inf_uniformity C(Y, Z) (.comap _ _) (.comap _ _), uniformity_comap, uniformity_comap]
  refine hasBasis_compactConvergenceUniformity.ext
    (hasBasis_compactConvergenceUniformity.comap _ |>.inf <|
      hasBasis_compactConvergenceUniformity.comap _) ?_ ?_
  ¬∑ rintro ‚ü®K, U‚ü© ‚ü®hK, hU‚ü©
    refine ‚ü®‚ü®‚ü®i‚ÇÅ ‚Åª¬π' K, U‚ü©, ‚ü®i‚ÇÇ ‚Åª¬π' K, U‚ü©‚ü©,
      ‚ü®‚ü®hi‚ÇÅ.isCompact_preimage hK, hU‚ü©, ‚ü®hi‚ÇÇ.isCompact_preimage hK, hU‚ü©‚ü©,
      fun ‚ü®f, g‚ü© ‚ü®hfg‚ÇÅ, hfg‚ÇÇ‚ü© y hy ‚Ü¶ ?_‚ü©
    have : y ‚àà range i‚ÇÅ ‚à™ range i‚ÇÇ := hi.ge trivial
    rcases this with ‚ü®x‚ÇÅ, rfl‚ü© | ‚ü®x‚ÇÇ, rfl‚ü©
    ¬∑ exact hfg‚ÇÅ x‚ÇÅ hy
    ¬∑ exact hfg‚ÇÇ x‚ÇÇ hy
  ¬∑ rintro ‚ü®‚ü®K‚ÇÅ, U‚ÇÅ‚ü©, ‚ü®K‚ÇÇ, U‚ÇÇ‚ü©‚ü© ‚ü®‚ü®hK‚ÇÅ, hU‚ÇÅ‚ü©, ‚ü®hK‚ÇÇ, hU‚ÇÇ‚ü©‚ü©
    exact ‚ü®‚ü®i‚ÇÅ '' K‚ÇÅ ‚à™ i‚ÇÇ '' K‚ÇÇ, U‚ÇÅ ‚à© U‚ÇÇ‚ü©,
      ‚ü®hK‚ÇÅ.image hi‚ÇÅ.continuous |>.union <| hK‚ÇÇ.image hi‚ÇÇ.continuous, Filter.inter_mem hU‚ÇÅ hU‚ÇÇ‚ü©,
      fun ‚ü®f, g‚ü© hfg ‚Ü¶
        ‚ü®fun x‚ÇÅ hx‚ÇÅ ‚Ü¶ inter_subset_left _ U‚ÇÇ <| hfg (i‚ÇÅ x‚ÇÅ) <| .inl <| mem_image_of_mem _ hx‚ÇÅ,
          fun x‚ÇÇ hx‚ÇÇ ‚Ü¶ inter_subset_right U‚ÇÅ _ <| hfg (i‚ÇÇ x‚ÇÇ) <| .inr <| mem_image_of_mem _ hx‚ÇÇ‚ü©‚ü©

end ContinuousMap

end MissingCompactOpen
namespace ContinuousMapZero

section Uniform

variable {X Y R : Type*} [TopologicalSpace X] [Zero X]
variable [UniformSpace R] [Zero R]

-- TODO: clean a bit
-- This is the only thing still needed from this file
lemma uniformInducing_precomp_toContinuousMap_of_almost_surj [T1Space X] [TopologicalSpace Y]
    {i : Y ‚Üí X} (hi‚ÇÅ : ClosedEmbedding i) (hi‚ÇÇ : range i ‚à™ {0} = univ) :
    UniformInducing (fun f : C(X, R)‚ÇÄ ‚Ü¶ f.toContinuousMap.comp ‚ü®i, hi‚ÇÅ.continuous‚ü©) where
  comap_uniformity := by
    have := ContinuousMap.foo R hi‚ÇÅ (isClosed_singleton (x := 0)).closedEmbedding_subtype_val
      (by simpa using hi‚ÇÇ)
    simp_rw [ContinuousMapZero.instUniformSpace, this, uniformity_comap,
      @inf_uniformity _ (.comap _ _) (.comap _ _), uniformity_comap, Filter.comap_inf,
      Filter.comap_comap]
    refine .symm <| inf_eq_left.mpr <| le_top.trans <| eq_top_iff.mp ?_
    have : ‚àÄ U ‚àà ùì§ (C(({0} : Set X), R)), (0, 0) ‚àà U := fun U hU ‚Ü¶ refl_mem_uniformity hU
    convert Filter.comap_const_of_mem this with ‚ü®f, g‚ü© <;>
    ext ‚ü®x, rfl‚ü© <;>
    [exact map_zero f; exact map_zero g]

end Uniform

section Semiring

variable {X R : Type*} [TopologicalSpace X] [Zero X]
variable [TopologicalSpace R] [CommSemiring R] [TopologicalSemiring R]


instance instContinuousMapSMul : SMul C(X, R) C(X, R)‚ÇÄ where
  smul f g‚ÇÄ := ‚ü®f * g‚ÇÄ, by simp‚ü©

instance instContinuousMapModule : Module C(X, R) C(X, R)‚ÇÄ :=
  toContinuousMap_injective.module C(X, R)
    ({ toFun := toContinuousMap, map_add' := fun _ _ ‚Ü¶ rfl, map_zero' := rfl})
    fun _ _ ‚Ü¶ rfl

lemma smul_coe (f : C(X, R)) (g‚ÇÄ : C(X, R)‚ÇÄ) : f ‚Ä¢ (g‚ÇÄ : C(X, R)) = ‚Üë(f ‚Ä¢ g‚ÇÄ) := rfl

@[simp] lemma coe_smul' (g : C(X, R)) (f : C(X, R)‚ÇÄ) : ‚áë(g ‚Ä¢ f) = ‚áëg ‚Ä¢ ‚áëf := rfl

lemma closedEmbedding_toContinuousMapHom [T1Space R] [StarRing R] [ContinuousStar R] :
    ClosedEmbedding (toContinuousMapHom (X := X) (R := R)) where
  induced := rfl
  inj f g h := ext fun x ‚Ü¶ congr($(h) x)
  isClosed_range := by
    convert isClosed_singleton (x := (0 : R)) |>.preimage <|
      ContinuousMap.continuous_eval_const (0 : X)
    ext f
    simp only [Set.mem_range, toContinuousMapHom_apply, Set.mem_preimage, Set.mem_singleton_iff]
    constructor
    ¬∑ rintro ‚ü®f, rfl‚ü©
      exact map_zero f
    ¬∑ intro hf
      exact ‚ü®‚ü®f, hf‚ü©, rfl‚ü©

@[simps]
def toContinuousMapHomL : C(X, R)‚ÇÄ ‚ÜíL[C(X, R)] C(X, R) where
  toFun := toContinuousMap
  map_add' _ _ := rfl
  map_smul' _ _ := rfl
  cont := continuous_induced_dom

end Semiring

section Ring

variable {X R : Type*} [TopologicalSpace X] [Zero X]
variable [TopologicalSpace R] [CommRing R] [TopologicalRing R]

@[simps!]
noncomputable def ofContinuousMap : C(X, R) ‚ÜíL[R] C(X, R)‚ÇÄ where
  toFun f := ‚ü®f - algebraMap R C(X, R) (f 0), by simp‚ü©
  map_add' f g := by ext; simp [sub_add_sub_comm]
  map_smul' r f := by ext; simp [mul_sub]
  cont := by
    simp only [continuous_induced_rng, Function.comp]
    exact continuous_id.sub <| ContinuousMap.continuous_const'.comp <|
      ContinuousMap.continuous_eval_const (0 : X)

lemma surjective_ofContinuousMap : Function.Surjective (ofContinuousMap (X := X) (R := R)) :=
  fun f ‚Ü¶ ‚ü®f, by ext; simp‚ü©

-- missing instance!
instance [LocallyCompactSpace X] : TopologicalSemiring C(X, R) := by exact TopologicalSemiring.mk

-- missing `fun_prop` attributes!
attribute [fun_prop] continuous_algebraMap ContinuousMap.continuous_eval_const

lemma ofContinuousMap_of_map_zero (f‚ÇÄ : C(X, R)‚ÇÄ) :
    ofContinuousMap (X := X) (R := R) f‚ÇÄ = f‚ÇÄ := by
  ext; simp

lemma ofContinuousMap_of_map_zero' (f : C(X, R)) (hf : f 0 = 0) :
    ofContinuousMap (X := X) (R := R) f = ‚ü®f, hf‚ü© :=
  ofContinuousMap_of_map_zero ‚ü®f, hf‚ü©

@[simp]
lemma StarAlgHom.toFun_eq_coe {R A B : Type*} [CommSemiring R] [Semiring A] [Algebra R A] [Star A]
    [Semiring B] [Algebra R B] [Star B] (f : A ‚Üí‚ãÜ‚Çê[R] B) :
    f.toFun = ‚áëf :=
  rfl

open Unitization in
noncomputable def unitizationStarAlgEquiv [StarRing R] [ContinuousStar R] :
    Unitization R C(X, R)‚ÇÄ ‚âÉ‚ãÜ‚Çê[R] C(X, R) where
  __ := starLift (toContinuousMapHom (X := X) (R := R))
  invFun := fun f ‚Ü¶ algebraMap R _ (f 0) + (ContinuousMapZero.ofContinuousMap (X := X) (R := R) f)
  left_inv u := by
    ext1
    ¬∑ rw [fst_add, fst_inr, add_zero, algebraMap_eq_inl, fst_inl, StarAlgHom.toFun_eq_coe]
      simp
    ¬∑ ext x
      simp [algebraMap_eq_inl]
  right_inv f := by
    ext x
    simp only [StarAlgHom.toFun_eq_coe, starLift_apply_apply]
    simp [algebraMap_eq_inl]
  map_smul' r u := (starLift (toContinuousMapHom (X := X) (R := R))).map_smul r u

end Ring
