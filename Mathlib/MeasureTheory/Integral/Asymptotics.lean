/-
Copyright (c) 2024 Lawrence Wu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Lawrence Wu
-/
import Mathlib.MeasureTheory.Integral.IntegrableOn
import Mathlib.MeasureTheory.Integral.SetIntegral

/-!
# Bounding of integrals by asymptotics

We establish integrability of `f` from `f = O(g)`.

## Main results

* `Asymptotics.IsBigO.integrableAtFilter`: If `f = O[l] g` on measurably generated `l`,
  `f` is strongly measurable at `l`, and `g` is integrable at `l`, then `f` is integrable at `l`.
-/

open Asymptotics MeasureTheory Set Filter

variable {Œ± E F : Type*} [MeasurableSpace Œ±] [NormedAddCommGroup E] [NormedAddCommGroup F]
  {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {a b : Œ±} {Œº : Measure Œ±} {l : Filter Œ±}

/-- If `f = O[l] g` on measurably generated `l`, `f` is strongly measurable at `l`,
and `g` is integrable at `l`, then `f` is integrable at `l`. -/
theorem _root_.Asymptotics.IsBigO.integrableAtFilter [IsMeasurablyGenerated l]
    (hf : f =O[l] g) (hfm : StronglyMeasurableAtFilter f l Œº) (hg : IntegrableAtFilter g l Œº) :
    IntegrableAtFilter f l Œº := by
  obtain ‚ü®C, hC‚ü© := hf.bound
  obtain ‚ü®s, hsl, hsm, hfg, hf, hg‚ü© :=
    (hC.smallSets.and <| hfm.eventually.and hg.eventually).exists_measurable_mem_of_smallSets
  refine ‚ü®s, hsl, (hg.norm.const_mul C).mono hf ?_‚ü©
  refine (ae_restrict_mem hsm).mono fun x hx ‚Ü¶ ?_
  exact (hfg x hx).trans (le_abs_self _)

/-- Variant of `MeasureTheory.Integrable.mono` taking `f =O[‚ä§] (g)` instead of `‚Äñf(x)‚Äñ ‚â§ ‚Äñg(x)‚Äñ` -/
theorem _root_.Asymptotics.IsBigO.integrable (hfm : AEStronglyMeasurable f Œº)
    (hf : f =O[‚ä§] g) (hg : Integrable g Œº) : Integrable f Œº := by
  rewrite [‚Üê integrableAtFilter_top] at *
  exact hf.integrableAtFilter ‚ü®univ, univ_mem, hfm.restrict‚ü© hg

namespace Asymptotics

section Uniform

variable {Œπ : Type*} [MeasurableSpace Œπ] {f : Œπ √ó Œ± ‚Üí E} {s : Set Œπ} {Œº : Measure Œπ}

/-- Let `f : X x Y ‚Üí Z`. If as y ‚Üí l, f(x, y) = O(g(y)) uniformly on `s : Set X` of finite measure,
then f is eventually (as y ‚Üí l) integrable along `s`. -/
theorem IsBigO.eventually_integrableOn [Norm F]
    (hf : f =O[ùìü s √óÀ¢ l] fun (_i, x) ‚Ü¶ g x)
    (hfm : ‚àÄ·∂† x in l, AEStronglyMeasurable (fun i ‚Ü¶ f (i, x)) (Œº.restrict s))
    (hs : MeasurableSet s) (hŒº : Œº s < ‚ä§) :
    ‚àÄ·∂† x in l, IntegrableOn (fun i ‚Ü¶ f (i, x)) s Œº := by
  obtain ‚ü®C, hC‚ü© := hf.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  obtain ‚ü®w, hwl, hw‚ü© := hfm.exists_mem
  refine eventually_iff_exists_mem.mpr ‚ü®w ‚à© v, inter_mem hwl hv, fun x hx ‚Ü¶ ?_‚ü©
  haveI : IsFiniteMeasure (Œº.restrict s) := ‚ü®by rw [Measure.restrict_apply_univ s]; exact hŒº‚ü©
  refine Integrable.mono' (integrable_const (C * ‚Äñg x‚Äñ)) (hw x hx.1) ?_
  filter_upwards [MeasureTheory.self_mem_ae_restrict hs]
  intro y hy
  exact ht (y, x) <| huv ‚ü®hu hy, hx.2‚ü©

variable [NormedSpace ‚Ñù E] [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

/-- Let `f : X x Y ‚Üí Z`. If as y ‚Üí l, f(x, y) = O(g(y)) uniformly on `s : Set X` of finite measure,
then the integral of f along s is O(g(y)). -/
theorem IsBigO.set_integral_isBigO
    (hf : f =O[ùìü s √óÀ¢ l] fun (_i, x) ‚Ü¶ g x) (hs : MeasurableSet s) (hŒº : Œº s < ‚ä§)  :
    (fun x ‚Ü¶ ‚à´ i in s, f (i, x) ‚àÇŒº) =O[l] g := by
  obtain ‚ü®C, hC‚ü© := hf.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  refine isBigO_iff.mpr ‚ü®C * (Œº s).toReal, eventually_iff_exists_mem.mpr ‚ü®v, hv, fun x hx ‚Ü¶ ?_‚ü©‚ü©
  rewrite [mul_assoc, ‚Üê smul_eq_mul (a' := ‚Äñg x‚Äñ), ‚Üê MeasureTheory.Measure.restrict_apply_univ,
    ‚Üê integral_const, mul_comm, ‚Üê smul_eq_mul, ‚Üê integral_smul_const]
  haveI : IsFiniteMeasure (Œº.restrict s) := ‚ü®by rw [Measure.restrict_apply_univ s]; exact hŒº‚ü©
  refine (norm_integral_le_integral_norm _).trans <|
    integral_mono_of_nonneg (univ_mem' fun _ ‚Ü¶ norm_nonneg _) (integrable_const _) ?_
  filter_upwards [MeasureTheory.self_mem_ae_restrict hs]
  intro y hy
  rewrite [smul_eq_mul, mul_comm]
  exact ht (y, x) <| huv ‚ü®hu hy, hx‚ü©

end Uniform

end Asymptotics
