import Mathlib.UnitBox
import Mathlib.FundamentalCone

noncomputable section

open Submodule Fintype Bornology Filter Topology MeasureTheory

open scoped Pointwise

variable {E Œπ : Type*} [Fintype Œπ] [NormedAddCommGroup E] [NormedSpace ‚Ñù E] (b : Basis Œπ ‚Ñù E)

variable (X : Set E) (hX : ‚àÄ ‚¶Éx : E‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 ‚â§ r ‚Üí r ‚Ä¢ x ‚àà X)

variable (F : E ‚Üí ‚Ñù) (hF‚ÇÅ : ‚àÄ (x : E) ‚¶Ér : ‚Ñù‚¶Ñ, 0 ‚â§ r ‚Üí  F (r ‚Ä¢ x) = r ^ card Œπ * (F x))
  (hF‚ÇÇ : IsBounded {x | F x ‚â§ 1})

open Submodule

example {B : ‚Ñù} (hB : 0 < B) :
    Nat.card ({x ‚àà X  | F x ‚â§ B ^ card Œπ} ‚à© span ‚Ñ§ (Set.range b) : Set E) =
      Nat.card ({x ‚àà X | F x ‚â§ 1 } ‚à© B‚Åª¬π ‚Ä¢ (span ‚Ñ§ (Set.range b)) : Set E) := by
  have hB‚ÇÇ : 0 ‚â§ B‚Åª¬π := inv_nonneg.mpr (le_of_lt hB)
  have hB‚ÇÉ : B‚Åª¬π ‚â† 0 := inv_ne_zero (ne_of_gt hB)
  refine Nat.card_congr <| Equiv.subtypeEquiv (Equiv.smulRight hB‚ÇÉ) (fun a ‚Ü¶ ?_)
  simp_rw [Set.mem_inter_iff, Set.mem_setOf_eq, Equiv.smulRight_apply, Set.smul_mem_smul_set_iff‚ÇÄ
    hB‚ÇÉ, SetLike.mem_coe, hF‚ÇÅ a hB‚ÇÇ, inv_pow, inv_mul_le_iff (pow_pos hB _), mul_one,
    and_congr_left_iff]
  refine fun _ _ ‚Ü¶ ‚ü®fun h ‚Ü¶ hX h hB‚ÇÇ, fun h ‚Ü¶ ?_‚ü©
  convert hX h (le_of_lt hB)
  rw [smul_inv_smul‚ÇÄ (ne_of_gt hB)]

example :
    Tendsto (fun n : ‚Ñï ‚Ü¶
      Nat.card ({x ‚àà X  | F x ‚â§ n} ‚à© span ‚Ñ§ (Set.range b) : Set E) / (n : ‚Ñù))
      atTop (ùìù (volume (b.equivFun ''  {x | F x ‚â§ 1})).toReal) := sorry
