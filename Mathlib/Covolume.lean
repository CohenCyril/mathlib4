import Mathlib.UnitBox
import Mathlib.FundamentalCone
import Mathlib.Algebra.Module.Zlattice.Covolume

noncomputable section

open Submodule Fintype Bornology Filter Topology MeasureTheory MeasureTheory.Measure BoxIntegral

open scoped Pointwise

-- Do not use a basis but a IsZlattice instead
variable {E Œπ : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] -- (b : Basis Œπ ‚Ñù E)
variable  (L : AddSubgroup E) [DiscreteTopology L] [IsZlattice ‚Ñù L]

variable (c : ‚Ñù) (s : Set E)

abbrev LatticePoints  : Set E := s ‚à© c‚Åª¬π ‚Ä¢ span ‚Ñ§ (Set.range b)

def LatticeCountingFunction := Nat.card (LatticePoints b c s)

variable [Fintype Œπ]

theorem toto2 (hc : c ‚â† 0) : LatticeCountingFunction b c s =
    CountingFunction c (b.equivFun '' s) := by
  refine Nat.card_congr (b.equivFun.toEquiv.subtypeEquiv fun x ‚Ü¶ ?_)
  simp_rw [Set.mem_inter_iff, LinearEquiv.coe_toEquiv, Basis.equivFun_apply, Set.mem_image,
    DFunLike.coe_fn_eq, EmbeddingLike.apply_eq_iff_eq, exists_eq_right, and_congr_right_iff,
    Set.mem_inv_smul_set_iff‚ÇÄ hc, ‚Üê Finsupp.coe_smul, ‚Üê LinearEquiv.map_smul, SetLike.mem_coe,
    Basis.mem_span_iff_repr_mem, Pi.basisFun_repr, implies_true]

variable [MeasurableSpace E] [BorelSpace E]

theorem main2 (hs‚ÇÅ : Bornology.IsBounded s) (hs‚ÇÇ : MeasurableSet s) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (LatticeCountingFunction b n s : ‚Ñù) / n ^ card Œπ)
      atTop (ùìù (volume (b.equivFun '' s)).toReal) := by
  haveI : FiniteDimensional ‚Ñù E := FiniteDimensional.of_fintype_basis b
  refine Tendsto.congr' ?_ (main' (b.equivFun '' s) ?_ ?_)
  ¬∑ filter_upwards [eventually_gt_atTop 0]
    intro c hc
    congr
    have := toto2 b c s ?_
    exact this.symm
    rw [Nat.cast_ne_zero]
    refine ne_of_gt hc
  ¬∑ rw [‚Üê NormedSpace.isVonNBounded_iff ‚Ñù] at hs‚ÇÅ ‚ä¢
    have := Bornology.IsVonNBounded.image (E := E) (F := Œπ ‚Üí ‚Ñù) (œÉ := RingHom.id ‚Ñù) hs‚ÇÅ
    erw [‚Üê LinearMap.coe_toContinuousLinearMap']
    exact this _
  ¬∑ rw [LinearEquiv.image_eq_preimage]
    have : Continuous b.equivFun.symm := by
      exact LinearMap.continuous_of_finiteDimensional _
    have : Measurable b.equivFun.symm := by
      exact Continuous.measurable this
    exact this hs‚ÇÇ

variable (b‚ÇÄ : Basis Œπ ‚Ñù (Œπ ‚Üí ‚Ñù)) (s‚ÇÄ : Set (Œπ ‚Üí ‚Ñù)) (hs‚ÇÄ‚ÇÅ : Bornology.IsBounded s‚ÇÄ)
  (hs‚ÇÄ‚ÇÇ : MeasurableSet s‚ÇÄ)

theorem main3 :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (LatticeCountingFunction b‚ÇÄ n s‚ÇÄ : ‚Ñù) / n ^ card Œπ)
      atTop (ùìù (|(LinearEquiv.det b‚ÇÄ.equivFun : ‚Ñù)| * (volume s‚ÇÄ).toReal)) := by
  convert main2 b‚ÇÄ s‚ÇÄ hs‚ÇÄ‚ÇÅ hs‚ÇÄ‚ÇÇ using 2
  rw [LinearEquiv.image_eq_preimage]
  rw [‚Üê MeasureTheory.Measure.map_apply‚ÇÄ]
  ¬∑ erw [Real.map_linearMap_volume_pi_eq_smul_volume_pi]
    ¬∑ rw [LinearEquiv.det_coe_symm, inv_inv]
      simp only [LinearEquiv.coe_det, smul_toOuterMeasure, OuterMeasure.coe_smul, Pi.smul_apply,
        smul_eq_mul, ENNReal.toReal_mul, abs_nonneg, ENNReal.toReal_ofReal]
    ¬∑ refine IsUnit.ne_zero ?_
      exact LinearEquiv.isUnit_det' _
  ¬∑ have : Continuous b‚ÇÄ.equivFun.symm := by
      exact LinearMap.continuous_of_finiteDimensional _
    exact Continuous.aemeasurable this
  ¬∑ exact MeasurableSet.nullMeasurableSet hs‚ÇÄ‚ÇÇ

variable (X : Set E) (hX : ‚àÄ ‚¶Éx : E‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 ‚â§ r ‚Üí r ‚Ä¢ x ‚àà X)

variable (F : E ‚Üí ‚Ñù) (hF‚ÇÅ : ‚àÄ (x : E) ‚¶Ér : ‚Ñù‚¶Ñ, 0 ‚â§ r ‚Üí  F (r ‚Ä¢ x) = r ^ card Œπ * (F x))
  (hF‚ÇÇ : IsBounded {x | F x ‚â§ 1}) (hF‚ÇÉ : MeasurableSet {x | F x ‚â§ 1})

open Submodule

theorem tool (B : ‚Ñù) (hB : 0 < B) :
    Nat.card ({x ‚àà X  | F x ‚â§ B ^ card Œπ} ‚à© span ‚Ñ§ (Set.range b) : Set E) =
      Nat.card ({x ‚àà X | F x ‚â§ 1 } ‚à© B‚Åª¬π ‚Ä¢ (span ‚Ñ§ (Set.range b)) : Set E) := by
  have hB‚ÇÇ : 0 ‚â§ B‚Åª¬π := inv_nonneg.mpr (le_of_lt hB)
  have hB‚ÇÉ : B‚Åª¬π ‚â† 0 := inv_ne_zero (ne_of_gt hB)
  refine Nat.card_congr <| Equiv.subtypeEquiv (Equiv.smulRight hB‚ÇÉ) (fun a ‚Ü¶ ?_)
  simp_rw [Set.mem_inter_iff, Set.mem_setOf_eq, Equiv.smulRight_apply, Set.smul_mem_smul_set_iff‚ÇÄ
    hB‚ÇÉ, SetLike.mem_coe, hF‚ÇÅ a hB‚ÇÇ, inv_pow, inv_mul_le_iff (pow_pos hB _), mul_one,
    and_congr_left_iff]
  refine fun _ _ ‚Ü¶ ‚ü®fun h ‚Ü¶ hX h hB‚ÇÇ, fun h ‚Ü¶ ?_‚ü©
  convert hX h (le_of_lt hB)
  rw [smul_inv_smul‚ÇÄ (ne_of_gt hB)]

example [Nonempty Œπ] :
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© span ‚Ñ§ (Set.range b) : Set E) / (c : ‚Ñù))
        atTop (ùìù (volume (b.equivFun '' {x ‚àà X | F x ‚â§ 1})).toReal) := by
  have t0 := main (b.equivFun '' {x ‚àà X | F x ‚â§ 1}) ?_ ?_ ?_
  have t1 : Tendsto (fun x : ‚Ñù ‚Ü¶ x ^ (card Œπ : ‚Ñù)‚Åª¬π) atTop atTop := ?_
  have := Tendsto.comp t0 t1
  refine Tendsto.congr' ?_ this
  filter_upwards [eventually_gt_atTop 0] with c hc
  ¬∑ rw [Function.comp_apply, ‚Üê toto2, LatticeCountingFunction, LatticePoints, ‚Üê tool _ _ hX,
      ‚Üê Real.rpow_nat_cast, Real.rpow_inv_rpow]
    ¬∑ exact le_of_lt hc -- 0 ‚â§ c
    ¬∑ rw [Nat.cast_ne_zero]
      exact card_ne_zero -- card Œπ ‚â† 0
    ¬∑ exact hF‚ÇÅ
    ¬∑ exact Real.rpow_pos_of_pos hc _ -- 0 < c ^ (card Œπ)‚Åª¬π
    ¬∑ exact ne_of_gt (Real.rpow_pos_of_pos hc _) -- c ^ (card Œπ)‚Åª¬π ‚â† 0
  ¬∑ refine tendsto_rpow_atTop ?_
    rw [inv_pos, Nat.cast_pos]
    exact card_pos
  ¬∑ sorry
  ¬∑ sorry
  ¬∑ intro c c' h‚ÇÅ h‚ÇÇ
    have i‚ÇÅ : 0 ‚â§ c'‚Åª¬π * c := by
      refine mul_nonneg ?_ ?_
      refine inv_nonneg.mpr ?_
      exact le_trans (le_of_lt h‚ÇÅ) h‚ÇÇ
      exact le_of_lt h‚ÇÅ
    simp_rw [‚Üê image_smul_set]
    refine Set.image_mono ?_
    intro _
    rw [Set.mem_smul_set, Set.mem_smul_set]
    rintro ‚ü®x, ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, rfl‚ü©
    refine ‚ü®(c'‚Åª¬π * c) ‚Ä¢ x, ‚ü®?_, ?_‚ü©, ?_‚ü©
    ¬∑ refine hX hx‚ÇÅ ?_
      exact i‚ÇÅ
    ¬∑ rw [hF‚ÇÅ x ?_, mul_comm]
      refine mul_le_one hx‚ÇÇ ?_ ?_
      ¬∑ refine pow_nonneg i‚ÇÅ _ --  0 ‚â§ (c'‚Åª¬π * c) ^ card Œπ
      ¬∑ refine pow_le_one _ ?_ ?_
        exact i‚ÇÅ
        rwa [inv_mul_le_iff', one_mul]
        exact lt_of_lt_of_le h‚ÇÅ h‚ÇÇ
      ¬∑ exact i‚ÇÅ
    ¬∑ rw [‚Üê smul_assoc, smul_eq_mul, mul_inv_cancel_left‚ÇÄ]
      refine ne_of_gt ?_
      exact lt_of_lt_of_le h‚ÇÅ h‚ÇÇ
