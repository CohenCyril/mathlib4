/-
Copyright (c) 2023 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import Mathlib.Analysis.ODE.Gronwall
import Mathlib.Analysis.ODE.PicardLindelof
import Mathlib.Geometry.Manifold.InteriorBoundary
import Mathlib.Geometry.Manifold.MFDeriv

/-!
# Integral curves of vector fields on a manifold

For any continuously differentiable vector field on a manifold `M` and any chosen interior point
`x‚ÇÄ : M`, there exists an integral curve `Œ≥ : ‚Ñù ‚Üí M` such that `Œ≥ t‚ÇÄ = x‚ÇÄ` and the tangent vector of
`Œ≥` at `t` coincides with the vector field at `Œ≥ t` for all `t` within an open interval around `t‚ÇÄ`.

As a corollary, such an integral curve exists for any starting point `x‚ÇÄ` if `M` is a manifold
without boundary.

## Main definition

Let `v : M ‚Üí TM` be a vector field on `M`, and let `Œ≥ : ‚Ñù ‚Üí M`.
- **`IsIntegralCurve Œ≥ v`**: `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t : ‚Ñù`. That is, `Œ≥` is a global
integral curve of `v`.
- **`IsIntegralCurveOn Œ≥ v s`**: `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t ‚àà s`, where `s : Set ‚Ñù`.
- **`IsIntegralCurveAt Œ≥ v t‚ÇÄ`**: `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t` in some open interval
around `t‚ÇÄ`. That is, `Œ≥` is a local integral curve of `v`.

For `IsIntegralCurveOn Œ≥ v s` and `IsIntegralCurveAt Œ≥ v t‚ÇÄ`, even though `Œ≥` is defined for all
time, its value outside of the set `s` or a small interval around `t‚ÇÄ` is irrelevant and considered
junk.

## To-do

- Prove `comp_add`, `comp_smul` , etc. lemmas for `IsIntegralCurveOn`, and then derive versions for
`IsIntegralCurveAt` and `IsIntegralCurve` as corollaries.

## Tags

integral curve, vector field, local existence
-/

open scoped Manifold
open Set

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {H : Type*} [TopologicalSpace H] {I : ModelWithCorners ‚Ñù E H}
  {M : Type*} [TopologicalSpace M] [ChartedSpace H M] [SmoothManifoldWithCorners I M]
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ‚Ñù E']
  {H' : Type*} [TopologicalSpace H'] {I' : ModelWithCorners ‚Ñù E' H'}
  {M' : Type*} [TopologicalSpace M'] [ChartedSpace H' M'] [SmoothManifoldWithCorners I' M']
  {v : (x : M) ‚Üí TangentSpace I x} {x‚ÇÄ : M}
  (hv : ContMDiffAt I I.tangent 1 (fun x => (‚ü®x, v x‚ü© : TangentBundle I M)) x‚ÇÄ)
  {s : Set ‚Ñù} {t‚ÇÄ : ‚Ñù}


/-- If `Œ≥ : ‚Ñù ‚Üí M`, `v : M ‚Üí TM` is a vector field on `M`, and `s ‚àà Set ‚Ñù`,
  `IsIntegralCurveOn Œ≥ v s` means `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t ‚àà s`. The value of `Œ≥`
  outside of `s` is irrelevant and considered junk.  -/
def IsIntegralCurveOn (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) (s : Set ‚Ñù) :=
  ‚àÄ (t : ‚Ñù), t ‚àà s ‚Üí HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight (v (Œ≥ t)))

/-- If `v : M ‚Üí TM` is a vector field on `M`, and `t‚ÇÄ : ‚Ñù`, `IsIntegralCurveAt Œ≥ v t‚ÇÄ` means
  `Œ≥ : ‚Ñù ‚Üí M` is a local integral curve of `v` in an open interval of `t‚ÇÄ`. That is, there exists
  `Œµ > 0` such that `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ)`. The value of
  `Œ≥` outside of this interval is irrelevant and considered junk. -/
def IsIntegralCurveAt (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) (t : ‚Ñù) :=
  ‚àÉ Œµ > (0 : ‚Ñù), IsIntegralCurveOn Œ≥ v (Ioo (t - Œµ) (t + Œµ))

/-- If `v : M ‚Üí TM` is a vector field on `M`, `IsIntegralCurve Œ≥ v` means `Œ≥ : ‚Ñù ‚Üí M` is a global
  integral curve of `v`. That is, `Œ≥ t` is tangent to `v (Œ≥ t)` for all `t : ‚Ñù`. -/
def IsIntegralCurve (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) :=
  ‚àÄ t : ‚Ñù, HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight (v (Œ≥ t)))

lemma IsIntegralCurve.isIntegralCurveOn {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x}
    (h : IsIntegralCurve Œ≥ v) (s : Set ‚Ñù) : IsIntegralCurveOn Œ≥ v s := fun t _ => h t

lemma isIntegralCurve_iff_isIntegralCurveOn {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} :
    IsIntegralCurve Œ≥ v ‚Üî IsIntegralCurveOn Œ≥ v univ :=
  ‚ü®fun h => h.isIntegralCurveOn _, fun h t => h t (mem_univ _)‚ü©

lemma IsIntegralCurve.isIntegralCurveAt {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x}
    (h : IsIntegralCurve Œ≥ v) (t : ‚Ñù) : IsIntegralCurveAt Œ≥ v t :=
  ‚ü®1, zero_lt_one, fun t _ => h t‚ü©

lemma isIntegralCurve_iff_isIntegralCurveAt {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} :
    IsIntegralCurve Œ≥ v ‚Üî ‚àÄ t : ‚Ñù, IsIntegralCurveAt Œ≥ v t :=
  ‚ü®fun h => h.isIntegralCurveAt, fun h t => by
    obtain ‚ü®Œµ, hŒµ, h‚ü© := h t
    exact h t (Real.ball_eq_Ioo _ _ ‚ñ∏ Metric.mem_ball_self hŒµ)‚ü©

lemma IsIntegralCurveOn.mono {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} {s : Set ‚Ñù}
    (h : IsIntegralCurveOn Œ≥ v s) {s' : Set ‚Ñù} (hs : s' ‚äÜ s) : IsIntegralCurveOn Œ≥ v s' :=
  fun t ht => h t (mem_of_mem_of_subset ht hs)

lemma IsIntegralCurveOn.isIntegralCurveAt {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} {s : Set ‚Ñù}
    (h : IsIntegralCurveOn Œ≥ v s) {t : ‚Ñù} (hs : s ‚àà nhds t) : IsIntegralCurveAt Œ≥ v t := by
  rw [Metric.mem_nhds_iff] at hs
  obtain ‚ü®Œµ, hŒµ, hmem‚ü© := hs
  exact ‚ü®Œµ, hŒµ, Real.ball_eq_Ioo _ _ ‚ñ∏ h.mono hmem‚ü©

lemma IsIntegralCurveAt.isIntegralCurveOn {Œ≥ : ‚Ñù ‚Üí M} {v : (x : M) ‚Üí TangentSpace I x} {s : Set ‚Ñù}
    (h : ‚àÄ t ‚àà s, IsIntegralCurveAt Œ≥ v t) : IsIntegralCurveOn Œ≥ v s := by
  intros t ht
  obtain ‚ü®Œµ, hŒµ, h‚ü© := h t ht
  exact h t (Real.ball_eq_Ioo _ _ ‚ñ∏ Metric.mem_ball_self hŒµ)

/-! ### Translation lemmas -/

lemma IsIntegralCurveOn.comp_add {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveOn Œ≥ v s) (dt : ‚Ñù) :
    IsIntegralCurveOn (Œ≥ ‚àò (¬∑ + dt)) v { t | t + dt ‚àà s } := by
  intros t ht
  rw [Function.comp_apply,
    ‚Üê ContinuousLinearMap.comp_id (ContinuousLinearMap.smulRight 1 (v (Œ≥ (t + dt))))]
  apply HasMFDerivAt.comp t (hŒ≥ (t + dt) ht)
  refine ‚ü®(continuous_add_right _).continuousAt, ?_‚ü©
  simp only [mfld_simps, hasFDerivWithinAt_univ]
  exact HasFDerivAt.add_const (hasFDerivAt_id _) _

lemma isIntegralCurveOn_comp_add {Œ≥ : ‚Ñù ‚Üí M} {dt : ‚Ñù} : IsIntegralCurveOn Œ≥ v s ‚Üî
    IsIntegralCurveOn (Œ≥ ‚àò (¬∑ + dt)) v { t | t + dt ‚àà s } := by
  refine ‚ü®fun hŒ≥ => hŒ≥.comp_add _, fun hŒ≥ => ?_‚ü©
  have := hŒ≥.comp_add (-dt)
  simp only [mem_setOf_eq, neg_add_cancel_right, setOf_mem_eq] at this
  convert this
  ext
  simp only [Function.comp_apply, neg_add_cancel_right]

lemma IsIntegralCurveAt.comp_add {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) (dt : ‚Ñù) :
    IsIntegralCurveAt (Œ≥ ‚àò (¬∑ + dt)) v (t‚ÇÄ - dt) := by
  obtain ‚ü®Œµ, hŒµ, h‚ü© := hŒ≥
  refine ‚ü®Œµ, hŒµ, ?_‚ü©
  convert h.comp_add dt
  ext t'
  rw [sub_right_comm, sub_add_eq_add_sub, ‚Üê add_mem_Ioo_iff_left]
  rfl

lemma isIntegralCurveAt_comp_add {Œ≥ : ‚Ñù ‚Üí M} {dt : ‚Ñù} : IsIntegralCurveAt Œ≥ v t‚ÇÄ ‚Üî
    IsIntegralCurveAt (Œ≥ ‚àò (¬∑ + dt)) v (t‚ÇÄ - dt) := by
  refine ‚ü®fun hŒ≥ => hŒ≥.comp_add _, fun hŒ≥ ‚Ü¶ ?_‚ü©
  have := hŒ≥.comp_add (-dt)
  rw [sub_neg_eq_add, sub_add_cancel] at this
  convert this
  ext
  simp only [Function.comp_apply, neg_add_cancel_right]

lemma IsIntegralCurve.comp_add {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurve Œ≥ v) (dt : ‚Ñù) :
    IsIntegralCurve (Œ≥ ‚àò (¬∑ + dt)) v := by
  rw [isIntegralCurve_iff_isIntegralCurveOn] at *
  exact hŒ≥.comp_add _

lemma isIntegralCurve_comp_add {Œ≥ : ‚Ñù ‚Üí M} {dt : ‚Ñù} : IsIntegralCurve Œ≥ v ‚Üî
    IsIntegralCurve (Œ≥ ‚àò (¬∑ + dt)) v := by
  refine ‚ü®fun hŒ≥ => hŒ≥.comp_add _, fun hŒ≥ ‚Ü¶ ?_‚ü©
  convert hŒ≥.comp_add (-dt)
  ext
  simp only [Function.comp_apply, neg_add_cancel_right]

/-! ### Scale lemmas -/

lemma IsIntegralCurveOn.comp_mul {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveOn Œ≥ v s) (a : ‚Ñù) :
    IsIntegralCurveOn (Œ≥ ‚àò (¬∑ * a)) (a ‚Ä¢ v) { t | t * a ‚àà s } := by
  intros t ht
  rw [Function.comp_apply, Pi.smul_apply, ‚Üê ContinuousLinearMap.smulRight_comp]
  refine HasMFDerivAt.comp t (hŒ≥ (t * a) ht) ‚ü®(continuous_mul_right _).continuousAt, ?_‚ü©
  simp only [mfld_simps, hasFDerivWithinAt_univ]
  exact HasFDerivAt.mul_const' (hasFDerivAt_id _) _

lemma isIntegralCurvOn_comp_mul_ne_zero {Œ≥ : ‚Ñù ‚Üí M} {a : ‚Ñù} (ha : a ‚â† 0) :
    IsIntegralCurveOn Œ≥ v s ‚Üî IsIntegralCurveOn (Œ≥ ‚àò (¬∑ * a)) (a ‚Ä¢ v) { t | t * a ‚àà s } := by
  refine ‚ü®fun hŒ≥ => hŒ≥.comp_mul a, fun hŒ≥ ‚Ü¶ ?_‚ü©
  have := hŒ≥.comp_mul a‚Åª¬π
  simp_rw [smul_smul, inv_mul_eq_div, div_self ha, one_smul, mem_setOf_eq, mul_assoc,
    inv_mul_eq_div, div_self ha, mul_one, setOf_mem_eq] at this
  convert this
  ext t
  rw [Function.comp_apply, Function.comp_apply, mul_assoc, inv_mul_eq_div, div_self ha, mul_one]

lemma IsIntegralCurveAt.comp_mul_ne_zero {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) {a : ‚Ñù}
    (ha : a ‚â† 0) : IsIntegralCurveAt (Œ≥ ‚àò (¬∑ * a)) (a ‚Ä¢ v) (t‚ÇÄ / a) := by
  obtain ‚ü®Œµ, hŒµ, h‚ü© := hŒ≥
  refine ‚ü®Œµ / |a|, div_pos hŒµ (abs_pos.mpr ha), ?_‚ü©
  convert h.comp_mul a
  ext t
  rw [Ioo, Ioo, mem_setOf_eq, mem_setOf_eq, mem_setOf_eq]
  by_cases ha' : 0 < a
  ¬∑ rw [abs_eq_self.mpr (le_of_lt ha'), ‚Üê sub_div, ‚Üê add_div, div_lt_iff ha', lt_div_iff ha']
  ¬∑ rw [abs_eq_neg_self.mpr (not_lt.mp ha'), div_neg, sub_neg_eq_add, ‚Üê sub_eq_add_neg, ‚Üê sub_div,
    ‚Üê add_div, div_lt_iff_of_neg (ha.lt_of_le (not_lt.mp ha')),
    lt_div_iff_of_neg (ha.lt_of_le (not_lt.mp ha')), and_comm]

lemma isIntegralCurveAt_comp_mul_ne_zero {Œ≥ : ‚Ñù ‚Üí M} {a : ‚Ñù} (ha : a ‚â† 0) :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ ‚Üî IsIntegralCurveAt (Œ≥ ‚àò (¬∑ * a)) (a ‚Ä¢ v) (t‚ÇÄ / a) := by
  refine ‚ü®fun hŒ≥ => hŒ≥.comp_mul_ne_zero ha, fun hŒ≥ ‚Ü¶ ?_‚ü©
  have := hŒ≥.comp_mul_ne_zero (inv_ne_zero ha)
  rw [smul_smul, inv_mul_eq_div, div_self ha, one_smul, ‚Üê div_mul_eq_div_div_swap,
    inv_mul_eq_div, div_self ha, div_one, Function.comp.assoc] at this
  convert this
  ext t
  simp [inv_mul_eq_div, div_self ha]

lemma IsIntegralCurve.comp_mul {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurve Œ≥ v) (a : ‚Ñù) :
    IsIntegralCurve (Œ≥ ‚àò (¬∑ * a)) (a ‚Ä¢ v) := by
  rw [isIntegralCurve_iff_isIntegralCurveOn] at *
  exact hŒ≥.comp_mul _

lemma isIntegralCurve_comp_mul_ne_zero {Œ≥ : ‚Ñù ‚Üí M} {a : ‚Ñù} (ha : a ‚â† 0) :
    IsIntegralCurve Œ≥ v ‚Üî IsIntegralCurve (Œ≥ ‚àò (¬∑ * a)) (a ‚Ä¢ v) := by
  refine ‚ü®fun hŒ≥ => hŒ≥.comp_mul _, fun hŒ≥ => ?_‚ü©
  have := hŒ≥.comp_mul a‚Åª¬π
  rw [smul_smul, inv_mul_eq_div, div_self ha, one_smul] at this
  convert this
  ext t
  rw [Function.comp_apply, Function.comp_apply, mul_assoc, inv_mul_eq_div, div_self ha, mul_one]

/-- If the vector field `v` vanishes at `x‚ÇÄ`, then the constant curve at `x‚ÇÄ`
  is a global integral curve of `v`. -/
lemma isIntegralCurve_const (h : v x‚ÇÄ = 0) : IsIntegralCurve (fun _ => x‚ÇÄ) v := by
  intro t
  rw [h, ‚Üê ContinuousLinearMap.zero_apply (R‚ÇÅ := ‚Ñù) (R‚ÇÇ := ‚Ñù) (1 : ‚Ñù),
    ContinuousLinearMap.smulRight_one_one]
  exact hasMFDerivAt_const ..

variable (t‚ÇÄ)

/-- For any continuously differentiable vector field and any chosen non-boundary point `x‚ÇÄ` on the
  manifold, there exists an integral curve `Œ≥ : ‚Ñù ‚Üí M` such that `Œ≥ t‚ÇÄ = x‚ÇÄ` and the tangent vector
  of `Œ≥` at `t` coincides with the vector field at `Œ≥ t` for all `t` within an open interval around
  `t‚ÇÄ`.-/
theorem exists_isIntegralCurveAt_of_contMDiffAt (hx : I.IsInteriorPoint x‚ÇÄ) :
    ‚àÉ (Œ≥ : ‚Ñù ‚Üí M), Œ≥ t‚ÇÄ = x‚ÇÄ ‚àß IsIntegralCurveAt Œ≥ v t‚ÇÄ := by
  -- express the differentiability of the section `v` in the local charts
  rw [contMDiffAt_iff] at hv
  obtain ‚ü®_, hv‚ü© := hv
  -- use Picard-Lindel√∂f theorem to extract a solution to the ODE in the local chart
  obtain ‚ü®f, hf1, Œµ1, hŒµ1, hf2‚ü© :=
    exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt t‚ÇÄ
      (hv.contDiffAt (range_mem_nhds_isInteriorPoint hx)).snd
  rw [‚Üê Real.ball_eq_Ioo] at hf2
  -- use continuity of `f` to extract `Œµ2` so that for `t ‚àà Real.ball t‚ÇÄ Œµ2`,
  -- `f t ‚àà interior (extChartAt I x‚ÇÄ).target`
  have hcont := (hf2 t‚ÇÄ (Metric.mem_ball_self hŒµ1)).continuousAt
  rw [continuousAt_def, hf1] at hcont
  have hnhds : f ‚Åª¬π' (interior (extChartAt I x‚ÇÄ).target) ‚àà nhds t‚ÇÄ :=
    hcont _ (isOpen_interior.mem_nhds (ModelWithCorners.isInteriorPoint_iff.mp hx))
  rw [Metric.mem_nhds_iff] at hnhds
  obtain ‚ü®Œµ2, hŒµ2, hf3‚ü© := hnhds
  simp_rw [subset_def, mem_preimage] at hf3
  -- prove that `Œ≥ := (extChartAt I x‚ÇÄ).symm ‚àò f` is a desired integral curve
  refine ‚ü®(extChartAt I x‚ÇÄ).symm ‚àò f,
    Eq.symm (by rw [Function.comp_apply, hf1, LocalEquiv.left_inv _ (mem_extChartAt_source ..)]),
    min Œµ1 Œµ2, lt_min hŒµ1 hŒµ2, ?_‚ü©
  intros t ht
  -- collect useful terms in convenient forms
  rw [‚Üê Real.ball_eq_Ioo] at ht
  have hf3 := hf3 t <| mem_of_mem_of_subset ht (Metric.ball_subset_ball (min_le_right ..))
  have h : HasDerivAt f
    ((fderivWithin ‚Ñù ((extChartAt I x‚ÇÄ) ‚àò (extChartAt I ((extChartAt I x‚ÇÄ).symm (f t))).symm)
        (range I) (extChartAt I ((extChartAt I x‚ÇÄ).symm (f t)) ((extChartAt I x‚ÇÄ).symm (f t))))
      (v ((extChartAt I x‚ÇÄ).symm (f t))))
    t := hf2 t <| mem_of_mem_of_subset ht (Metric.ball_subset_ball (min_le_left ..))
  rw [‚Üê tangentCoordChange_def] at h
  have hf3' := mem_of_mem_of_subset hf3 interior_subset
  have hft1 := mem_preimage.mp <|
    mem_of_mem_of_subset hf3' (extChartAt I x‚ÇÄ).target_subset_preimage_source
  have hft2 := mem_extChartAt_source I ((extChartAt I x‚ÇÄ).symm (f t))
  -- express the derivative of the integral curve in the local chart
  refine ‚ü®ContinuousAt.comp (continuousAt_extChartAt_symm'' _ _ hf3') (h.continuousAt),
    HasDerivWithinAt.hasFDerivWithinAt ?_‚ü©
  simp only [mfld_simps, hasDerivWithinAt_univ]
  show HasDerivAt (((extChartAt I ((extChartAt I x‚ÇÄ).symm (f t))) ‚àò (extChartAt I x‚ÇÄ).symm) ‚àò f)
    (v ((extChartAt I x‚ÇÄ).symm (f t))) t
  -- express `v (Œ≥ t)` as `D‚Åª¬π D (v (Œ≥ t))`, where `D` is a change of coordinates, so we can use
  -- `HasFDerivAt.comp_hasDerivAt` on `h`
  rw [‚Üê tangentCoordChange_self (I := I) (x := (extChartAt I x‚ÇÄ).symm (f t))
      (z := (extChartAt I x‚ÇÄ).symm (f t)) (v := v ((extChartAt I x‚ÇÄ).symm (f t))) hft2,
    ‚Üê tangentCoordChange_comp (x := x‚ÇÄ) ‚ü®‚ü®hft2, hft1‚ü©, hft2‚ü©]
  apply HasFDerivAt.comp_hasDerivAt _ _ h
  apply HasFDerivWithinAt.hasFDerivAt (s := range I) _ <|
    mem_nhds_iff.mpr ‚ü®interior (extChartAt I x‚ÇÄ).target,
      subset_trans interior_subset (extChartAt_target_subset_range ..),
      isOpen_interior, hf3‚ü©
  nth_rw 4 [‚Üê (extChartAt I x‚ÇÄ).right_inv hf3']
  exact hasFDerivWithinAt_tangentCoordChange ‚ü®hft1, hft2‚ü©

/-- For any continuously differentiable vector field defined on a manifold without boundary and any
  chosen starting point `x‚ÇÄ : M`, an integral curve `Œ≥ : ‚Ñù ‚Üí M` exists such that `Œ≥ t‚ÇÄ = x‚ÇÄ` and the
  tangent vector of `Œ≥` at `t` coincides with the vector field at `Œ≥ t` for all `t` within an open
  interval around `t‚ÇÄ`. -/
lemma exists_isIntegralCurveAt_of_contMDiffAt_boundaryless [I.Boundaryless] :
    ‚àÉ (Œ≥ : ‚Ñù ‚Üí M), Œ≥ t‚ÇÄ = x‚ÇÄ ‚àß IsIntegralCurveAt Œ≥ v t‚ÇÄ :=
  exists_isIntegralCurveAt_of_contMDiffAt hv t‚ÇÄ I.isInteriorPoint

example {Œ≥ Œ≥' : ‚Ñù ‚Üí M}
    (hv : ContMDiffAt I I.tangent 1 (fun x => (‚ü®x, v x‚ü© : TangentBundle I M)) (Œ≥ t‚ÇÄ))
    (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ) (hŒ≥' : IsIntegralCurveAt Œ≥' v t‚ÇÄ) (h : Œ≥ t‚ÇÄ = Œ≥' t‚ÇÄ) :
    ‚àÉ t‚ÇÅ > t‚ÇÄ, ‚àÄ t ‚àà Icc t‚ÇÄ t‚ÇÅ, Œ≥ t = Œ≥' t := by
  obtain ‚ü®Œµ, hŒµ, hŒ≥‚ü© := hŒ≥
  obtain ‚ü®Œµ', hŒµ', hŒ≥'‚ü© := hŒ≥'
  set t‚ÇÅ := t‚ÇÄ + (min Œµ Œµ') / 2 with ht‚ÇÅ
  have hf : ContinuousOn ((extChartAt I (Œ≥ t‚ÇÄ)) ‚àò Œ≥) (Icc t‚ÇÄ t‚ÇÅ) := sorry
  have hf' : ContinuousOn ((extChartAt I (Œ≥' t‚ÇÄ)) ‚àò Œ≥) (Icc t‚ÇÄ t‚ÇÅ) := sorry



  -- need to shrink Œµ further to fit inside s



  set v' : E ‚Üí E := fun x =>
    tangentCoordChange I ((extChartAt I (Œ≥ t‚ÇÄ)).symm x) (Œ≥ t‚ÇÄ) ((extChartAt I (Œ≥ t‚ÇÄ)).symm x)
      (v ((extChartAt I (Œ≥ t‚ÇÄ)).symm x)) with hv'
  rw [contMDiffAt_iff] at hv
  obtain ‚ü®_, hv‚ü© := hv
  obtain ‚ü®K, s, hs, hlip‚ü© : ‚àÉ K, ‚àÉ s ‚àà nhds _, LipschitzOnWith K v' s :=
    ContDiffAt.exists_lipschitzOnWith (hv.contDiffAt (range_mem_nhds_isInteriorPoint ht)).snd
  have hlip : ‚àÄ t : ‚Ñù, LipschitzOnWith K ((fun _ => v') t) ((fun _ => s) t) := fun t => hlip


  -- have := ODE_solution_unique_of_mem_set hlip
