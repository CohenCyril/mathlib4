import Mathlib.Algebra.Group.Basic
import Mathlib.Algebra.Ring.Basic

#print Semigroup
#print Monoid
#print Ring
#print Semiring
#print Mul

namespace valuable_stuff

  universe u

  class Mul (Œ± : Type u) where
    /-- `a ‚¨ù b` computes the product of `a` and `b`. See `HMul`. -/
    mul : Œ± ‚Üí Œ± ‚Üí Œ±

  -- macro_rules | `($x ‚¨ù $y)   => `(binop% Mul $x $y)
  infixl:70 " ‚¨ù "   => Mul.mul

  @[ext]
  class Semigroup (G : Type u) extends Mul G where
    /-- Multiplication is associative -/
    protected mul_assoc : ‚àÄ a b c : G, (a ‚¨ù b) ‚¨ù c = a ‚¨ù (b ‚¨ù c)

  class One (Œ± : Type u) where one : Œ±

  notation "ùüô" => One.one

  class MulOneClass (M : Type u) extends One M, Mul M where
    /-- One is a left neutral element for multiplication -/
    protected one_mul : ‚àÄ a : M, one ‚¨ù a = a
    /-- One is a right neutral element for multiplication -/
    protected mul_one : ‚àÄ a : M, a ‚¨ù one = a

  class Monoid (M : Type u) extends Semigroup M, MulOneClass M where
end valuable_stuff

namespace hb_stuff

  universe u

  class Bottom (Œ± : Type u) where

  class MulOfBottom (Œ± : Type u) where
    /-- `a ‚¨ù b` computes the product of `a` and `b`. See `HMul`. -/
    mul : Œ± ‚Üí Œ± ‚Üí Œ±

  class Mul (Œ± : Type u) extends Bottom Œ±, MulOfBottom Œ± where

  -- macro_rules | `($x ‚¨ù $y)   => `(binop% Mul $x $y)
  infixl:70 " ‚¨ù "   => MulOfBottom.mul

  class SemigroupOfMul (G : Type u) [MulOfBottom G] where
    /-- Multiplication is associative -/
    protected mul_assoc : ‚àÄ a b c : G, (a ‚¨ù b) ‚¨ù c = a ‚¨ù (b ‚¨ù c)

  class Semigroup (G : Type u) extends Bottom G, Mul G, SemigroupOfMul G  where
  #print Semigroup

  class OneOfBottom (Œ± : Type u) where one : Œ±
  class One (Œ± : Type u) extends Bottom Œ±, OneOfBottom Œ± where
  notation "ùüô" => OneOfBottom.one

  class MulOneOfBottom (M : Type u) [Bottom M] [OneOfBottom M] [MulOfBottom M] where
    /-- One is a left neutral element for multiplication -/
    protected one_mul : ‚àÄ a : M, ùüô ‚¨ù a = a
    /-- One is a right neutral element for multiplication -/
    protected mul_one : ‚àÄ a : M, a ‚¨ù ùüô = a

  class MulOne (M : Type u) extends Bottom M, One M, Mul M, MulOneOfBottom M where

  class Monoid (M : Type u) extends Bottom M, Semigroup M, MulOne M where
  #print Monoid
  #print MulOne

end hb_stuff

  #print MulOneClass
-- class NonUnitalSemiring (Œ± : Type u) extends NonUnitalNonAssocSemiring Œ±, SemigroupWithZero Œ±

--   class Semiring (Œ± : Type u) extends NonUnitalSemiring Œ±, NonAssocSemiring Œ±, MonoidWithZero Œ±

  --  class Ring (R : Type u) extends Semiring R, AddCommGroup R, AddGroupWithOne R
