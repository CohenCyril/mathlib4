/-
Copyright (c) 2024 James Sundstrom. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: James Sundstrom
-/
import Mathlib.Topology.MetricSpace.PseudoMetric
import Mathlib.Order.WellFoundedSet

/-!
# Oscillation

In this file we define the oscillation of a function `f: E ‚Üí F` at a point `x` of `E`. (`E` is
required to be a TopologicalSpace and `F` a PseudoEMetricSpace.) The oscillation of `f` at `x` is
defined to be the infimum of `diam f '' N` for all neighborhoods `N` of `x`.

We also prove some simple facts about oscillation, most notably that the oscillation of `f`
at `x` is 0 if and only if `f` is continuous at `x`.

## Tags

oscillation
-/

open Topology EMetric

universe u v

variable {E : Type u} {F : Type v} [PseudoEMetricSpace F]

/-- The oscillation of `f : E ‚Üí F` at `x`. -/
noncomputable def oscillation [TopologicalSpace E] (f : E ‚Üí F) (x : E) : ENNReal :=
  ‚®Ö S ‚àà (ùìù x).map f, diam S

/-- The oscillation of `f` at `x` is 0 if and only if `f` is continuous at `x`. -/
theorem oscillation_zero_iff_continuousAt [TopologicalSpace E] (f : E ‚Üí F) (x : E) :
    oscillation f x = 0 ‚Üî ContinuousAt f x := by
  constructor
  ¬∑ intro hf
    rw [ContinuousAt, EMetric.tendsto_nhds]
    intro Œµ Œµ0
    simp only [‚Üê hf, oscillation, Filter.mem_map, gt_iff_lt, iInf_lt_iff, exists_prop] at Œµ0
    obtain ‚ü®S, hS, SŒµ‚ü© := Œµ0
    refine Filter.mem_of_superset hS (fun y hy ‚Ü¶ lt_of_le_of_lt ?_ SŒµ)
    exact edist_le_diam_of_mem (Set.mem_preimage.1 hy) <| Set.mem_preimage.1 (mem_of_mem_nhds hS)
  ¬∑ intro hf
    refine le_antisymm (ENNReal.le_of_forall_pos_le_add fun Œµ hŒµ _ ‚Ü¶ ?_) (zero_le _)
    rw [zero_add]
    have : ball (f x) (Œµ / 2) ‚àà (ùìù x).map f := hf <| ball_mem_nhds _ (by simp [ne_of_gt hŒµ])
    refine (biInf_le diam this).trans (le_of_le_of_eq diam_ball ?_)
    exact (ENNReal.mul_div_cancel' (by norm_num) (by norm_num))

/-- If `oscillation f x < Œµ` at every `x` in a compact set `K`, then there exists `Œ¥ > 0` such
that the oscillation of `f` on `ball x Œ¥` is less than `Œµ` for every `x` in `K`. -/
theorem uniform_oscillation_of_compact [PseudoEMetricSpace E] {K : Set E} (comp : IsCompact K)
    {f : E ‚Üí F} {Œµ : ENNReal} (hK : ‚àÄ x ‚àà K, oscillation f x < Œµ) :
    ‚àÉ Œ¥ > 0, ‚àÄ x ‚àà K, diam (f '' (EMetric.ball x (ENNReal.ofReal Œ¥))) ‚â§ Œµ := by
  let S := fun r ‚Ü¶ { x : E | ‚àÉ (a : ‚Ñù), (a > r ‚àß diam (f '' (ball x (ENNReal.ofReal a))) ‚â§ Œµ) }
  have S_open : ‚àÄ r > 0, IsOpen (S r) := by
    intro r _
    rw [isOpen_iff_nhds]
    rintro x ‚ü®a, ar, ha‚ü© t ht
    rw [EMetric.mem_nhds_iff]
    use ENNReal.ofReal ((a - r) / 2), by simp [ar]
    intro y hy
    apply ht
    use a - (a - r) / 2, by linarith
    refine le_trans (diam_mono (Set.image_mono fun z hz ‚Ü¶ ?_)) ha
    rw [EMetric.mem_ball] at *
    refine lt_of_le_of_lt (edist_triangle z y x) (lt_of_lt_of_eq (ENNReal.add_lt_add hz hy) ?_)
    rw [‚Üê ENNReal.ofReal_add (by linarith) (by linarith)]
    simp
  have S_cover : K ‚äÜ ‚ãÉ r > 0, S r := by
    intro x hx
    have : oscillation f x < Œµ := hK x hx
    simp only [oscillation, Filter.mem_map, iInf_lt_iff] at this
    obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := this
    obtain ‚ü®r, r0, hr‚ü© := EMetric.mem_nhds_iff.1 hn‚ÇÅ
    simp only [gt_iff_lt, Set.mem_iUnion, exists_prop]
    have : ‚àÄ r', (ENNReal.ofReal r') ‚â§ r ‚Üí diam (f '' ball x (ENNReal.ofReal r')) ‚â§ Œµ := by
      intro r' hr'
      refine le_trans (diam_mono (subset_trans ?_ (Set.image_subset_iff.2 hr))) (le_of_lt hn‚ÇÇ)
      exact Set.image_mono (EMetric.ball_subset_ball hr')
    by_cases r_top : r = ‚ä§
    ¬∑ use 1, one_pos, 2, one_lt_two, this 2 (by simp only [r_top, le_top])
    ¬∑ obtain ‚ü®r', hr'‚ü© := exists_between (ENNReal.toReal_pos (ne_of_gt r0) r_top)
      use r', hr'.1, ENNReal.toReal r, hr'.2, this r.toReal ENNReal.ofReal_toReal_le
  have S_antitone : ‚àÄ (r‚ÇÅ r‚ÇÇ : ‚Ñù), r‚ÇÅ ‚â§ r‚ÇÇ ‚Üí S r‚ÇÇ ‚äÜ S r‚ÇÅ :=
    fun r‚ÇÅ r‚ÇÇ hr x ‚ü®a, ar‚ÇÇ, ha‚ü© ‚Ü¶ ‚ü®a, lt_of_le_of_lt hr ar‚ÇÇ, ha‚ü©
  have : ‚àÉ r > 0, K ‚äÜ S r := by
    obtain ‚ü®T, Tb, Tfin, hT‚ü© := comp.elim_finite_subcover_image S_open S_cover
    by_cases T_nonempty : T.Nonempty
    ¬∑ use Tfin.isWF.min T_nonempty, Tb (Tfin.isWF.min_mem T_nonempty)
      intro x hx
      obtain ‚ü®r, hr‚ü© := Set.mem_iUnion.1 (hT hx)
      simp only [Set.mem_iUnion, exists_prop] at hr
      exact (S_antitone _ r (Set.IsWF.min_le Tfin.isWF T_nonempty hr.1)) hr.2
    ¬∑ rw [Set.not_nonempty_iff_eq_empty] at T_nonempty
      use 1, one_pos, subset_trans hT (by simp [T_nonempty])
  obtain ‚ü®Œ¥, Œ¥0, hŒ¥‚ü© := this
  use Œ¥, Œ¥0
  intro x xK
  obtain ‚ü®a, Œ¥a, ha‚ü© := hŒ¥ xK
  refine le_trans (diam_mono (Set.image_mono (ball_subset_ball ?_))) ha
  exact ENNReal.coe_le_coe.2 <| Real.toNNReal_mono (le_of_lt Œ¥a)
