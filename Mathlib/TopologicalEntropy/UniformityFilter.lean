import Mathlib.Tactic
import Mathlib.Order.Filter.Basic
import Mathlib.Topology.UniformSpace.Basic

--import order.pfilter
namespace UniformityFilter

/--Shorthand for the space of uniform neighborhoods--/
notation "ùì§" => uniformity

/-- Filter of small neighborhoods in a uniform space. --/
def smallUniformities {X : Type _} [UniformSpace X] : Filter (Set (X √ó X))
    where
  sets := {N : Set (Set (X √ó X)) | ‚àÉ U ‚àà ùì§ X, ‚àÄ V ‚àà N, V ‚äÜ U}
  univ_sets := by simp; use Set.univ; simp
  sets_of_superset := by simp; intro M N U _ _ _; use Set.univ; simp
  inter_sets := by
    simp; intro M N P _ _ U U_uni N_sub_U; use U, U_uni; intro V _ V_N
    exact N_sub_U V V_N

/-

/- Courtesy of Junyan Xu-/
/- https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Filter.20on.20.28set.20X.29/near/289690942 -/

variable {X : Type*}

def filter.pfilter (F : filter X) : order.pfilter (set X) :=
‚ü® { carrier := F.sets,
    lower' := Œª a b h ha, F.sets_of_superset ha h,
    nonempty' := ‚ü®set.univ, F.univ_sets‚ü©,
    directed' := Œª a ha b hb, ‚ü®order_dual.to_dual (a.of_dual ‚à© b.of_dual),
      F.inter_sets ha hb, set.inter_subset_left a b, set.inter_subset_right a b‚ü© } ‚ü©

lemma filter.generate_singleton (s : set X) :
  filter.generate {s} = filter.principal s :=
begin
  apply le_antisymm,
  { intros t h, apply filter.generate_sets.superset _ h, exact filter.generate_sets.basic rfl },
  { rw filter.sets_iff_generate, rintro _ ‚ü®rfl‚ü©, exact subset_rfl },
end

variables [preorder X] {F : set X} (hn : F.nonempty) (hd : directed_on (‚â•) F)
-- hn and hd together are weaker than pfilter (two of three conditions)

def filter_of_directed : filter X :=
{ sets := {T : set X | ‚àÉ U ‚àà F, ‚àÄ V ‚â§ U, V ‚àà T},
  univ_sets := ‚ü®hn.some, hn.some_mem, Œª _ _, trivial‚ü©,
  sets_of_superset := Œª s t ‚ü®U, hU, hs‚ü© hl, ‚ü®U, hU, Œª V hV, hl (hs V hV)‚ü©,
  inter_sets := Œª s t ‚ü®U‚ÇÅ, hU‚ÇÅ, hs‚ÇÅ‚ü© ‚ü®U‚ÇÇ, hU‚ÇÇ, hs‚ÇÇ‚ü©,
    let ‚ü®U, hU, hl‚ÇÅ, hl‚ÇÇ‚ü© := hd U‚ÇÅ hU‚ÇÅ U‚ÇÇ hU‚ÇÇ in
    ‚ü®U, hU, Œª V hV, ‚ü®hs‚ÇÅ V (hV.trans hl‚ÇÅ), hs‚ÇÇ V (hV.trans hl‚ÇÇ)‚ü©‚ü© }

lemma mem_filter_of_directed (T : set X) :
  T ‚àà filter_of_directed hn hd ‚Üî ‚àÉ U ‚àà F, set.Iic U ‚äÜ T := iff.rfl

lemma filter_of_directed_eq :
  filter_of_directed hn hd = ‚®Ö U ‚àà F, filter.principal (set.Iic U) :=
begin
  simp_rw [‚Üê filter.generate_singleton, ‚Üê filter.generate_Union],
  apply le_antisymm,
  { rw filter.sets_iff_generate, rintro T hT,
    obtain ‚ü®x, hx, he‚ü© := set.mem_Union‚ÇÇ.1 hT,
    refine (mem_filter_of_directed hn hd T).2 ‚ü®x, hx, he.superset‚ü© },
  { rintro T hT, obtain ‚ü®U, hU, hl‚ü© := (mem_filter_of_directed hn hd T).1 hT,
    apply filter.generate_sets.superset (filter.generate_sets.basic _) hl,
    exact set.mem_Union‚ÇÇ.2 ‚ü®U, hU, rfl‚ü© },
end

lemma directed_on_univ' : directed_on (‚â•) F ‚Üî directed_on (‚â•) (set.univ : set F) :=
begin
  rw directed_on_univ_iff, refine ‚ü®Œª hd, ‚ü®_‚ü©, _‚ü©,
  { rintro ‚ü®a, ha‚ü© ‚ü®b, hb‚ü©,
    obtain ‚ü®c, hc, h‚ü© := hd a ha b hb,
    exact ‚ü®‚ü®c, hc‚ü©, h‚ü© },
  { rintro ‚ü®hd‚ü© a ha b hb,
    obtain ‚ü®‚ü®c, hc‚ü©, h‚ü© := hd ‚ü®a, ha‚ü© ‚ü®b, hb‚ü©,
    exact ‚ü®c, hc, h‚ü© },
end

lemma filter_of_directed_eq_at_bot :
  filter_of_directed (@set.univ_nonempty _ hn.to_subtype) (directed_on_univ'.1 hd) =
  filter.at_bot :=
by rw [filter_of_directed_eq, filter.at_bot, infi_univ]

def map_at_bot (F : set X) : filter X := filter.map coe (filter.at_bot : filter F)

include hn hd

lemma mem_map_at_bot (T : set X) :
  T ‚àà map_at_bot F ‚Üî ‚àÉ U ‚àà F, set.Iic U ‚à© F ‚äÜ T :=
begin
  sorry,
  /-dsimp [map_at_bot],
  rw [‚Üê filter_of_directed_eq_at_bot hn hd, mem_filter_of_directed],
  exact ‚ü®Œª ‚ü®‚ü®U, hU‚ü©, _, h‚ü©, ‚ü®U, hU, Œª V ‚ü®hVU, hVF‚ü©, @h ‚ü®V, hVF‚ü© hVU‚ü©,
    Œª ‚ü®U, hU, h‚ü©, ‚ü®‚ü®U, hU‚ü©, trivial, Œª ‚ü®V, hVF‚ü© hVU, h ‚ü®hVU, hVF‚ü©‚ü©‚ü©,-/
end

lemma map_at_bot_eq (T : set X) : map_at_bot F = filter_of_directed hn hd ‚äì filter.principal F :=
begin
  ext, rw [filter.mem_inf_principal, mem_map_at_bot hn hd, mem_filter_of_directed],
  exact exists‚ÇÇ_congr (Œª _ _, forall_congr $ Œª _, and_imp),
end

-/
#lint

end UniformityFilter

